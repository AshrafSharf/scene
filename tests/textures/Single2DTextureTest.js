var BitmapImage2D = require("awayjs-core/lib/image/BitmapImage2D");
var Rectangle = require("awayjs-core/lib/geom/Rectangle");
var URLLoader = require("awayjs-core/lib/net/URLLoader");
var URLLoaderDataFormat = require("awayjs-core/lib/net/URLLoaderDataFormat");
var URLRequest = require("awayjs-core/lib/net/URLRequest");
var LoaderEvent = require("awayjs-core/lib/events/LoaderEvent");
var ParserUtils = require("awayjs-core/lib/parsers/ParserUtils");
var Debug = require("awayjs-core/lib/utils/Debug");
var Single2DTexture = require("awayjs-display/lib/textures/Single2DTexture");
var Single2DTextureTest = (function () {
    function Single2DTextureTest() {
        //---------------------------------------
        // Load a PNG
        var _this = this;
        var mipUrlRequest = new URLRequest('assets/1024x1024.png');
        this.mipLoader = new URLLoader();
        this.mipLoader.dataFormat = URLLoaderDataFormat.BLOB;
        this.mipLoader.load(mipUrlRequest);
        this.mipLoader.addEventListener(LoaderEvent.LOAD_COMPLETE, function (event) { return _this.mipImgLoaded(event); });
    }
    Single2DTextureTest.prototype.mipImgLoaded = function (event) {
        var _this = this;
        var loader = event.target;
        var image = ParserUtils.blobToImage(loader.data);
        image.onload = function (event) { return _this.onImageLoad(event); };
    };
    Single2DTextureTest.prototype.onImageLoad = function (event) {
        var image = event.target;
        var rect = new Rectangle(0, 0, image.width, image.height);
        console.log('LoaderEvent', image);
        this.bitmapData = new BitmapImage2D(image.width, image.height);
        this.bitmapData.draw(image);
        this.target = new Single2DTexture(this.bitmapData);
        Debug.log('BitmapImage2D', this.bitmapData);
        Debug.log('Single2DTexture', this.target);
    };
    return Single2DTextureTest;
})();

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRleHR1cmVzL1NpbmdsZTJEVGV4dHVyZVRlc3QudHMiXSwibmFtZXMiOlsiU2luZ2xlMkRUZXh0dXJlVGVzdCIsIlNpbmdsZTJEVGV4dHVyZVRlc3QuY29uc3RydWN0b3IiLCJTaW5nbGUyRFRleHR1cmVUZXN0Lm1pcEltZ0xvYWRlZCIsIlNpbmdsZTJEVGV4dHVyZVRlc3Qub25JbWFnZUxvYWQiXSwibWFwcGluZ3MiOiJBQUFBLElBQU8sYUFBYSxXQUFZLHFDQUFxQyxDQUFDLENBQUM7QUFDdkUsSUFBTyxTQUFTLFdBQWEsZ0NBQWdDLENBQUMsQ0FBQztBQUMvRCxJQUFPLFNBQVMsV0FBYSwrQkFBK0IsQ0FBQyxDQUFDO0FBQzlELElBQU8sbUJBQW1CLFdBQVcseUNBQXlDLENBQUMsQ0FBQztBQUNoRixJQUFPLFVBQVUsV0FBYSxnQ0FBZ0MsQ0FBQyxDQUFDO0FBQ2hFLElBQU8sV0FBVyxXQUFhLG9DQUFvQyxDQUFDLENBQUM7QUFDckUsSUFBTyxXQUFXLFdBQWEscUNBQXFDLENBQUMsQ0FBQztBQUN0RSxJQUFPLEtBQUssV0FBYyw2QkFBNkIsQ0FBQyxDQUFDO0FBRXpELElBQU8sZUFBZSxXQUFZLDZDQUE2QyxDQUFDLENBQUM7QUFFakYsSUFBTSxtQkFBbUI7SUFNeEJBLFNBTktBLG1CQUFtQkE7UUFRdkJDLHlDQUF5Q0E7UUFDekNBLGFBQWFBO1FBVGZBLGlCQTJDQ0E7UUFoQ0NBLElBQUlBLGFBQWFBLEdBQUdBLElBQUlBLFVBQVVBLENBQUNBLHNCQUFzQkEsQ0FBQ0EsQ0FBQ0E7UUFDM0RBLElBQUlBLENBQUNBLFNBQVNBLEdBQUlBLElBQUlBLFNBQVNBLEVBQUVBLENBQUNBO1FBQ2xDQSxJQUFJQSxDQUFDQSxTQUFTQSxDQUFDQSxVQUFVQSxHQUFHQSxtQkFBbUJBLENBQUNBLElBQUlBLENBQUNBO1FBQ3JEQSxJQUFJQSxDQUFDQSxTQUFTQSxDQUFDQSxJQUFJQSxDQUFDQSxhQUFhQSxDQUFDQSxDQUFDQTtRQUNuQ0EsSUFBSUEsQ0FBQ0EsU0FBU0EsQ0FBQ0EsZ0JBQWdCQSxDQUFDQSxXQUFXQSxDQUFDQSxhQUFhQSxFQUFFQSxVQUFDQSxLQUFpQkEsSUFBS0EsT0FBQUEsS0FBSUEsQ0FBQ0EsWUFBWUEsQ0FBQ0EsS0FBS0EsQ0FBQ0EsRUFBeEJBLENBQXdCQSxDQUFDQSxDQUFDQTtJQUU3R0EsQ0FBQ0E7SUFFT0QsMENBQVlBLEdBQXBCQSxVQUFxQkEsS0FBaUJBO1FBQXRDRSxpQkFNQ0E7UUFIQUEsSUFBSUEsTUFBTUEsR0FBYUEsS0FBS0EsQ0FBQ0EsTUFBTUEsQ0FBQ0E7UUFDcENBLElBQUlBLEtBQUtBLEdBQW9CQSxXQUFXQSxDQUFDQSxXQUFXQSxDQUFDQSxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQSxDQUFDQTtRQUNsRUEsS0FBS0EsQ0FBQ0EsTUFBTUEsR0FBR0EsVUFBQ0EsS0FBS0EsSUFBS0EsT0FBQUEsS0FBSUEsQ0FBQ0EsV0FBV0EsQ0FBQ0EsS0FBS0EsQ0FBQ0EsRUFBdkJBLENBQXVCQSxDQUFDQTtJQUNuREEsQ0FBQ0E7SUFFT0YseUNBQVdBLEdBQW5CQSxVQUFvQkEsS0FBS0E7UUFFeEJHLElBQUlBLEtBQUtBLEdBQXVDQSxLQUFLQSxDQUFDQSxNQUFNQSxDQUFDQTtRQUU3REEsSUFBSUEsSUFBSUEsR0FBYUEsSUFBSUEsU0FBU0EsQ0FBQ0EsQ0FBQ0EsRUFBRUEsQ0FBQ0EsRUFBRUEsS0FBS0EsQ0FBQ0EsS0FBS0EsRUFBRUEsS0FBS0EsQ0FBQ0EsTUFBTUEsQ0FBQ0EsQ0FBQ0E7UUFFcEVBLE9BQU9BLENBQUNBLEdBQUdBLENBQUNBLGFBQWFBLEVBQUVBLEtBQUtBLENBQUNBLENBQUNBO1FBRWxDQSxJQUFJQSxDQUFDQSxVQUFVQSxHQUFHQSxJQUFJQSxhQUFhQSxDQUFDQSxLQUFLQSxDQUFDQSxLQUFLQSxFQUFHQSxLQUFLQSxDQUFDQSxNQUFNQSxDQUFDQSxDQUFDQTtRQUNoRUEsSUFBSUEsQ0FBQ0EsVUFBVUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsS0FBS0EsQ0FBQ0EsQ0FBQ0E7UUFFNUJBLElBQUlBLENBQUNBLE1BQU1BLEdBQUdBLElBQUlBLGVBQWVBLENBQUNBLElBQUlBLENBQUNBLFVBQVVBLENBQUNBLENBQUNBO1FBRW5EQSxLQUFLQSxDQUFDQSxHQUFHQSxDQUFDQSxlQUFlQSxFQUFFQSxJQUFJQSxDQUFDQSxVQUFVQSxDQUFDQSxDQUFDQTtRQUM1Q0EsS0FBS0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsaUJBQWlCQSxFQUFFQSxJQUFJQSxDQUFDQSxNQUFNQSxDQUFDQSxDQUFDQTtJQUMzQ0EsQ0FBQ0E7SUFDRkgsMEJBQUNBO0FBQURBLENBM0NBLEFBMkNDQSxJQUFBIiwiZmlsZSI6InRleHR1cmVzL1NpbmdsZTJEVGV4dHVyZVRlc3QuanMiLCJzb3VyY2VSb290IjoiLi90ZXN0cyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBCaXRtYXBJbWFnZTJEXHRcdD0gcmVxdWlyZShcImF3YXlqcy1jb3JlL2xpYi9pbWFnZS9CaXRtYXBJbWFnZTJEXCIpO1xuaW1wb3J0IFJlY3RhbmdsZVx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1jb3JlL2xpYi9nZW9tL1JlY3RhbmdsZVwiKTtcbmltcG9ydCBVUkxMb2FkZXJcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtY29yZS9saWIvbmV0L1VSTExvYWRlclwiKTtcbmltcG9ydCBVUkxMb2FkZXJEYXRhRm9ybWF0XHQ9IHJlcXVpcmUoXCJhd2F5anMtY29yZS9saWIvbmV0L1VSTExvYWRlckRhdGFGb3JtYXRcIik7XG5pbXBvcnQgVVJMUmVxdWVzdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1jb3JlL2xpYi9uZXQvVVJMUmVxdWVzdFwiKTtcbmltcG9ydCBMb2FkZXJFdmVudFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1jb3JlL2xpYi9ldmVudHMvTG9hZGVyRXZlbnRcIik7XG5pbXBvcnQgUGFyc2VyVXRpbHNcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtY29yZS9saWIvcGFyc2Vycy9QYXJzZXJVdGlsc1wiKTtcbmltcG9ydCBEZWJ1Z1x0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLWNvcmUvbGliL3V0aWxzL0RlYnVnXCIpO1xuXG5pbXBvcnQgU2luZ2xlMkRUZXh0dXJlXHRcdD0gcmVxdWlyZShcImF3YXlqcy1kaXNwbGF5L2xpYi90ZXh0dXJlcy9TaW5nbGUyRFRleHR1cmVcIik7XG5cbmNsYXNzIFNpbmdsZTJEVGV4dHVyZVRlc3Rcbntcblx0cHJpdmF0ZSBtaXBMb2FkZXI6VVJMTG9hZGVyO1xuXHRwcml2YXRlIGJpdG1hcERhdGE6Qml0bWFwSW1hZ2UyRDtcblx0cHJpdmF0ZSB0YXJnZXQ6U2luZ2xlMkRUZXh0dXJlO1xuXG5cdGNvbnN0cnVjdG9yKClcblx0e1xuXHRcdC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cdFx0Ly8gTG9hZCBhIFBOR1xuXG5cdFx0dmFyIG1pcFVybFJlcXVlc3QgPSBuZXcgVVJMUmVxdWVzdCgnYXNzZXRzLzEwMjR4MTAyNC5wbmcnKTtcblx0XHR0aGlzLm1pcExvYWRlciAgPSBuZXcgVVJMTG9hZGVyKCk7XG5cdFx0dGhpcy5taXBMb2FkZXIuZGF0YUZvcm1hdCA9IFVSTExvYWRlckRhdGFGb3JtYXQuQkxPQjtcblx0XHR0aGlzLm1pcExvYWRlci5sb2FkKG1pcFVybFJlcXVlc3QpO1xuXHRcdHRoaXMubWlwTG9hZGVyLmFkZEV2ZW50TGlzdGVuZXIoTG9hZGVyRXZlbnQuTE9BRF9DT01QTEVURSwgKGV2ZW50OkxvYWRlckV2ZW50KSA9PiB0aGlzLm1pcEltZ0xvYWRlZChldmVudCkpO1xuXG5cdH1cblxuXHRwcml2YXRlIG1pcEltZ0xvYWRlZChldmVudDpMb2FkZXJFdmVudClcblx0e1xuXG5cdFx0dmFyIGxvYWRlcjpVUkxMb2FkZXIgPSBldmVudC50YXJnZXQ7XG5cdFx0dmFyIGltYWdlOkhUTUxJbWFnZUVsZW1lbnQgPSBQYXJzZXJVdGlscy5ibG9iVG9JbWFnZShsb2FkZXIuZGF0YSk7XG5cdFx0aW1hZ2Uub25sb2FkID0gKGV2ZW50KSA9PiB0aGlzLm9uSW1hZ2VMb2FkKGV2ZW50KTtcblx0fVxuXG5cdHByaXZhdGUgb25JbWFnZUxvYWQoZXZlbnQpXG5cdHtcblx0XHR2YXIgaW1hZ2U6SFRNTEltYWdlRWxlbWVudCA9IDxIVE1MSW1hZ2VFbGVtZW50PiBldmVudC50YXJnZXQ7XG5cblx0XHR2YXIgcmVjdDpSZWN0YW5nbGUgPSBuZXcgUmVjdGFuZ2xlKDAsIDAsIGltYWdlLndpZHRoLCBpbWFnZS5oZWlnaHQpO1xuXG5cdFx0Y29uc29sZS5sb2coJ0xvYWRlckV2ZW50JywgaW1hZ2UpO1xuXG5cdFx0dGhpcy5iaXRtYXBEYXRhID0gbmV3IEJpdG1hcEltYWdlMkQoaW1hZ2Uud2lkdGggLCBpbWFnZS5oZWlnaHQpO1xuXHRcdHRoaXMuYml0bWFwRGF0YS5kcmF3KGltYWdlKTtcblxuXHRcdHRoaXMudGFyZ2V0ID0gbmV3IFNpbmdsZTJEVGV4dHVyZSh0aGlzLmJpdG1hcERhdGEpO1xuXG5cdFx0RGVidWcubG9nKCdCaXRtYXBJbWFnZTJEJywgdGhpcy5iaXRtYXBEYXRhKTtcblx0XHREZWJ1Zy5sb2coJ1NpbmdsZTJEVGV4dHVyZScsIHRoaXMudGFyZ2V0KTtcblx0fVxufSJdfQ==