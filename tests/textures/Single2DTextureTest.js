var BitmapImage2D = require("awayjs-core/lib/data/BitmapImage2D");
var Rectangle = require("awayjs-core/lib/geom/Rectangle");
var URLLoader = require("awayjs-core/lib/net/URLLoader");
var URLLoaderDataFormat = require("awayjs-core/lib/net/URLLoaderDataFormat");
var URLRequest = require("awayjs-core/lib/net/URLRequest");
var Event = require("awayjs-core/lib/events/Event");
var ParserUtils = require("awayjs-core/lib/parsers/ParserUtils");
var Debug = require("awayjs-core/lib/utils/Debug");
var Single2DTexture = require("awayjs-display/lib/textures/Single2DTexture");
var Single2DTextureTest = (function () {
    function Single2DTextureTest() {
        //---------------------------------------
        // Load a PNG
        var _this = this;
        var mipUrlRequest = new URLRequest('assets/1024x1024.png');
        this.mipLoader = new URLLoader();
        this.mipLoader.dataFormat = URLLoaderDataFormat.BLOB;
        this.mipLoader.load(mipUrlRequest);
        this.mipLoader.addEventListener(Event.COMPLETE, function (e) { return _this.mipImgLoaded(e); });
    }
    Single2DTextureTest.prototype.mipImgLoaded = function (e) {
        var _this = this;
        var loader = e.target;
        var image = ParserUtils.blobToImage(loader.data);
        image.onload = function (event) { return _this.onImageLoad(event); };
    };
    Single2DTextureTest.prototype.onImageLoad = function (event) {
        var image = event.target;
        var rect = new Rectangle(0, 0, image.width, image.height);
        console.log('Event', image);
        this.bitmapData = new BitmapImage2D(image.width, image.height);
        this.bitmapData.draw(image);
        this.target = new Single2DTexture(this.bitmapData);
        Debug.log('BitmapImage2D', this.bitmapData);
        Debug.log('Single2DTexture', this.target);
    };
    return Single2DTextureTest;
})();

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRleHR1cmVzL1NpbmdsZTJEVGV4dHVyZVRlc3QudHMiXSwibmFtZXMiOlsiU2luZ2xlMkRUZXh0dXJlVGVzdCIsIlNpbmdsZTJEVGV4dHVyZVRlc3QuY29uc3RydWN0b3IiLCJTaW5nbGUyRFRleHR1cmVUZXN0Lm1pcEltZ0xvYWRlZCIsIlNpbmdsZTJEVGV4dHVyZVRlc3Qub25JbWFnZUxvYWQiXSwibWFwcGluZ3MiOiJBQUFBLElBQU8sYUFBYSxXQUFZLG9DQUFvQyxDQUFDLENBQUM7QUFDdEUsSUFBTyxTQUFTLFdBQWEsZ0NBQWdDLENBQUMsQ0FBQztBQUMvRCxJQUFPLFNBQVMsV0FBYSwrQkFBK0IsQ0FBQyxDQUFDO0FBQzlELElBQU8sbUJBQW1CLFdBQVcseUNBQXlDLENBQUMsQ0FBQztBQUNoRixJQUFPLFVBQVUsV0FBYSxnQ0FBZ0MsQ0FBQyxDQUFDO0FBQ2hFLElBQU8sS0FBSyxXQUFjLDhCQUE4QixDQUFDLENBQUM7QUFDMUQsSUFBTyxXQUFXLFdBQWEscUNBQXFDLENBQUMsQ0FBQztBQUN0RSxJQUFPLEtBQUssV0FBYyw2QkFBNkIsQ0FBQyxDQUFDO0FBRXpELElBQU8sZUFBZSxXQUFZLDZDQUE2QyxDQUFDLENBQUM7QUFFakYsSUFBTSxtQkFBbUI7SUFPeEJBLFNBUEtBLG1CQUFtQkE7UUFVdkJDLHlDQUF5Q0E7UUFDekNBLGFBQWFBO1FBWGZBLGlCQThDQ0E7UUFqQ0NBLElBQUlBLGFBQWFBLEdBQUdBLElBQUlBLFVBQVVBLENBQUVBLHNCQUFzQkEsQ0FBQ0EsQ0FBQ0E7UUFDNURBLElBQUlBLENBQUNBLFNBQVNBLEdBQUlBLElBQUlBLFNBQVNBLEVBQUVBLENBQUNBO1FBQ2xDQSxJQUFJQSxDQUFDQSxTQUFTQSxDQUFDQSxVQUFVQSxHQUFHQSxtQkFBbUJBLENBQUNBLElBQUlBLENBQUNBO1FBQ3JEQSxJQUFJQSxDQUFDQSxTQUFTQSxDQUFDQSxJQUFJQSxDQUFFQSxhQUFhQSxDQUFFQSxDQUFDQTtRQUNyQ0EsSUFBSUEsQ0FBQ0EsU0FBU0EsQ0FBQ0EsZ0JBQWdCQSxDQUFFQSxLQUFLQSxDQUFDQSxRQUFRQSxFQUFHQSxVQUFDQSxDQUFDQSxJQUFLQSxPQUFBQSxLQUFJQSxDQUFDQSxZQUFZQSxDQUFDQSxDQUFDQSxDQUFDQSxFQUFwQkEsQ0FBb0JBLENBQUVBLENBQUNBO0lBRWpGQSxDQUFDQTtJQUVPRCwwQ0FBWUEsR0FBcEJBLFVBQXNCQSxDQUFDQTtRQUF2QkUsaUJBTUNBO1FBSEFBLElBQUlBLE1BQU1BLEdBQW9DQSxDQUFDQSxDQUFDQSxNQUFNQSxDQUFDQTtRQUN2REEsSUFBSUEsS0FBS0EsR0FBc0JBLFdBQVdBLENBQUNBLFdBQVdBLENBQUNBLE1BQU1BLENBQUNBLElBQUlBLENBQUNBLENBQUNBO1FBQ3BFQSxLQUFLQSxDQUFDQSxNQUFNQSxHQUFHQSxVQUFFQSxLQUFLQSxJQUFNQSxPQUFBQSxLQUFJQSxDQUFDQSxXQUFXQSxDQUFFQSxLQUFLQSxDQUFFQSxFQUF6QkEsQ0FBeUJBLENBQUNBO0lBQ3ZEQSxDQUFDQTtJQUVPRix5Q0FBV0EsR0FBbkJBLFVBQXFCQSxLQUFLQTtRQUV6QkcsSUFBSUEsS0FBS0EsR0FBeUNBLEtBQUtBLENBQUNBLE1BQU1BLENBQUNBO1FBRS9EQSxJQUFJQSxJQUFJQSxHQUF3QkEsSUFBSUEsU0FBU0EsQ0FBRUEsQ0FBQ0EsRUFBR0EsQ0FBQ0EsRUFBR0EsS0FBS0EsQ0FBQ0EsS0FBS0EsRUFBR0EsS0FBS0EsQ0FBQ0EsTUFBTUEsQ0FBRUEsQ0FBQ0E7UUFFcEZBLE9BQU9BLENBQUNBLEdBQUdBLENBQUVBLE9BQU9BLEVBQUdBLEtBQUtBLENBQUVBLENBQUNBO1FBRS9CQSxJQUFJQSxDQUFDQSxVQUFVQSxHQUFHQSxJQUFJQSxhQUFhQSxDQUFFQSxLQUFLQSxDQUFDQSxLQUFLQSxFQUFHQSxLQUFLQSxDQUFDQSxNQUFNQSxDQUFFQSxDQUFDQTtRQUNsRUEsSUFBSUEsQ0FBQ0EsVUFBVUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsS0FBS0EsQ0FBQ0EsQ0FBQ0E7UUFFNUJBLElBQUlBLENBQUNBLE1BQU1BLEdBQUdBLElBQUlBLGVBQWVBLENBQUNBLElBQUlBLENBQUNBLFVBQVVBLENBQUNBLENBQUNBO1FBRW5EQSxLQUFLQSxDQUFDQSxHQUFHQSxDQUFFQSxlQUFlQSxFQUFhQSxJQUFJQSxDQUFDQSxVQUFVQSxDQUFFQSxDQUFDQTtRQUN6REEsS0FBS0EsQ0FBQ0EsR0FBR0EsQ0FBRUEsaUJBQWlCQSxFQUFTQSxJQUFJQSxDQUFDQSxNQUFNQSxDQUFFQSxDQUFDQTtJQUVwREEsQ0FBQ0E7SUFDRkgsMEJBQUNBO0FBQURBLENBOUNBLEFBOENDQSxJQUFBIiwiZmlsZSI6InRleHR1cmVzL1NpbmdsZTJEVGV4dHVyZVRlc3QuanMiLCJzb3VyY2VSb290IjoiLi90ZXN0cyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBCaXRtYXBJbWFnZTJEXHRcdD0gcmVxdWlyZShcImF3YXlqcy1jb3JlL2xpYi9kYXRhL0JpdG1hcEltYWdlMkRcIik7XG5pbXBvcnQgUmVjdGFuZ2xlXHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLWNvcmUvbGliL2dlb20vUmVjdGFuZ2xlXCIpO1xuaW1wb3J0IFVSTExvYWRlclx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1jb3JlL2xpYi9uZXQvVVJMTG9hZGVyXCIpO1xuaW1wb3J0IFVSTExvYWRlckRhdGFGb3JtYXRcdD0gcmVxdWlyZShcImF3YXlqcy1jb3JlL2xpYi9uZXQvVVJMTG9hZGVyRGF0YUZvcm1hdFwiKTtcbmltcG9ydCBVUkxSZXF1ZXN0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLWNvcmUvbGliL25ldC9VUkxSZXF1ZXN0XCIpO1xuaW1wb3J0IEV2ZW50XHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtY29yZS9saWIvZXZlbnRzL0V2ZW50XCIpO1xuaW1wb3J0IFBhcnNlclV0aWxzXHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLWNvcmUvbGliL3BhcnNlcnMvUGFyc2VyVXRpbHNcIik7XG5pbXBvcnQgRGVidWdcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1jb3JlL2xpYi91dGlscy9EZWJ1Z1wiKTtcblxuaW1wb3J0IFNpbmdsZTJEVGV4dHVyZVx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtZGlzcGxheS9saWIvdGV4dHVyZXMvU2luZ2xlMkRUZXh0dXJlXCIpO1xuXG5jbGFzcyBTaW5nbGUyRFRleHR1cmVUZXN0XG57XG5cblx0cHJpdmF0ZSBtaXBMb2FkZXIgICAgICAgOiBVUkxMb2FkZXI7XG5cdHByaXZhdGUgYml0bWFwRGF0YSAgICAgIDogQml0bWFwSW1hZ2UyRDtcblx0cHJpdmF0ZSB0YXJnZXQgICAgICAgICAgOiBTaW5nbGUyRFRleHR1cmU7XG5cblx0Y29uc3RydWN0b3IoKVxuXHR7XG5cblx0XHQvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXHRcdC8vIExvYWQgYSBQTkdcblxuXHRcdHZhciBtaXBVcmxSZXF1ZXN0ID0gbmV3IFVSTFJlcXVlc3QoICdhc3NldHMvMTAyNHgxMDI0LnBuZycpO1xuXHRcdHRoaXMubWlwTG9hZGVyICA9IG5ldyBVUkxMb2FkZXIoKTtcblx0XHR0aGlzLm1pcExvYWRlci5kYXRhRm9ybWF0ID0gVVJMTG9hZGVyRGF0YUZvcm1hdC5CTE9CO1xuXHRcdHRoaXMubWlwTG9hZGVyLmxvYWQoIG1pcFVybFJlcXVlc3QgKTtcblx0XHR0aGlzLm1pcExvYWRlci5hZGRFdmVudExpc3RlbmVyKCBFdmVudC5DT01QTEVURSAsIChlKSA9PiB0aGlzLm1pcEltZ0xvYWRlZChlKSApO1xuXG5cdH1cblxuXHRwcml2YXRlIG1pcEltZ0xvYWRlZCggZSApXG5cdHtcblxuXHRcdHZhciBsb2FkZXIgIDogVVJMTG9hZGVyICAgICAgICA9IDxVUkxMb2FkZXIgPiBlLnRhcmdldDtcblx0XHR2YXIgaW1hZ2UgOiBIVE1MSW1hZ2VFbGVtZW50ID0gUGFyc2VyVXRpbHMuYmxvYlRvSW1hZ2UobG9hZGVyLmRhdGEpO1xuXHRcdGltYWdlLm9ubG9hZCA9ICggZXZlbnQgKSA9PiB0aGlzLm9uSW1hZ2VMb2FkKCBldmVudCApO1xuXHR9XG5cblx0cHJpdmF0ZSBvbkltYWdlTG9hZCAoZXZlbnQpXG5cdHtcblx0XHR2YXIgaW1hZ2UgOiBIVE1MSW1hZ2VFbGVtZW50ID0gPEhUTUxJbWFnZUVsZW1lbnQ+IGV2ZW50LnRhcmdldDtcblxuXHRcdHZhciByZWN0ICAgIDogUmVjdGFuZ2xlICAgICAgID0gbmV3IFJlY3RhbmdsZSggMCAsIDAgLCBpbWFnZS53aWR0aCAsIGltYWdlLmhlaWdodCApO1xuXG5cdFx0Y29uc29sZS5sb2coICdFdmVudCcgLCBpbWFnZSApO1xuXG5cdFx0dGhpcy5iaXRtYXBEYXRhID0gbmV3IEJpdG1hcEltYWdlMkQoIGltYWdlLndpZHRoICwgaW1hZ2UuaGVpZ2h0ICk7XG5cdFx0dGhpcy5iaXRtYXBEYXRhLmRyYXcoaW1hZ2UpO1xuXG5cdFx0dGhpcy50YXJnZXQgPSBuZXcgU2luZ2xlMkRUZXh0dXJlKHRoaXMuYml0bWFwRGF0YSk7XG5cblx0XHREZWJ1Zy5sb2coICdCaXRtYXBJbWFnZTJEJyAgICAgICAgICAgLCB0aGlzLmJpdG1hcERhdGEgKTtcblx0XHREZWJ1Zy5sb2coICdTaW5nbGUyRFRleHR1cmUnICAgICAgICwgdGhpcy50YXJnZXQgKTtcblxuXHR9XG59Il19