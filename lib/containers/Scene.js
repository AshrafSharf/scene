var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var EventDispatcher = require("awayjs-core/lib/events/EventDispatcher");
var DisplayObjectContainer = require("awayjs-display/lib/containers/DisplayObjectContainer");
var SceneEvent = require("awayjs-display/lib/events/SceneEvent");
var NodeBase = require("awayjs-display/lib/partition/NodeBase");
var Partition = require("awayjs-display/lib/partition/Partition");
var Scene = (function (_super) {
    __extends(Scene, _super);
    function Scene() {
        _super.call(this);
        this._expandedPartitions = new Array();
        this._partitions = new Array();
        this._iCollectionMark = 0;
        this._partition = new Partition(new NodeBase());
        this._iSceneGraphRoot = new DisplayObjectContainer();
        this._iSceneGraphRoot._iSetScene(this);
        this._iSceneGraphRoot._iIsRoot = true;
        this._iSceneGraphRoot.partition = this._partition;
    }
    Scene.prototype.traversePartitions = function (traverser) {
        var i = 0;
        var len = this._partitions.length;
        traverser.scene = this;
        this._iCollectionMark++;
        while (i < len)
            this._partitions[i++].traverse(traverser);
    };
    Object.defineProperty(Scene.prototype, "partition", {
        get: function () {
            return this._iSceneGraphRoot.partition;
        },
        set: function (value) {
            this._iSceneGraphRoot.partition = value;
            this.dispatchEvent(new SceneEvent(SceneEvent.PARTITION_CHANGED, this._iSceneGraphRoot));
        },
        enumerable: true,
        configurable: true
    });
    Scene.prototype.contains = function (child) {
        return this._iSceneGraphRoot.contains(child);
    };
    Scene.prototype.addChild = function (child) {
        return this._iSceneGraphRoot.addChild(child);
    };
    Scene.prototype.removeChild = function (child) {
        this._iSceneGraphRoot.removeChild(child);
    };
    Scene.prototype.removeChildAt = function (index) {
        this._iSceneGraphRoot.removeChildAt(index);
    };
    Scene.prototype.getChildAt = function (index) {
        return this._iSceneGraphRoot.getChildAt(index);
    };
    Object.defineProperty(Scene.prototype, "numChildren", {
        get: function () {
            return this._iSceneGraphRoot.numChildren;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @internal
     */
    Scene.prototype._iRegisterPartition = function (partition) {
        this._expandedPartitions.push(partition);
        //ensure duplicates are not found in partitions array
        if (this._partitions.indexOf(partition) == -1)
            this._partitions.push(partition);
    };
    /**
     * @internal
     */
    Scene.prototype._iUnregisterPartition = function (partition) {
        this._expandedPartitions.splice(this._expandedPartitions.indexOf(partition), 1);
        //if no more partition references found, remove from partitions array
        if (this._expandedPartitions.indexOf(partition) == -1)
            this._partitions.splice(this._partitions.indexOf(partition), 1);
    };
    return Scene;
})(EventDispatcher);
module.exports = Scene;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImF3YXlqcy1kaXNwbGF5L2xpYi9jb250YWluZXJzL3NjZW5lLnRzIl0sIm5hbWVzIjpbIlNjZW5lIiwiU2NlbmUuY29uc3RydWN0b3IiLCJTY2VuZS50cmF2ZXJzZVBhcnRpdGlvbnMiLCJTY2VuZS5wYXJ0aXRpb24iLCJTY2VuZS5jb250YWlucyIsIlNjZW5lLmFkZENoaWxkIiwiU2NlbmUucmVtb3ZlQ2hpbGQiLCJTY2VuZS5yZW1vdmVDaGlsZEF0IiwiU2NlbmUuZ2V0Q2hpbGRBdCIsIlNjZW5lLm51bUNoaWxkcmVuIiwiU2NlbmUuX2lSZWdpc3RlclBhcnRpdGlvbiIsIlNjZW5lLl9pVW5yZWdpc3RlclBhcnRpdGlvbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsSUFBTyxlQUFlLFdBQWMsd0NBQXdDLENBQUMsQ0FBQztBQUc5RSxJQUFPLHNCQUFzQixXQUFZLHNEQUFzRCxDQUFDLENBQUM7QUFDakcsSUFBTyxVQUFVLFdBQWUsc0NBQXNDLENBQUMsQ0FBQztBQUN4RSxJQUFPLFFBQVEsV0FBZ0IsdUNBQXVDLENBQUMsQ0FBQztBQUN4RSxJQUFPLFNBQVMsV0FBZSx3Q0FBd0MsQ0FBQyxDQUFDO0FBR3pFLElBQU0sS0FBSztJQUFTQSxVQUFkQSxLQUFLQSxVQUF3QkE7SUFTbENBLFNBVEtBLEtBQUtBO1FBV1RDLGlCQUFPQSxDQUFDQTtRQVREQSx3QkFBbUJBLEdBQW9CQSxJQUFJQSxLQUFLQSxFQUFhQSxDQUFDQTtRQUM5REEsZ0JBQVdBLEdBQW9CQSxJQUFJQSxLQUFLQSxFQUFhQSxDQUFDQTtRQUl2REEscUJBQWdCQSxHQUFHQSxDQUFDQSxDQUFDQTtRQU0zQkEsSUFBSUEsQ0FBQ0EsVUFBVUEsR0FBR0EsSUFBSUEsU0FBU0EsQ0FBQ0EsSUFBSUEsUUFBUUEsRUFBRUEsQ0FBQ0EsQ0FBQ0E7UUFFaERBLElBQUlBLENBQUNBLGdCQUFnQkEsR0FBR0EsSUFBSUEsc0JBQXNCQSxFQUFFQSxDQUFDQTtRQUVyREEsSUFBSUEsQ0FBQ0EsZ0JBQWdCQSxD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QUNuQ0EsQ0FBQ0E7SUFFRFY7O09BRUdBO0lBQ0lBLHFDQUFxQkEsR0FBNUJBLFVBQTZCQSxTQUFtQkE7UUFFL0NXLElBQUlBLENBQUNBLG1CQUFtQkEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsbUJBQW1CQSxDQUFDQSxPQUFPQSxDQUFDQSxTQUFTQSxDQUFDQSxFQUFFQSxDQUFDQSxDQUFDQSxDQUFDQTtRQUVoRkEsQUFDQUEscUVBRHFFQTtRQUNyRUEsRUFBRUEsQ0FBQ0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsbUJBQW1CQSxDQUFDQSxPQUFPQSxDQUFDQSxTQUFTQSxDQUFDQSxJQUFJQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUNyREEsSUFBSUEsQ0FBQ0EsV0FBV0EsQ0FBQ0EsTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsV0FBV0EsQ0FBQ0EsT0FBT0EsQ0FBQ0EsU0FBU0EsQ0FBQ0EsRUFBRUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7SUFDbEVBLENBQUNBO0lBQ0ZYLFlBQUNBO0FBQURBLENBckdBLEFBcUdDQSxFQXJHbUIsZUFBZSxFQXFHbEM7QUFFRCxBQUFlLGlCQUFOLEtBQUssQ0FBQyIsImZpbGUiOiJjb250YWluZXJzL1NjZW5lLmpzIiwic291cmNlUm9vdCI6Ii4uLyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBFdmVudERpc3BhdGNoZXJcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1jb3JlL2xpYi9ldmVudHMvRXZlbnREaXNwYXRjaGVyXCIpO1xuXG5pbXBvcnQgRGlzcGxheU9iamVjdFx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLWRpc3BsYXkvbGliL2Jhc2UvRGlzcGxheU9iamVjdFwiKTtcbmltcG9ydCBEaXNwbGF5T2JqZWN0Q29udGFpbmVyXHRcdD0gcmVxdWlyZShcImF3YXlqcy1kaXNwbGF5L2xpYi9jb250YWluZXJzL0Rpc3BsYXlPYmplY3RDb250YWluZXJcIik7XG5pbXBvcnQgU2NlbmVFdmVudFx0XHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtZGlzcGxheS9saWIvZXZlbnRzL1NjZW5lRXZlbnRcIik7XG5pbXBvcnQgTm9kZUJhc2VcdFx0XHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtZGlzcGxheS9saWIvcGFydGl0aW9uL05vZGVCYXNlXCIpO1xuaW1wb3J0IFBhcnRpdGlvblx0XHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtZGlzcGxheS9saWIvcGFydGl0aW9uL1BhcnRpdGlvblwiKTtcbmltcG9ydCBDb2xsZWN0b3JCYXNlXHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtZGlzcGxheS9saWIvdHJhdmVyc2UvQ29sbGVjdG9yQmFzZVwiKTtcblxuY2xhc3MgU2NlbmUgZXh0ZW5kcyBFdmVudERpc3BhdGNoZXJcbntcblx0cHJpdmF0ZSBfZXhwYW5kZWRQYXJ0aXRpb25zOkFycmF5PFBhcnRpdGlvbj4gPSBuZXcgQXJyYXk8UGFydGl0aW9uPigpO1xuXHRwcml2YXRlIF9wYXJ0aXRpb25zOkFycmF5PFBhcnRpdGlvbj4gPSBuZXcgQXJyYXk8UGFydGl0aW9uPigpO1xuXHRwcml2YXRlIF9wYXJ0aXRpb246UGFydGl0aW9uO1xuXG5cdHB1YmxpYyBfaVNjZW5lR3JhcGhSb290OkRpc3BsYXlPYmplY3RDb250YWluZXI7XG5cdHB1YmxpYyBfaUNvbGxlY3Rpb25NYXJrID0gMDtcblxuXHRjb25zdHJ1Y3RvcigpXG5cdHtcblx0XHRzdXBlcigpO1xuXG5cdFx0dGhpcy5fcGFydGl0aW9uID0gbmV3IFBhcnRpdGlvbihuZXcgTm9kZUJhc2UoKSk7XG5cblx0XHR0aGlzLl9pU2NlbmVHcmFwaFJvb3QgPSBuZXcgRGlzcGxheU9iamVjdENvbnRhaW5lcigpO1xuXG5cdFx0dGhpcy5faVNjZW5lR3JhcGhSb290Ll9pU2V0U2NlbmUodGhpcyk7XG5cdFx0dGhpcy5faVNjZW5lR3JhcGhSb290Ll9pSXNSb290ID0gdHJ1ZTtcblx0XHR0aGlzLl9pU2NlbmVHcmFwaFJvb3QucGFydGl0aW9uID0gdGhpcy5fcGFydGl0aW9uO1xuXHR9XG5cblx0cHVibGljIHRyYXZlcnNlUGFydGl0aW9ucyh0cmF2ZXJzZXI6Q29sbGVjdG9yQmFzZSlcblx0e1xuXHRcdHZhciBpOm51bWJlciA9IDA7XG5cdFx0dmFyIGxlbjpudW1iZXIgPSB0aGlzLl9wYXJ0aXRpb25zLmxlbmd0aDtcblxuXHRcdHRyYXZlcnNlci5zY2VuZSA9IHRoaXM7XG5cblx0XHR0aGlzLl9pQ29sbGVjdGlvbk1hcmsrKztcblxuXHRcdHdoaWxlIChpIDwgbGVuKVxuXHRcdFx0dGhpcy5fcGFydGl0aW9uc1tpKytdLnRyYXZlcnNlKHRyYXZlcnNlcik7XG5cdH1cblxuXHRwdWJsaWMgZ2V0IHBhcnRpdGlvbigpOlBhcnRpdGlvblxuXHR7XG5cdFx0cmV0dXJuIHRoaXMuX2lTY2VuZUdyYXBoUm9vdC5wYXJ0aXRpb247XG5cdH1cblxuXHRwdWJsaWMgc2V0IHBhcnRpdGlvbih2YWx1ZTpQYXJ0aXRpb24pXG5cdHtcblx0XHR0aGlzLl9pU2NlbmVHcmFwaFJvb3QucGFydGl0aW9uID0gdmFsdWU7XG5cblx0XHR0aGlzLmRpc3BhdGNoRXZlbnQobmV3IFNjZW5lRXZlbnQoU2NlbmVFdmVudC5QQVJUSVRJT05fQ0hBTkdFRCwgdGhpcy5faVNjZW5lR3JhcGhSb290KSk7XG5cdH1cblxuXHRwdWJsaWMgY29udGFpbnMoY2hpbGQ6RGlzcGxheU9iamVjdCk6Ym9vbGVhblxuXHR7XG5cdFx0cmV0dXJuIHRoaXMuX2lTY2VuZUdyYXBoUm9vdC5jb250YWlucyhjaGlsZCk7XG5cdH1cblxuXHRwdWJsaWMgYWRkQ2hpbGQoY2hpbGQ6RGlzcGxheU9iamVjdCk6RGlzcGxheU9iamVjdFxuXHR7XG5cdFx0cmV0dXJuIHRoaXMuX2lTY2VuZUdyYXBoUm9vdC5hZGRDaGlsZChjaGlsZCk7XG5cdH1cblxuXHRwdWJsaWMgcmVtb3ZlQ2hpbGQoY2hpbGQ6RGlzcGxheU9iamVjdClcblx0e1xuXHRcdHRoaXMuX2lTY2VuZUdyYXBoUm9vdC5yZW1vdmVDaGlsZChjaGlsZCk7XG5cdH1cblxuXHRwdWJsaWMgcmVtb3ZlQ2hpbGRBdChpbmRleDpudW1iZXIpXG5cdHtcblx0XHR0aGlzLl9pU2NlbmVHcmFwaFJvb3QucmVtb3ZlQ2hpbGRBdChpbmRleCk7XG5cdH1cblxuXG5cdHB1YmxpYyBnZXRDaGlsZEF0KGluZGV4Om51bWJlcik6RGlzcGxheU9iamVjdFxuXHR7XG5cdFx0cmV0dXJuIHRoaXMuX2lTY2VuZUdyYXBoUm9vdC5nZXRDaGlsZEF0KGluZGV4KTtcblx0fVxuXG5cdHB1YmxpYyBnZXQgbnVtQ2hpbGRyZW4oKTpudW1iZXJcblx0e1xuXHRcdHJldHVybiB0aGlzLl9pU2NlbmVHcmFwaFJvb3QubnVtQ2hpbGRyZW47XG5cdH1cblxuXHQvKipcblx0ICogQGludGVybmFsXG5cdCAqL1xuXHRwdWJsaWMgX2lSZWdpc3RlclBhcnRpdGlvbihwYXJ0aXRpb246UGFydGl0aW9uKVxuXHR7XG5cdFx0dGhpcy5fZXhwYW5kZWRQYXJ0aXRpb25zLnB1c2gocGFydGl0aW9uKTtcblxuXHRcdC8vZW5zdXJlIGR1cGxpY2F0ZXMgYXJlIG5vdCBmb3VuZCBpbiBwYXJ0aXRpb25zIGFycmF5XG5cdFx0aWYgKHRoaXMuX3BhcnRpdGlvbnMuaW5kZXhPZihwYXJ0aXRpb24pID09IC0xKVxuXHRcdFx0dGhpcy5fcGFydGl0aW9ucy5wdXNoKHBhcnRpdGlvbik7XG5cdH1cblxuXHQvKipcblx0ICogQGludGVybmFsXG5cdCAqL1xuXHRwdWJsaWMgX2lVbnJlZ2lzdGVyUGFydGl0aW9uKHBhcnRpdGlvbjpQYXJ0aXRpb24pXG5cdHtcblx0XHR0aGlzLl9leHBhbmRlZFBhcnRpdGlvbnMuc3BsaWNlKHRoaXMuX2V4cGFuZGVkUGFydGl0aW9ucy5pbmRleE9mKHBhcnRpdGlvbiksIDEpO1xuXG5cdFx0Ly9pZiBubyBtb3JlIHBhcnRpdGlvbiByZWZlcmVuY2VzIGZvdW5kLCByZW1vdmUgZnJvbSBwYXJ0aXRpb25zIGFycmF5XG5cdFx0aWYgKHRoaXMuX2V4cGFuZGVkUGFydGl0aW9ucy5pbmRleE9mKHBhcnRpdGlvbikgPT0gLTEpXG5cdFx0XHR0aGlzLl9wYXJ0aXRpb25zLnNwbGljZSh0aGlzLl9wYXJ0aXRpb25zLmluZGV4T2YocGFydGl0aW9uKSwgMSk7XG5cdH1cbn1cblxuZXhwb3J0ID0gU2NlbmU7Il19