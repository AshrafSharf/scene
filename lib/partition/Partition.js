var CameraNode = require("awayjs-display/lib/partition/CameraNode");
var DirectionalLightNode = require("awayjs-display/lib/partition/DirectionalLightNode");
var EntityNode = require("awayjs-display/lib/partition/EntityNode");
var LightProbeNode = require("awayjs-display/lib/partition/LightProbeNode");
var PointLightNode = require("awayjs-display/lib/partition/PointLightNode");
var SkyboxNode = require("awayjs-display/lib/partition/SkyboxNode");
var NullNode = require("awayjs-display/lib/partition/NullNode");
var EntityNodePool = require("awayjs-display/lib/pool/EntityNodePool");
/**
 * @class away.partition.Partition
 */
var Partition = (function () {
    function Partition(rootNode) {
        this._updatesMade = false;
        this._rootNode = rootNode || new NullNode();
        this._cameraNodePool = new EntityNodePool(CameraNode, this);
        this._directionalLightNodePool = new EntityNodePool(DirectionalLightNode, this);
        this._entityNodePool = new EntityNodePool(EntityNode, this);
        this._lightProbeNodePool = new EntityNodePool(LightProbeNode, this);
        this._pointLightNodePool = new EntityNodePool(PointLightNode, this);
        this._skyboxNodePool = new EntityNodePool(SkyboxNode, this);
    }
    Object.defineProperty(Partition.prototype, "rootNode", {
        get: function () {
            return this._rootNode;
        },
        enumerable: true,
        configurable: true
    });
    Partition.prototype.traverse = function (traverser) {
        if (this._updatesMade)
            this.updateEntities();
        this._rootNode.acceptTraverser(traverser);
    };
    Partition.prototype.iMarkForUpdate = function (node) {
        var t = this._updateQueue;
        while (t) {
            if (node == t)
                return;
            t = t._iUpdateQueueNext;
        }
        node._iUpdateQueueNext = this._updateQueue;
        this._updateQueue = node;
        this._updatesMade = true;
    };
    Partition.prototype.iRemoveEntity = function (node) {
        var t;
        node.removeFromParent();
        if (node == this._updateQueue) {
            this._updateQueue = node._iUpdateQueueNext;
        }
        else {
            t = this._updateQueue;
            while (t && t._iUpdateQueueNext != node)
                t = t._iUpdateQueueNext;
            if (t)
                t._iUpdateQueueNext = node._iUpdateQueueNext;
        }
        node._iUpdateQueueNext = null;
        if (!this._updateQueue)
            this._updatesMade = false;
    };
    Partition.prototype.updateEntities = function () {
        var node = this._updateQueue;
        var targetNode;
        var t;
        this._updateQueue = null;
        this._updatesMade = false;
        do {
            targetNode = this._rootNode.findPartitionForEntity(node.entity);
            if (node.parent != targetNode) {
                if (node)
                    node.removeFromParent();
                targetNode.iAddNode(node);
            }
            t = node._iUpdateQueueNext;
            node._iUpdateQueueNext = null;
            //required for controllers with autoUpdate set to true
            node.entity._iInternalUpdate();
        } while ((node = t) != null);
    };
    /**
     * @internal
     */
    Partition.prototype._iRegisterCamera = function (camera) {
        this.iMarkForUpdate(this._cameraNodePool.getItem(camera));
    };
    /**
     * @internal
     */
    Partition.prototype._iRegisterDirectionalLight = function (directionalLight) {
        this.iMarkForUpdate(this._directionalLightNodePool.getItem(directionalLight));
    };
    /**
     * @internal
     */
    Partition.prototype._iRegisterEntity = function (entity) {
        this.iMarkForUpdate(this._entityNodePool.getItem(entity));
    };
    /**
     * @internal
     */
    Partition.prototype._iRegisterLightProbe = function (lightProbe) {
        this.iMarkForUpdate(this._lightProbeNodePool.getItem(lightProbe));
    };
    /**
     * @internal
     */
    Partition.prototype._iRegisterPointLight = function (pointLight) {
        this.iMarkForUpdate(this._pointLightNodePool.getItem(pointLight));
    };
    /**
     * @internal
     */
    Partition.prototype._iRegisterSkybox = function (skybox) {
        this.iMarkForUpdate(this._skyboxNodePool.getItem(skybox));
    };
    /**
     * @internal
     */
    Partition.prototype._iUnregisterCamera = function (camera) {
        this.iRemoveEntity(this._cameraNodePool.disposeItem(camera));
    };
    /**
     * @internal
     */
    Partition.prototype._iUnregisterDirectionalLight = function (directionalLight) {
        this.iRemoveEntity(this._directionalLightNodePool.disposeItem(directionalLight));
    };
    /**
     * @internal
     */
    Partition.prototype._iUnregisterEntity = function (entity) {
        this.iRemoveEntity(this._entityNodePool.disposeItem(entity));
    };
    /**
     * @internal
     */
    Partition.prototype._iUnregisterLightProbe = function (lightProbe) {
        this.iRemoveEntity(this._lightProbeNodePool.disposeItem(lightProbe));
    };
    /**
     * @internal
     */
    Partition.prototype._iUnregisterPointLight = function (pointLight) {
        this.iRemoveEntity(this._pointLightNodePool.disposeItem(pointLight));
    };
    /**
     * @internal
     */
    Partition.prototype._iUnregisterSkybox = function (skybox) {
        this.iRemoveEntity(this._skyboxNodePool.disposeItem(skybox));
    };
    return Partition;
})();
module.exports = Partition;

//# sourceMappingURL=data:application/json;base64,