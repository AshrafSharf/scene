var NullNode = require("awayjs-display/lib/partition/NullNode");
/**
 * @class away.partition.Partition
 */
var Partition = (function () {
    function Partition(rootNode) {
        this._updatesMade = false;
        this._rootNode = rootNode || new NullNode();
    }
    Object.defineProperty(Partition.prototype, "rootNode", {
        get: function () {
            return this._rootNode;
        },
        enumerable: true,
        configurable: true
    });
    Partition.prototype.traverse = function (traverser) {
        if (this._updatesMade)
            this.updateEntities();
        this._rootNode.acceptTraverser(traverser);
    };
    Partition.prototype.iMarkForUpdate = function (entity) {
        var node = entity.partitionNode;
        var t = this._updateQueue;
        while (t) {
            if (node == t)
                return;
            t = t._iUpdateQueueNext;
        }
        node._iUpdateQueueNext = this._updateQueue;
        this._updateQueue = node;
        this._updatesMade = true;
    };
    Partition.prototype.iRemoveEntity = function (entity) {
        var node = entity.partitionNode;
        var t;
        node.removeFromParent();
        if (node == this._updateQueue) {
            this._updateQueue = node._iUpdateQueueNext;
        }
        else {
            t = this._updateQueue;
            while (t && t._iUpdateQueueNext != node)
                t = t._iUpdateQueueNext;
            if (t)
                t._iUpdateQueueNext = node._iUpdateQueueNext;
        }
        node._iUpdateQueueNext = null;
        if (!this._updateQueue)
            this._updatesMade = false;
    };
    Partition.prototype.updateEntities = function () {
        var node = this._updateQueue;
        var targetNode;
        var t;
        this._updateQueue = null;
        this._updatesMade = false;
        do {
            targetNode = this._rootNode.findPartitionForEntity(node.entity);
            if (node.parent != targetNode) {
                if (node)
                    node.removeFromParent();
                targetNode.iAddNode(node);
            }
            t = node._iUpdateQueueNext;
            node._iUpdateQueueNext = null;
            //required for controllers with autoUpdate set to true
            node.entity._iInternalUpdate();
        } while ((node = t) != null);
    };
    return Partition;
})();
module.exports = Partition;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImF3YXlqcy1kaXNwbGF5L2xpYi9wYXJ0aXRpb24vUGFydGl0aW9uLnRzIl0sIm5hbWVzIjpbIlBhcnRpdGlvbiIsIlBhcnRpdGlvbi5jb25zdHJ1Y3RvciIsIlBhcnRpdGlvbi5yb290Tm9kZSIsIlBhcnRpdGlvbi50cmF2ZXJzZSIsIlBhcnRpdGlvbi5pTWFya0ZvclVwZGF0ZSIsIlBhcnRpdGlvbi5pUmVtb3ZlRW50aXR5IiwiUGFydGl0aW9uLnVwZGF0ZUVudGl0aWVzIl0sIm1hcHBpbmdzIjoiQUFHQSxJQUFPLFFBQVEsV0FBZ0IsdUNBQXVDLENBQUMsQ0FBQztBQUd4RSxBQUdBOztHQURHO0lBQ0csU0FBUztJQU9kQSxTQVBLQSxTQUFTQSxDQU9GQSxRQUFpQkE7UUFIckJDLGlCQUFZQSxHQUFXQSxLQUFLQSxDQUFDQTtRQUtwQ0EsSUFBSUEsQ0FBQ0EsU0FBU0EsR0FBR0EsUUFBUUEsSUFBZUEsSUFBSUEsUUFBUUEsRUFBRUEsQ0FBQ0E7SUFDeERBLENBQUNBO0lBRURELHNCQUFXQSwrQkFBUUE7YUFBbkJBO1lBRUNFLE1BQU1BLENBQUNBLElBQUlBLENBQUNBLFNBQVNBLENBQUNBO1FBQ3ZCQSxDQUFDQTs7O09BQUFGO0lBRU1BLDRCQUFRQSxHQUFmQSxVQUFnQkEsU0FBb0JBO1FBRW5DRyxFQUFFQSxDQUFDQSxDQUFDQSxJQUFJQSxDQUFDQSxZQUFZQSxDQUFDQTtZQUNyQkEsSUFBSUEsQ0FBQ0EsY0FBY0EsRUFBRUEsQ0FBQ0E7UUFFdkJBLElBQUlBLENBQUNBLFNBQVNBLENBQUNBLGVBQWVBLENBQUNBLFNBQVNBLENBQUNBLENBQUNBO0lBQzNDQSxDQUFDQTtJQUVNSCxrQ0FBY0EsR0FBckJBLFVBQXNCQSxNQUFvQkE7UUFFekNJLElBQUlBLElBQUlBLEdBQWNBLE1BQU1BLENBQUNBLGFBQWFBLENBQUNBO1FBQzNDQSxJQUFJQSxDQUFDQSxHQUFjQSxJQUFJQSxDQUFDQSxZQUFZQSxDQUFDQTtRQUVyQ0EsT0FBT0EsQ0FBQ0EsRUFBRUEsQ0FB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LElBQUE7QUFFRCxBQUFtQixpQkFBVixTQUFTLENBQUMiLCJmaWxlIjoicGFydGl0aW9uL1BhcnRpdGlvbi5qcyIsInNvdXJjZVJvb3QiOiIuLi8iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgRGlzcGxheU9iamVjdFx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLWRpc3BsYXkvbGliL2Jhc2UvRGlzcGxheU9iamVjdFwiKTtcclxuaW1wb3J0IEVudGl0eU5vZGVcdFx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLWRpc3BsYXkvbGliL3BhcnRpdGlvbi9FbnRpdHlOb2RlXCIpO1xyXG5pbXBvcnQgTm9kZUJhc2VcdFx0XHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtZGlzcGxheS9saWIvcGFydGl0aW9uL05vZGVCYXNlXCIpO1xyXG5pbXBvcnQgTnVsbE5vZGVcdFx0XHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtZGlzcGxheS9saWIvcGFydGl0aW9uL051bGxOb2RlXCIpO1xyXG5pbXBvcnQgSUNvbGxlY3Rvclx0XHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtZGlzcGxheS9saWIvdHJhdmVyc2UvSUNvbGxlY3RvclwiKTtcclxuXHJcbi8qKlxyXG4gKiBAY2xhc3MgYXdheS5wYXJ0aXRpb24uUGFydGl0aW9uXHJcbiAqL1xyXG5jbGFzcyBQYXJ0aXRpb25cclxue1xyXG5cclxuXHRwdWJsaWMgX3Jvb3ROb2RlOk5vZGVCYXNlO1xyXG5cdHByaXZhdGUgX3VwZGF0ZXNNYWRlOkJvb2xlYW4gPSBmYWxzZTtcclxuXHRwcml2YXRlIF91cGRhdGVRdWV1ZTpFbnRpdHlOb2RlO1xyXG5cclxuXHRjb25zdHJ1Y3Rvcihyb290Tm9kZTpOb2RlQmFzZSlcclxuXHR7XHJcblx0XHR0aGlzLl9yb290Tm9kZSA9IHJvb3ROb2RlIHx8IDxOb2RlQmFzZT4gbmV3IE51bGxOb2RlKCk7XHJcblx0fVxyXG5cclxuXHRwdWJsaWMgZ2V0IHJvb3ROb2RlKCk6Tm9kZUJhc2VcclxuXHR7XHJcblx0XHRyZXR1cm4gdGhpcy5fcm9vdE5vZGU7XHJcblx0fVxyXG5cclxuXHRwdWJsaWMgdHJhdmVyc2UodHJhdmVyc2VyOklDb2xsZWN0b3IpXHJcblx0e1xyXG5cdFx0aWYgKHRoaXMuX3VwZGF0ZXNNYWRlKVxyXG5cdFx0XHR0aGlzLnVwZGF0ZUVudGl0aWVzKCk7XHJcblxyXG5cdFx0dGhpcy5fcm9vdE5vZGUuYWNjZXB0VHJhdmVyc2VyKHRyYXZlcnNlcik7XHJcblx0fVxyXG5cclxuXHRwdWJsaWMgaU1hcmtGb3JVcGRhdGUoZW50aXR5OkRpc3BsYXlPYmplY3QpXHJcblx0e1xyXG5cdFx0dmFyIG5vZGU6RW50aXR5Tm9kZSA9IGVudGl0eS5wYXJ0aXRpb25Ob2RlO1xyXG5cdFx0dmFyIHQ6RW50aXR5Tm9kZSA9IHRoaXMuX3VwZGF0ZVF1ZXVlO1xyXG5cclxuXHRcdHdoaWxlICh0KSB7XHJcblx0XHRcdGlmIChub2RlID09IHQpXHJcblx0XHRcdFx0cmV0dXJuO1xyXG5cclxuXHRcdFx0dCA9IHQuX2lVcGRhdGVRdWV1ZU5leHQ7XHJcblx0XHR9XHJcblxyXG5cdFx0bm9kZS5faVVwZGF0ZVF1ZXVlTmV4dCA9IHRoaXMuX3VwZGF0ZVF1ZXVlO1xyXG5cclxuXHRcdHRoaXMuX3VwZGF0ZVF1ZXVlID0gbm9kZTtcclxuXHRcdHRoaXMuX3VwZGF0ZXNNYWRlID0gdHJ1ZTtcclxuXHR9XHJcblxyXG5cdHB1YmxpYyBpUmVtb3ZlRW50aXR5KGVudGl0eTpEaXNwbGF5T2JqZWN0KVxyXG5cdHtcclxuXHRcdHZhciBub2RlOkVudGl0eU5vZGUgPSBlbnRpdHkucGFydGl0aW9uTm9kZTtcclxuXHRcdHZhciB0OkVudGl0eU5vZGU7XHJcblxyXG5cdFx0bm9kZS5yZW1vdmVGcm9tUGFyZW50KCk7XHJcblxyXG5cdFx0aWYgKG5vZGUgPT0gdGhpcy5fdXBkYXRlUXVldWUpIHtcclxuXHRcdFx0dGhpcy5fdXBkYXRlUXVldWUgPSBub2RlLl9pVXBkYXRlUXVldWVOZXh0O1xyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0dCA9IHRoaXMuX3VwZGF0ZVF1ZXVlO1xyXG5cdFx0XHR3aGlsZSAodCAmJiB0Ll9pVXBkYXRlUXVldWVOZXh0ICE9IG5vZGUpXHJcblx0XHRcdFx0dCA9IHQuX2lVcGRhdGVRdWV1ZU5leHQ7XHJcblxyXG5cdFx0XHRpZiAodClcclxuXHRcdFx0XHR0Ll9pVXBkYXRlUXVldWVOZXh0ID0gbm9kZS5faVVwZGF0ZVF1ZXVlTmV4dDtcclxuXHRcdH1cclxuXHJcblx0XHRub2RlLl9pVXBkYXRlUXVldWVOZXh0ID0gbnVsbDtcclxuXHJcblx0XHRpZiAoIXRoaXMuX3VwZGF0ZVF1ZXVlKVxyXG5cdFx0XHR0aGlzLl91cGRhdGVzTWFkZSA9IGZhbHNlO1xyXG5cdH1cclxuXHJcblx0cHJpdmF0ZSB1cGRhdGVFbnRpdGllcygpXHJcblx0e1xyXG5cdFx0dmFyIG5vZGU6RW50aXR5Tm9kZSA9IHRoaXMuX3VwZGF0ZVF1ZXVlO1xyXG5cdFx0dmFyIHRhcmdldE5vZGU6Tm9kZUJhc2U7XHJcblx0XHR2YXIgdDpFbnRpdHlOb2RlO1xyXG5cdFx0dGhpcy5fdXBkYXRlUXVldWUgPSBudWxsO1xyXG5cdFx0dGhpcy5fdXBkYXRlc01hZGUgPSBmYWxzZTtcclxuXHJcblx0XHRkbyB7XHJcblx0XHRcdHRhcmdldE5vZGUgPSB0aGlzLl9yb290Tm9kZS5maW5kUGFydGl0aW9uRm9yRW50aXR5KG5vZGUuZW50aXR5KTtcclxuXHJcblx0XHRcdGlmIChub2RlLnBhcmVudCAhPSB0YXJnZXROb2RlKSB7XHJcblx0XHRcdFx0aWYgKG5vZGUpXHJcblx0XHRcdFx0XHRub2RlLnJlbW92ZUZyb21QYXJlbnQoKTtcclxuXHJcblx0XHRcdFx0dGFyZ2V0Tm9kZS5pQWRkTm9kZShub2RlKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0dCA9IG5vZGUuX2lVcGRhdGVRdWV1ZU5leHQ7XHJcblx0XHRcdG5vZGUuX2lVcGRhdGVRdWV1ZU5leHQgPSBudWxsO1xyXG5cclxuXHRcdFx0Ly9yZXF1aXJlZCBmb3IgY29udHJvbGxlcnMgd2l0aCBhdXRvVXBkYXRlIHNldCB0byB0cnVlXHJcblx0XHRcdG5vZGUuZW50aXR5Ll9pSW50ZXJuYWxVcGRhdGUoKTtcclxuXHJcblx0XHR9IHdoaWxlICgobm9kZSA9IHQpICE9IG51bGwpO1xyXG5cdH1cclxufVxyXG5cclxuZXhwb3J0ID0gUGFydGl0aW9uOyJdfQ==