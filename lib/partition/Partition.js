var CameraNode = require("awayjs-display/lib/partition/CameraNode");
var DirectionalLightNode = require("awayjs-display/lib/partition/DirectionalLightNode");
var EntityNode = require("awayjs-display/lib/partition/EntityNode");
var LightProbeNode = require("awayjs-display/lib/partition/LightProbeNode");
var PointLightNode = require("awayjs-display/lib/partition/PointLightNode");
var SkyboxNode = require("awayjs-display/lib/partition/SkyboxNode");
var NullNode = require("awayjs-display/lib/partition/NullNode");
var EntityNodePool = require("awayjs-display/lib/pool/EntityNodePool");
/**
 * @class away.partition.Partition
 */
var Partition = (function () {
    function Partition(rootNode) {
        this._updatesMade = false;
        this._rootNode = rootNode || new NullNode();
        this._cameraNodePool = new EntityNodePool(CameraNode, this);
        this._directionalLightNodePool = new EntityNodePool(DirectionalLightNode, this);
        this._entityNodePool = new EntityNodePool(EntityNode, this);
        this._lightProbeNodePool = new EntityNodePool(LightProbeNode, this);
        this._pointLightNodePool = new EntityNodePool(PointLightNode, this);
        this._skyboxNodePool = new EntityNodePool(SkyboxNode, this);
    }
    Object.defineProperty(Partition.prototype, "rootNode", {
        get: function () {
            return this._rootNode;
        },
        enumerable: true,
        configurable: true
    });
    Partition.prototype.traverse = function (traverser) {
        if (this._updatesMade)
            this.updateEntities();
        this._rootNode.acceptTraverser(traverser);
    };
    Partition.prototype.iMarkForUpdate = function (node) {
        var t = this._updateQueue;
        while (t) {
            if (node == t)
                return;
            t = t._iUpdateQueueNext;
        }
        node._iUpdateQueueNext = this._updateQueue;
        this._updateQueue = node;
        this._updatesMade = true;
    };
    Partition.prototype.iRemoveEntity = function (node) {
        var t;
        node.removeFromParent();
        if (node == this._updateQueue) {
            this._updateQueue = node._iUpdateQueueNext;
        }
        else {
            t = this._updateQueue;
            while (t && t._iUpdateQueueNext != node)
                t = t._iUpdateQueueNext;
            if (t)
                t._iUpdateQueueNext = node._iUpdateQueueNext;
        }
        node._iUpdateQueueNext = null;
        if (!this._updateQueue)
            this._updatesMade = false;
    };
    Partition.prototype.updateEntities = function () {
        var node = this._updateQueue;
        var targetNode;
        var t;
        this._updateQueue = null;
        this._updatesMade = false;
        do {
            targetNode = this._rootNode.findPartitionForEntity(node.entity);
            if (node.parent != targetNode) {
                if (node)
                    node.removeFromParent();
                targetNode.iAddNode(node);
            }
            t = node._iUpdateQueueNext;
            node._iUpdateQueueNext = null;
            //required for controllers with autoUpdate set to true
            node.entity._iInternalUpdate();
        } while ((node = t) != null);
    };
    /**
     * @internal
     */
    Partition.prototype._iRegisterCamera = function (camera) {
        this.iMarkForUpdate(this._cameraNodePool.getItem(camera));
    };
    /**
     * @internal
     */
    Partition.prototype._iRegisterDirectionalLight = function (directionalLight) {
        this.iMarkForUpdate(this._directionalLightNodePool.getItem(directionalLight));
    };
    /**
     * @internal
     */
    Partition.prototype._iRegisterEntity = function (entity) {
        this.iMarkForUpdate(this._entityNodePool.getItem(entity));
    };
    /**
     * @internal
     */
    Partition.prototype._iRegisterLightProbe = function (lightProbe) {
        this.iMarkForUpdate(this._lightProbeNodePool.getItem(lightProbe));
    };
    /**
     * @internal
     */
    Partition.prototype._iRegisterPointLight = function (pointLight) {
        this.iMarkForUpdate(this._pointLightNodePool.getItem(pointLight));
    };
    /**
     * @internal
     */
    Partition.prototype._iRegisterSkybox = function (skybox) {
        this.iMarkForUpdate(this._skyboxNodePool.getItem(skybox));
    };
    /**
     * @internal
     */
    Partition.prototype._iUnregisterCamera = function (camera) {
        this.iRemoveEntity(this._cameraNodePool.disposeItem(camera));
    };
    /**
     * @internal
     */
    Partition.prototype._iUnregisterDirectionalLight = function (directionalLight) {
        this.iRemoveEntity(this._directionalLightNodePool.disposeItem(directionalLight));
    };
    /**
     * @internal
     */
    Partition.prototype._iUnregisterEntity = function (entity) {
        this.iRemoveEntity(this._entityNodePool.disposeItem(entity));
    };
    /**
     * @internal
     */
    Partition.prototype._iUnregisterLightProbe = function (lightProbe) {
        this.iRemoveEntity(this._lightProbeNodePool.disposeItem(lightProbe));
    };
    /**
     * @internal
     */
    Partition.prototype._iUnregisterPointLight = function (pointLight) {
        this.iRemoveEntity(this._pointLightNodePool.disposeItem(pointLight));
    };
    /**
     * @internal
     */
    Partition.prototype._iUnregisterSkybox = function (skybox) {
        this.iRemoveEntity(this._skyboxNodePool.disposeItem(skybox));
    };
    return Partition;
})();
module.exports = Partition;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImF3YXlqcy1kaXNwbGF5L2xpYi9wYXJ0aXRpb24vcGFydGl0aW9uLnRzIl0sIm5hbWVzIjpbIlBhcnRpdGlvbiIsIlBhcnRpdGlvbi5jb25zdHJ1Y3RvciIsIlBhcnRpdGlvbi5yb290Tm9kZSIsIlBhcnRpdGlvbi50cmF2ZXJzZSIsIlBhcnRpdGlvbi5pTWFya0ZvclVwZGF0ZSIsIlBhcnRpdGlvbi5pUmVtb3ZlRW50aXR5IiwiUGFydGl0aW9uLnVwZGF0ZUVudGl0aWVzIiwiUGFydGl0aW9uLl9pUmVnaXN0ZXJDYW1lcmEiLCJQYXJ0aXRpb24uX2lSZWdpc3RlckRpcmVjdGlvbmFsTGlnaHQiLCJQYXJ0aXRpb24uX2lSZWdpc3RlckVudGl0eSIsIlBhcnRpdGlvbi5faVJlZ2lzdGVyTGlnaHRQcm9iZSIsIlBhcnRpdGlvbi5faVJlZ2lzdGVyUG9pbnRMaWdodCIsIlBhcnRpdGlvbi5faVJlZ2lzdGVyU2t5Ym94IiwiUGFydGl0aW9uLl9pVW5yZWdpc3RlckNhbWVyYSIsIlBhcnRpdGlvbi5faVVucmVnaXN0ZXJEaXJlY3Rpb25hbExpZ2h0IiwiUGFydGl0aW9uLl9pVW5yZWdpc3RlckVudGl0eSIsIlBhcnRpdGlvbi5faVVucmVnaXN0ZXJMaWdodFByb2JlIiwiUGFydGl0aW9uLl9pVW5yZWdpc3RlclBvaW50TGlnaHQiLCJQYXJ0aXRpb24uX2lVbnJlZ2lzdGVyU2t5Ym94Il0sIm1hcHBpbmdzIjoiQUFNQSxJQUFPLFVBQVUsV0FBZSx5Q0FBeUMsQ0FBQyxDQUFDO0FBQzNFLElBQU8sb0JBQW9CLFdBQWEsbURBQW1ELENBQUMsQ0FBQztBQUM3RixJQUFPLFVBQVUsV0FBZSx5Q0FBeUMsQ0FBQyxDQUFDO0FBQzNFLElBQU8sY0FBYyxXQUFjLDZDQUE2QyxDQUFDLENBQUM7QUFDbEYsSUFBTyxjQUFjLFdBQWMsNkNBQTZDLENBQUMsQ0FBQztBQUNsRixJQUFPLFVBQVUsV0FBZSx5Q0FBeUMsQ0FBQyxDQUFDO0FBRTNFLElBQU8sUUFBUSxXQUFnQix1Q0FB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Q0E7SUFFRGpCOztPQUVHQTtJQUNJQSxzQ0FBa0JBLEdBQXpCQSxVQUEwQkEsTUFBYUE7UUFFdENrQixJQUFJQSxDQUFDQSxhQUFhQSxDQUFDQSxJQUFJQSxDQUFDQSxlQUFlQSxDQUFDQSxXQUFXQSxDQUFDQSxNQUFNQSxDQUFDQSxDQUFDQSxDQUFDQTtJQUM5REEsQ0FBQ0E7SUFDRmxCLGdCQUFDQTtBQUFEQSxDQXpNQSxBQXlNQ0EsSUFBQTtBQUVELEFBQW1CLGlCQUFWLFNBQVMsQ0FBQyIsImZpbGUiOiJwYXJ0aXRpb24vUGFydGl0aW9uLmpzIiwic291cmNlUm9vdCI6Ii4uLyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBDYW1lcmFcdFx0XHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtZGlzcGxheS9saWIvZW50aXRpZXMvQ2FtZXJhXCIpO1xuaW1wb3J0IERpcmVjdGlvbmFsTGlnaHRcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1kaXNwbGF5L2xpYi9lbnRpdGllcy9EaXJlY3Rpb25hbExpZ2h0XCIpO1xuaW1wb3J0IElFbnRpdHlcdFx0XHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtZGlzcGxheS9saWIvZW50aXRpZXMvSUVudGl0eVwiKTtcbmltcG9ydCBMaWdodFByb2JlXHRcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1kaXNwbGF5L2xpYi9lbnRpdGllcy9MaWdodFByb2JlXCIpO1xuaW1wb3J0IFBvaW50TGlnaHRcdFx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLWRpc3BsYXkvbGliL2VudGl0aWVzL1BvaW50TGlnaHRcIik7XG5pbXBvcnQgU2t5Ym94XHRcdFx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLWRpc3BsYXkvbGliL2VudGl0aWVzL1NreWJveFwiKTtcbmltcG9ydCBDYW1lcmFOb2RlXHRcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1kaXNwbGF5L2xpYi9wYXJ0aXRpb24vQ2FtZXJhTm9kZVwiKTtcbmltcG9ydCBEaXJlY3Rpb25hbExpZ2h0Tm9kZVx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1kaXNwbGF5L2xpYi9wYXJ0aXRpb24vRGlyZWN0aW9uYWxMaWdodE5vZGVcIik7XG5pbXBvcnQgRW50aXR5Tm9kZVx0XHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtZGlzcGxheS9saWIvcGFydGl0aW9uL0VudGl0eU5vZGVcIik7XG5pbXBvcnQgTGlnaHRQcm9iZU5vZGVcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1kaXNwbGF5L2xpYi9wYXJ0aXRpb24vTGlnaHRQcm9iZU5vZGVcIik7XG5pbXBvcnQgUG9pbnRMaWdodE5vZGVcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1kaXNwbGF5L2xpYi9wYXJ0aXRpb24vUG9pbnRMaWdodE5vZGVcIik7XG5pbXBvcnQgU2t5Ym94Tm9kZVx0XHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtZGlzcGxheS9saWIvcGFydGl0aW9uL1NreWJveE5vZGVcIik7XG5pbXBvcnQgTm9kZUJhc2VcdFx0XHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtZGlzcGxheS9saWIvcGFydGl0aW9uL05vZGVCYXNlXCIpO1xuaW1wb3J0IE51bGxOb2RlXHRcdFx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLWRpc3BsYXkvbGliL3BhcnRpdGlvbi9OdWxsTm9kZVwiKTtcbmltcG9ydCBFbnRpdHlOb2RlUG9vbFx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLWRpc3BsYXkvbGliL3Bvb2wvRW50aXR5Tm9kZVBvb2xcIik7XG5pbXBvcnQgQ29sbGVjdG9yQmFzZVx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLWRpc3BsYXkvbGliL3RyYXZlcnNlL0NvbGxlY3RvckJhc2VcIik7XG5cbi8qKlxuICogQGNsYXNzIGF3YXkucGFydGl0aW9uLlBhcnRpdGlvblxuICovXG5jbGFzcyBQYXJ0aXRpb25cbntcblx0cHJpdmF0ZSBfY2FtZXJhTm9kZVBvb2w6RW50aXR5Tm9kZVBvb2w7XG5cdHByaXZhdGUgX2RpcmVjdGlvbmFsTGlnaHROb2RlUG9vbDpFbnRpdHlOb2RlUG9vbDtcblx0cHJpdmF0ZSBfZW50aXR5Tm9kZVBvb2w6RW50aXR5Tm9kZVBvb2w7XG5cdHByaXZhdGUgX2xpZ2h0UHJvYmVOb2RlUG9vbDpFbnRpdHlOb2RlUG9vbDtcblx0cHJpdmF0ZSBfcG9pbnRMaWdodE5vZGVQb29sOkVudGl0eU5vZGVQb29sO1xuXHRwcml2YXRlIF9za3lib3hOb2RlUG9vbDpFbnRpdHlOb2RlUG9vbDtcblxuXHRwdWJsaWMgX3Jvb3ROb2RlOk5vZGVCYXNlO1xuXHRwcml2YXRlIF91cGRhdGVzTWFkZTpCb29sZWFuID0gZmFsc2U7XG5cdHByaXZhdGUgX3VwZGF0ZVF1ZXVlOkVudGl0eU5vZGU7XG5cblx0Y29uc3RydWN0b3Iocm9vdE5vZGU6Tm9kZUJhc2UpXG5cdHtcblx0XHR0aGlzLl9yb290Tm9kZSA9IHJvb3ROb2RlIHx8IDxOb2RlQmFzZT4gbmV3IE51bGxOb2RlKCk7XG5cblx0XHR0aGlzLl9jYW1lcmFOb2RlUG9vbCA9IG5ldyBFbnRpdHlOb2RlUG9vbChDYW1lcmFOb2RlLCB0aGlzKTtcblx0XHR0aGlzLl9kaXJlY3Rpb25hbExpZ2h0Tm9kZVBvb2wgPSBuZXcgRW50aXR5Tm9kZVBvb2woRGlyZWN0aW9uYWxMaWdodE5vZGUsIHRoaXMpO1xuXHRcdHRoaXMuX2VudGl0eU5vZGVQb29sID0gbmV3IEVudGl0eU5vZGVQb29sKEVudGl0eU5vZGUsIHRoaXMpO1xuXHRcdHRoaXMuX2xpZ2h0UHJvYmVOb2RlUG9vbCA9IG5ldyBFbnRpdHlOb2RlUG9vbChMaWdodFByb2JlTm9kZSwgdGhpcyk7XG5cdFx0dGhpcy5fcG9pbnRMaWdodE5vZGVQb29sID0gbmV3IEVudGl0eU5vZGVQb29sKFBvaW50TGlnaHROb2RlLCB0aGlzKTtcblx0XHR0aGlzLl9za3lib3hOb2RlUG9vbCA9IG5ldyBFbnRpdHlOb2RlUG9vbChTa3lib3hOb2RlLCB0aGlzKTtcblx0fVxuXG5cdHB1YmxpYyBnZXQgcm9vdE5vZGUoKTpOb2RlQmFzZVxuXHR7XG5cdFx0cmV0dXJuIHRoaXMuX3Jvb3ROb2RlO1xuXHR9XG5cblx0cHVibGljIHRyYXZlcnNlKHRyYXZlcnNlcjpDb2xsZWN0b3JCYXNlKVxuXHR7XG5cdFx0aWYgKHRoaXMuX3VwZGF0ZXNNYWRlKVxuXHRcdFx0dGhpcy51cGRhdGVFbnRpdGllcygpO1xuXG5cdFx0dGhpcy5fcm9vdE5vZGUuYWNjZXB0VHJhdmVyc2VyKHRyYXZlcnNlcik7XG5cdH1cblxuXHRwdWJsaWMgaU1hcmtGb3JVcGRhdGUobm9kZTpFbnRpdHlOb2RlKVxuXHR7XG5cdFx0dmFyIHQ6RW50aXR5Tm9kZSA9IHRoaXMuX3VwZGF0ZVF1ZXVlO1xuXG5cdFx0d2hpbGUgKHQpIHtcblx0XHRcdGlmIChub2RlID09IHQpXG5cdFx0XHRcdHJldHVybjtcblxuXHRcdFx0dCA9IHQuX2lVcGRhdGVRdWV1ZU5leHQ7XG5cdFx0fVxuXG5cdFx0bm9kZS5faVVwZGF0ZVF1ZXVlTmV4dCA9IHRoaXMuX3VwZGF0ZVF1ZXVlO1xuXG5cdFx0dGhpcy5fdXBkYXRlUXVldWUgPSBub2RlO1xuXHRcdHRoaXMuX3VwZGF0ZXNNYWRlID0gdHJ1ZTtcblx0fVxuXG5cdHB1YmxpYyBpUmVtb3ZlRW50aXR5KG5vZGU6RW50aXR5Tm9kZSlcblx0e1xuXHRcdHZhciB0OkVudGl0eU5vZGU7XG5cblx0XHRub2RlLnJlbW92ZUZyb21QYXJlbnQoKTtcblxuXHRcdGlmIChub2RlID09IHRoaXMuX3VwZGF0ZVF1ZXVlKSB7XG5cdFx0XHR0aGlzLl91cGRhdGVRdWV1ZSA9IG5vZGUuX2lVcGRhdGVRdWV1ZU5leHQ7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHQgPSB0aGlzLl91cGRhdGVRdWV1ZTtcblx0XHRcdHdoaWxlICh0ICYmIHQuX2lVcGRhdGVRdWV1ZU5leHQgIT0gbm9kZSlcblx0XHRcdFx0dCA9IHQuX2lVcGRhdGVRdWV1ZU5leHQ7XG5cblx0XHRcdGlmICh0KVxuXHRcdFx0XHR0Ll9pVXBkYXRlUXVldWVOZXh0ID0gbm9kZS5faVVwZGF0ZVF1ZXVlTmV4dDtcblx0XHR9XG5cblx0XHRub2RlLl9pVXBkYXRlUXVldWVOZXh0ID0gbnVsbDtcblxuXHRcdGlmICghdGhpcy5fdXBkYXRlUXVldWUpXG5cdFx0XHR0aGlzLl91cGRhdGVzTWFkZSA9IGZhbHNlO1xuXHR9XG5cblx0cHJpdmF0ZSB1cGRhdGVFbnRpdGllcygpXG5cdHtcblx0XHR2YXIgbm9kZTpFbnRpdHlOb2RlID0gdGhpcy5fdXBkYXRlUXVldWU7XG5cdFx0dmFyIHRhcmdldE5vZGU6Tm9kZUJhc2U7XG5cdFx0dmFyIHQ6RW50aXR5Tm9kZTtcblx0XHR0aGlzLl91cGRhdGVRdWV1ZSA9IG51bGw7XG5cdFx0dGhpcy5fdXBkYXRlc01hZGUgPSBmYWxzZTtcblxuXHRcdGRvIHtcblx0XHRcdHRhcmdldE5vZGUgPSB0aGlzLl9yb290Tm9kZS5maW5kUGFydGl0aW9uRm9yRW50aXR5KG5vZGUuZW50aXR5KTtcblxuXHRcdFx0aWYgKG5vZGUucGFyZW50ICE9IHRhcmdldE5vZGUpIHtcblx0XHRcdFx0aWYgKG5vZGUpXG5cdFx0XHRcdFx0bm9kZS5yZW1vdmVGcm9tUGFyZW50KCk7XG5cblx0XHRcdFx0dGFyZ2V0Tm9kZS5pQWRkTm9kZShub2RlKTtcblx0XHRcdH1cblxuXHRcdFx0dCA9IG5vZGUuX2lVcGRhdGVRdWV1ZU5leHQ7XG5cdFx0XHRub2RlLl9pVXBkYXRlUXVldWVOZXh0ID0gbnVsbDtcblxuXHRcdFx0Ly9yZXF1aXJlZCBmb3IgY29udHJvbGxlcnMgd2l0aCBhdXRvVXBkYXRlIHNldCB0byB0cnVlXG5cdFx0XHRub2RlLmVudGl0eS5faUludGVybmFsVXBkYXRlKCk7XG5cblx0XHR9IHdoaWxlICgobm9kZSA9IHQpICE9IG51bGwpO1xuXHR9XG5cblxuXHQvKipcblx0ICogQGludGVybmFsXG5cdCAqL1xuXHRwdWJsaWMgX2lSZWdpc3RlckNhbWVyYShjYW1lcmE6Q2FtZXJhKVxuXHR7XG5cdFx0dGhpcy5pTWFya0ZvclVwZGF0ZSh0aGlzLl9jYW1lcmFOb2RlUG9vbC5nZXRJdGVtKGNhbWVyYSkpO1xuXHR9XG5cblx0LyoqXG5cdCAqIEBpbnRlcm5hbFxuXHQgKi9cblx0cHVibGljIF9pUmVnaXN0ZXJEaXJlY3Rpb25hbExpZ2h0KGRpcmVjdGlvbmFsTGlnaHQ6RGlyZWN0aW9uYWxMaWdodClcblx0e1xuXHRcdHRoaXMuaU1hcmtGb3JVcGRhdGUodGhpcy5fZGlyZWN0aW9uYWxMaWdodE5vZGVQb29sLmdldEl0ZW0oZGlyZWN0aW9uYWxMaWdodCkpO1xuXHR9XG5cblx0LyoqXG5cdCAqIEBpbnRlcm5hbFxuXHQgKi9cblx0cHVibGljIF9pUmVnaXN0ZXJFbnRpdHkoZW50aXR5OklFbnRpdHkpXG5cdHtcblx0XHR0aGlzLmlNYXJrRm9yVXBkYXRlKHRoaXMuX2VudGl0eU5vZGVQb29sLmdldEl0ZW0oZW50aXR5KSk7XG5cdH1cblxuXHQvKipcblx0ICogQGludGVybmFsXG5cdCAqL1xuXHRwdWJsaWMgX2lSZWdpc3RlckxpZ2h0UHJvYmUobGlnaHRQcm9iZTpMaWdodFByb2JlKVxuXHR7XG5cdFx0dGhpcy5pTWFya0ZvclVwZGF0ZSh0aGlzLl9saWdodFByb2JlTm9kZVBvb2wuZ2V0SXRlbShsaWdodFByb2JlKSk7XG5cdH1cblxuXHQvKipcblx0ICogQGludGVybmFsXG5cdCAqL1xuXHRwdWJsaWMgX2lSZWdpc3RlclBvaW50TGlnaHQocG9pbnRMaWdodDpQb2ludExpZ2h0KVxuXHR7XG5cdFx0dGhpcy5pTWFya0ZvclVwZGF0ZSh0aGlzLl9wb2ludExpZ2h0Tm9kZVBvb2wuZ2V0SXRlbShwb2ludExpZ2h0KSk7XG5cdH1cblxuXHQvKipcblx0ICogQGludGVybmFsXG5cdCAqL1xuXHRwdWJsaWMgX2lSZWdpc3RlclNreWJveChza3lib3g6U2t5Ym94KVxuXHR7XG5cdFx0dGhpcy5pTWFya0ZvclVwZGF0ZSh0aGlzLl9za3lib3hOb2RlUG9vbC5nZXRJdGVtKHNreWJveCkpO1xuXHR9XG5cblx0LyoqXG5cdCAqIEBpbnRlcm5hbFxuXHQgKi9cblx0cHVibGljIF9pVW5yZWdpc3RlckNhbWVyYShjYW1lcmE6Q2FtZXJhKVxuXHR7XG5cdFx0dGhpcy5pUmVtb3ZlRW50aXR5KHRoaXMuX2NhbWVyYU5vZGVQb29sLmRpc3Bvc2VJdGVtKGNhbWVyYSkpO1xuXHR9XG5cblx0LyoqXG5cdCAqIEBpbnRlcm5hbFxuXHQgKi9cblx0cHVibGljIF9pVW5yZWdpc3RlckRpcmVjdGlvbmFsTGlnaHQoZGlyZWN0aW9uYWxMaWdodDpEaXJlY3Rpb25hbExpZ2h0KVxuXHR7XG5cdFx0dGhpcy5pUmVtb3ZlRW50aXR5KHRoaXMuX2RpcmVjdGlvbmFsTGlnaHROb2RlUG9vbC5kaXNwb3NlSXRlbShkaXJlY3Rpb25hbExpZ2h0KSk7XG5cdH1cblxuXHQvKipcblx0ICogQGludGVybmFsXG5cdCAqL1xuXHRwdWJsaWMgX2lVbnJlZ2lzdGVyRW50aXR5KGVudGl0eTpJRW50aXR5KVxuXHR7XG5cdFx0dGhpcy5pUmVtb3ZlRW50aXR5KHRoaXMuX2VudGl0eU5vZGVQb29sLmRpc3Bvc2VJdGVtKGVudGl0eSkpO1xuXHR9XG5cblx0LyoqXG5cdCAqIEBpbnRlcm5hbFxuXHQgKi9cblx0cHVibGljIF9pVW5yZWdpc3RlckxpZ2h0UHJvYmUobGlnaHRQcm9iZTpMaWdodFByb2JlKVxuXHR7XG5cdFx0dGhpcy5pUmVtb3ZlRW50aXR5KHRoaXMuX2xpZ2h0UHJvYmVOb2RlUG9vbC5kaXNwb3NlSXRlbShsaWdodFByb2JlKSk7XG5cdH1cblxuXHQvKipcblx0ICogQGludGVybmFsXG5cdCAqL1xuXHRwdWJsaWMgX2lVbnJlZ2lzdGVyUG9pbnRMaWdodChwb2ludExpZ2h0OlBvaW50TGlnaHQpXG5cdHtcblx0XHR0aGlzLmlSZW1vdmVFbnRpdHkodGhpcy5fcG9pbnRMaWdodE5vZGVQb29sLmRpc3Bvc2VJdGVtKHBvaW50TGlnaHQpKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBAaW50ZXJuYWxcblx0ICovXG5cdHB1YmxpYyBfaVVucmVnaXN0ZXJTa3lib3goc2t5Ym94OlNreWJveClcblx0e1xuXHRcdHRoaXMuaVJlbW92ZUVudGl0eSh0aGlzLl9za3lib3hOb2RlUG9vbC5kaXNwb3NlSXRlbShza3lib3gpKTtcblx0fVxufVxuXG5leHBvcnQgPSBQYXJ0aXRpb247Il19