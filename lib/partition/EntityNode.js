var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var Vector3D = require("awayjs-core/lib/geom/Vector3D");
var AxisAlignedBoundingBox = require("awayjs-display/lib/bounds/AxisAlignedBoundingBox");
var BoundingSphere = require("awayjs-display/lib/bounds/BoundingSphere");
var BoundsType = require("awayjs-display/lib/bounds/BoundsType");
var NullBounds = require("awayjs-display/lib/bounds/NullBounds");
var NodeBase = require("awayjs-display/lib/partition/NodeBase");
/**
 * @class away.partition.EntityNode
 */
var EntityNode = (function (_super) {
    __extends(EntityNode, _super);
    function EntityNode(pool, entity, partition) {
        _super.call(this);
        this._pool = pool;
        this._entity = entity;
        this._partition = partition;
        this._iNumEntities = 1;
        this.updateBounds();
        this.debugVisible = this._entity.debugVisible;
    }
    Object.defineProperty(EntityNode.prototype, "entity", {
        get: function () {
            return this._entity;
        },
        enumerable: true,
        configurable: true
    });
    EntityNode.prototype.removeFromParent = function () {
        if (this._iParent)
            this._iParent.iRemoveNode(this);
        this._iParent = null;
    };
    /**
     *
     * @returns {boolean}
     */
    EntityNode.prototype.isCastingShadow = function () {
        return this.entity.castsShadows;
    };
    /**
     *
     * @param planes
     * @param numPlanes
     * @returns {boolean}
     */
    EntityNode.prototype.isInFrustum = function (planes, numPlanes) {
        if (!this._entity._iIsVisible())
            return false;
        return this._bounds.isInFrustum(planes, numPlanes);
    };
    /**
     * @inheritDoc
     */
    EntityNode.prototype.acceptTraverser = function (traverser) {
        if (traverser.enterNode(this)) {
            traverser.applyEntity(this._entity);
            if (this._pImplicitDebugVisible && traverser.isEntityCollector)
                traverser.applyEntity(this._pDebugEntity);
        }
    };
    /**
     * @inheritDoc
     */
    EntityNode.prototype.isIntersectingRay = function (rayPosition, rayDirection) {
        if (!this._entity._iIsVisible())
            return false;
        var pickingCollisionVO = this._entity._iPickingCollisionVO;
        pickingCollisionVO.localRayPosition = this._entity.inverseSceneTransform.transformVector(rayPosition);
        pickingCollisionVO.localRayDirection = this._entity.inverseSceneTransform.deltaTransformVector(rayDirection);
        if (!pickingCollisionVO.localNormal)
            pickingCollisionVO.localNormal = new Vector3D();
        var rayEntryDistance = this._bounds.rayIntersection(pickingCollisionVO.localRayPosition, pickingCollisionVO.localRayDirection, pickingCollisionVO.localNormal);
        if (rayEntryDistance < 0)
            return false;
        pickingCollisionVO.rayEntryDistance = rayEntryDistance;
        pickingCollisionVO.rayPosition = rayPosition;
        pickingCollisionVO.rayDirection = rayDirection;
        pickingCollisionVO.rayOriginIsInsideBounds = rayEntryDistance == 0;
        return true;
    };
    /**
     *
     * @protected
     */
    EntityNode.prototype._pCreateDebugEntity = function () {
        return this._bounds.boundsPrimitive;
    };
    EntityNode.prototype.invalidatePartition = function () {
        this._bounds.invalidate();
        this._partition.iMarkForUpdate(this);
    };
    EntityNode.prototype.updateBounds = function () {
        if (this._entity.boundsType == BoundsType.AXIS_ALIGNED_BOX)
            this._bounds = new AxisAlignedBoundingBox(this._entity);
        else if (this._entity.boundsType == BoundsType.SPHERE)
            this._bounds = new BoundingSphere(this._entity);
        else if (this._entity.boundsType == BoundsType.NULL)
            this._bounds = new NullBounds();
        this.updateDebugEntity();
    };
    EntityNode.id = "entityNode";
    return EntityNode;
})(NodeBase);
module.exports = EntityNode;

//# sourceMappingURL=data:application/json;base64,