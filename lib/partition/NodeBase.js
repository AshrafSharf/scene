var AbstractMethodError = require("awayjs-core/lib/errors/AbstractMethodError");
/**
 * @class away.partition.NodeBase
 */
var NodeBase = (function () {
    /**
     *
     */
    function NodeBase() {
        this._pNumChildNodes = 0;
        this._iNumEntities = 0;
        this._pChildNodes = new Array();
    }
    Object.defineProperty(NodeBase.prototype, "debugVisible", {
        /**
         *
         */
        get: function () {
            return this._explicitDebugVisible;
        },
        set: function (value) {
            if (this._explicitDebugVisible == value)
                return;
            this._explicitDebugVisible = value;
            this._iUpdateImplicitDebugVisible(this._iParent ? this._iParent.debugChildrenVisible : false);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NodeBase.prototype, "debugChildrenVisible", {
        get: function () {
            return this._debugChildrenVisible;
        },
        set: function (value) {
            if (this._debugChildrenVisible == value)
                return;
            this._debugChildrenVisible = value;
            for (var i = 0; i < this._pNumChildNodes; ++i)
                this._pChildNodes[i]._iUpdateImplicitDebugVisible(this._debugChildrenVisible);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NodeBase.prototype, "parent", {
        /**
         *
         */
        get: function () {
            return this._iParent;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NodeBase.prototype, "_pNumEntities", {
        /**
         *
         * @protected
         */
        get: function () {
            return this._iNumEntities;
        },
        enumerable: true,
        configurable: true
    });
    /**
     *
     * @param planes
     * @param numPlanes
     * @returns {boolean}
     * @internal
     */
    NodeBase.prototype.isInFrustum = function (planes, numPlanes) {
        return true;
    };
    /**
     *
     * @param rayPosition
     * @param rayDirection
     * @returns {boolean}
     */
    NodeBase.prototype.isIntersectingRay = function (rayPosition, rayDirection) {
        return true;
    };
    /**
     *
     * @returns {boolean}
     */
    NodeBase.prototype.isCastingShadow = function () {
        return true;
    };
    /**
     *
     * @param entity
     * @returns {away.partition.NodeBase}
     */
    NodeBase.prototype.findPartitionForEntity = function (entity) {
        return this;
    };
    /**
     *
     * @param traverser
     */
    NodeBase.prototype.acceptTraverser = function (traverser) {
        if (this._pNumEntities == 0 && !this._pImplicitDebugVisible)
            return;
        if (traverser.enterNode(this)) {
            var i = 0;
            while (i < this._pNumChildNodes)
                this._pChildNodes[i++].acceptTraverser(traverser);
            if (this._pImplicitDebugVisible && traverser.isEntityCollector)
                traverser.applyEntity(this._pDebugEntity);
        }
    };
    /**
     *
     * @protected
     */
    NodeBase.prototype.applyDebugEntity = function (traverser) {
        if (this._pDebugEntity == null)
            this._pDebugEntity = this._pCreateDebugEntity();
        traverser.applyEntity(this._pDebugEntity);
    };
    /**
     *
     * @param node
     * @internal
     */
    NodeBase.prototype.iAddNode = function (node) {
        node._iParent = this;
        this._iNumEntities += node._pNumEntities;
        this._pChildNodes[this._pNumChildNodes++] = node;
        node._iUpdateImplicitDebugVisible(this.debugChildrenVisible);
        var numEntities = node._pNumEntities;
        node = this;
        do {
            node._iNumEntities += numEntities;
        } while ((node = node._iParent) != null);
    };
    /**
     *
     * @param node
     * @internal
     */
    NodeBase.prototype.iRemoveNode = function (node) {
        var index = this._pChildNodes.indexOf(node);
        this._pChildNodes[index] = this._pChildNodes[--this._pNumChildNodes];
        this._pChildNodes.pop();
        node._iUpdateImplicitDebugVisible(false);
        var numEntities = node._pNumEntities;
        node = this;
        do {
            node._pNumEntities -= numEntities;
        } while ((node = node._iParent) != null);
    };
    NodeBase.prototype._iUpdateImplicitDebugVisible = function (value) {
        if (this._pImplicitDebugVisible == this._explicitDebugVisible || value)
            return;
        this._pImplicitDebugVisible = this._explicitDebugVisible || value;
        for (var i = 0; i < this._pNumChildNodes; ++i)
            this._pChildNodes[i]._iUpdateImplicitDebugVisible(this._debugChildrenVisible);
        if (this._pImplicitDebugVisible) {
            this._pDebugEntity = this._pCreateDebugEntity();
        }
        else {
            //this._pDebugEntity.dispose();
            this._pDebugEntity = null;
        }
    };
    NodeBase.prototype.updateDebugEntity = function () {
        if (this._pImplicitDebugVisible) {
            //this._pDebugEntity.dispose();
            this._pDebugEntity = this._pCreateDebugEntity();
        }
    };
    NodeBase.prototype._pCreateDebugEntity = function () {
        throw new AbstractMethodError();
    };
    return NodeBase;
})();
module.exports = NodeBase;

//# sourceMappingURL=data:application/json;base64,