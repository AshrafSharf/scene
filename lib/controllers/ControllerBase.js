var AbstractMethodError = require("awayjs-core/lib/errors/AbstractMethodError");
var ControllerBase = (function () {
    function ControllerBase(targetObject) {
        if (targetObject === void 0) { targetObject = null; }
        this._pAutoUpdate = true;
        this.targetObject = targetObject;
    }
    ControllerBase.prototype.pNotifyUpdate = function () {
        if (this._pTargetObject && this._pAutoUpdate) {
            this._pTargetObject.invalidatePartition();
        }
    };
    Object.defineProperty(ControllerBase.prototype, "targetObject", {
        get: function () {
            return this._pTargetObject;
        },
        set: function (val) {
            if (this._pTargetObject == val) {
                return;
            }
            if (this._pTargetObject && this._pAutoUpdate) {
                this._pTargetObject._iController = null;
            }
            this._pTargetObject = val;
            if (this._pTargetObject && this._pAutoUpdate) {
                this._pTargetObject._iController = this;
            }
            this.pNotifyUpdate();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ControllerBase.prototype, "autoUpdate", {
        get: function () {
            return this._pAutoUpdate;
        },
        set: function (val) {
            if (this._pAutoUpdate == val) {
                return;
            }
            this._pAutoUpdate = val;
            if (this._pTargetObject) {
                if (this._pTargetObject) {
                    this._pTargetObject._iController = this;
                }
                else {
                    this._pTargetObject._iController = null;
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    ControllerBase.prototype.update = function (interpolate) {
        if (interpolate === void 0) { interpolate = true; }
        throw new AbstractMethodError();
    };
    return ControllerBase;
})();
module.exports = ControllerBase;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImF3YXlqcy1kaXNwbGF5L2xpYi9jb250cm9sbGVycy9Db250cm9sbGVyQmFzZS50cyJdLCJuYW1lcyI6WyJDb250cm9sbGVyQmFzZSIsIkNvbnRyb2xsZXJCYXNlLmNvbnN0cnVjdG9yIiwiQ29udHJvbGxlckJhc2UucE5vdGlmeVVwZGF0ZSIsIkNvbnRyb2xsZXJCYXNlLnRhcmdldE9iamVjdCIsIkNvbnRyb2xsZXJCYXNlLmF1dG9VcGRhdGUiLCJDb250cm9sbGVyQmFzZS51cGRhdGUiXSwibWFwcGluZ3MiOiJBQUFBLElBQU8sbUJBQW1CLFdBQVksNENBQTRDLENBQUMsQ0FBQztBQUlwRixJQUFNLGNBQWM7SUFNbkJBLFNBTktBLGNBQWNBLENBTVBBLFlBQWlDQTtRQUFqQ0MsNEJBQWlDQSxHQUFqQ0EsbUJBQWlDQTtRQUh0Q0EsaUJBQVlBLEdBQVdBLElBQUlBLENBQUNBO1FBS2xDQSxJQUFJQSxDQUFDQSxZQUFZQSxHQUFHQSxZQUFZQSxDQUFDQTtJQUNsQ0EsQ0FBQ0E7SUFFTUQsc0NBQWFBLEdBQXBCQTtRQUVDRSxFQUFFQSxDQUFDQSxDQUFDQSxJQUFJQSxDQUFDQSxjQUFjQSxJQUFJQSxJQUFJQSxDQUFDQSxZQUFZQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUM5Q0EsSUFBSUEsQ0FBQ0EsY0FBY0EsQ0FBQ0EsbUJBQW1CQSxFQUFFQSxDQUFDQTtRQUMzQ0EsQ0FBQ0E7SUFDRkEsQ0FBQ0E7SUFFREYsc0JBQVdBLHdDQUFZQTthQUF2QkE7WUFFQ0csTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsY0FBY0EsQ0FBQ0E7UUFDNUJBLENBQUNBO2FBRURILFVBQXdCQSxHQUFpQkE7WUFFeENHLEVBQUVBLENBQUNBLENBQUNBLElBQUlBLENBQUNBLGNBQWNBLElBQUlBLEdBQUdBLENBQUNBLENBQUNBLENBQUNBO2dCQUNoQ0EsTUFBTUEsQ0FBQ0E7WUFDUkEsQ0FBQ0E7WUFFREEsRUFBRUEsQ0FBQ0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsY0FBY0EsSUFBSUEsSUFBSUEsQ0FBQ0EsWUFBWUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7Z0JBQzlDQSxJQUFJQSxDQUFDQSxjQUFjQSxDQUFDQSxZQUFZQSxHQUFHQSxJQUFJQSxDQUFDQTtZQUN6Q0EsQ0FBQ0E7WUFDREEsSUFBSUEsQ0FBQ0EsY0FBY0EsR0FBR0EsR0FBR0EsQ0FBQ0E7WUFFMUJBLEVBQUVBLENBQUNBLENBQUNBLElBQUlBLENBQUNBLGNBQWNBLElBQUlBLElBQUlBLENBQUNBLFlBQVlBLENBQUNBLENBQUNBLENBQUNBO2dCQUM5Q0EsSUFBSUEsQ0FBQ0EsY0FBY0EsQ0FBQ0EsWUFBWUEsR0FBR0EsSUFBSUEsQ0FBQ0E7WUFDekNBLENBQUNBO1lBQ0RBLElBQUlBLENBQUNBLGFBQWFBLEVBQUVBLENBQUNBO1FBQ3RCQSxDQUFDQTs7O09BakJBSDtJQW1CREEsc0JBQVdBLHNDQUFVQTthQUFyQkE7WUFFQ0ksTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsWUFBWUEsQ0FBQ0E7UUFDMUJBLENBQUNBO2FBRURKLFVBQXNCQSxHQUFXQTtZQUVoQ0ksRUFBRUEsQ0FBQ0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsWUFBWUEsSUFBSUEsR0FBR0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7Z0JBQzlCQSxNQUFNQSxDQUFDQTtZQUNSQSxDQUFDQTtZQUNEQSxJQUFJQSxDQUFDQSxZQUFZQSxHQUFHQSxHQUFHQSxDQUFDQTtZQUV4QkEsRUFBRUEsQ0FBQ0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsY0FBY0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7Z0JBQ3pCQSxFQUFFQSxDQUFDQSxDQUFDQSxJQUFJQSxDQUFDQSxjQUFjQSxDQUFDQSxDQUFDQSxDQUFDQTtvQkFDekJBLElBQUlBLENBQUNBLGNBQWNBLENBQUNBLFlBQVlBLEdBQUdBLElBQUlBLENBQUNBO2dCQUN6Q0EsQ0FBQ0E7Z0JBQUNBLElBQUlBLENBQUNBLENBQUNBO29CQUNQQSxJQUFJQSxDQUFDQSxjQUFjQSxDQUFDQSxZQUFZQSxHQUFHQSxJQUFJQSxDQUFDQTtnQkFDekNBLENBQUNBO1lBQ0ZBLENBQUNBO1FBQ0ZBLENBQUNBOzs7T0FoQkFKO0lBa0JNQSwrQkFBTUEsR0FBYkEsVUFBY0EsV0FBMEJBO1FBQTFCSywyQkFBMEJBLEdBQTFCQSxrQkFBMEJBO1FBRXZDQSxNQUFNQSxJQUFJQSxtQkFBbUJBLEVBQUVBLENBQUNBO0lBQ2pDQSxDQUFDQTtJQUNGTCxxQkFBQ0E7QUFBREEsQ0FqRUEsQUFpRUNBLElBQUE7QUFFRCxBQUF3QixpQkFBZixjQUFjLENBQUMiLCJmaWxlIjoiY29udHJvbGxlcnMvQ29udHJvbGxlckJhc2UuanMiLCJzb3VyY2VSb290IjoiLi4vIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEFic3RyYWN0TWV0aG9kRXJyb3JcdFx0PSByZXF1aXJlKFwiYXdheWpzLWNvcmUvbGliL2Vycm9ycy9BYnN0cmFjdE1ldGhvZEVycm9yXCIpO1xyXG5cclxuaW1wb3J0IERpc3BsYXlPYmplY3RcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtZGlzcGxheS9saWIvYmFzZS9EaXNwbGF5T2JqZWN0XCIpO1xyXG5cclxuY2xhc3MgQ29udHJvbGxlckJhc2Vcclxue1xyXG5cclxuXHRwdWJsaWMgX3BBdXRvVXBkYXRlOmJvb2xlYW4gPSB0cnVlO1xyXG5cdHB1YmxpYyBfcFRhcmdldE9iamVjdDpEaXNwbGF5T2JqZWN0O1xyXG5cclxuXHRjb25zdHJ1Y3Rvcih0YXJnZXRPYmplY3Q6RGlzcGxheU9iamVjdCA9IG51bGwpXHJcblx0e1xyXG5cdFx0dGhpcy50YXJnZXRPYmplY3QgPSB0YXJnZXRPYmplY3Q7XHJcblx0fVxyXG5cclxuXHRwdWJsaWMgcE5vdGlmeVVwZGF0ZSgpXHJcblx0e1xyXG5cdFx0aWYgKHRoaXMuX3BUYXJnZXRPYmplY3QgJiYgdGhpcy5fcEF1dG9VcGRhdGUpIHtcclxuXHRcdFx0dGhpcy5fcFRhcmdldE9iamVjdC5pbnZhbGlkYXRlUGFydGl0aW9uKCk7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRwdWJsaWMgZ2V0IHRhcmdldE9iamVjdCgpOkRpc3BsYXlPYmplY3RcclxuXHR7XHJcblx0XHRyZXR1cm4gdGhpcy5fcFRhcmdldE9iamVjdDtcclxuXHR9XHJcblxyXG5cdHB1YmxpYyBzZXQgdGFyZ2V0T2JqZWN0KHZhbDpEaXNwbGF5T2JqZWN0KVxyXG5cdHtcclxuXHRcdGlmICh0aGlzLl9wVGFyZ2V0T2JqZWN0ID09IHZhbCkge1xyXG5cdFx0XHRyZXR1cm47XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKHRoaXMuX3BUYXJnZXRPYmplY3QgJiYgdGhpcy5fcEF1dG9VcGRhdGUpIHtcclxuXHRcdFx0dGhpcy5fcFRhcmdldE9iamVjdC5faUNvbnRyb2xsZXIgPSBudWxsO1xyXG5cdFx0fVxyXG5cdFx0dGhpcy5fcFRhcmdldE9iamVjdCA9IHZhbDtcclxuXHJcblx0XHRpZiAodGhpcy5fcFRhcmdldE9iamVjdCAmJiB0aGlzLl9wQXV0b1VwZGF0ZSkge1xyXG5cdFx0XHR0aGlzLl9wVGFyZ2V0T2JqZWN0Ll9pQ29udHJvbGxlciA9IHRoaXM7XHJcblx0XHR9XHJcblx0XHR0aGlzLnBOb3RpZnlVcGRhdGUoKTtcclxuXHR9XHJcblxyXG5cdHB1YmxpYyBnZXQgYXV0b1VwZGF0ZSgpOmJvb2xlYW5cclxuXHR7XHJcblx0XHRyZXR1cm4gdGhpcy5fcEF1dG9VcGRhdGU7XHJcblx0fVxyXG5cclxuXHRwdWJsaWMgc2V0IGF1dG9VcGRhdGUodmFsOmJvb2xlYW4pXHJcblx0e1xyXG5cdFx0aWYgKHRoaXMuX3BBdXRvVXBkYXRlID09IHZhbCkge1xyXG5cdFx0XHRyZXR1cm47XHJcblx0XHR9XHJcblx0XHR0aGlzLl9wQXV0b1VwZGF0ZSA9IHZhbDtcclxuXHJcblx0XHRpZiAodGhpcy5fcFRhcmdldE9iamVjdCkge1xyXG5cdFx0XHRpZiAodGhpcy5fcFRhcmdldE9iamVjdCkge1xyXG5cdFx0XHRcdHRoaXMuX3BUYXJnZXRPYmplY3QuX2lDb250cm9sbGVyID0gdGhpcztcclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHR0aGlzLl9wVGFyZ2V0T2JqZWN0Ll9pQ29udHJvbGxlciA9IG51bGw7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdHB1YmxpYyB1cGRhdGUoaW50ZXJwb2xhdGU6Ym9vbGVhbiA9IHRydWUpXHJcblx0e1xyXG5cdFx0dGhyb3cgbmV3IEFic3RyYWN0TWV0aG9kRXJyb3IoKTtcclxuXHR9XHJcbn1cclxuXHJcbmV4cG9ydCA9IENvbnRyb2xsZXJCYXNlOyJdfQ==