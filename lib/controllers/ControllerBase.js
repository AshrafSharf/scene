var AbstractMethodError = require("awayjs-core/lib/errors/AbstractMethodError");
var ControllerBase = (function () {
    function ControllerBase(targetObject) {
        if (targetObject === void 0) { targetObject = null; }
        this._pAutoUpdate = true;
        this.targetObject = targetObject;
    }
    ControllerBase.prototype.pNotifyUpdate = function () {
        if (this._pTargetObject && this._pTargetObject._iAssignedPartition && this._pAutoUpdate) {
            this._pTargetObject._iAssignedPartition.iMarkForUpdate(this._pTargetObject);
        }
    };
    Object.defineProperty(ControllerBase.prototype, "targetObject", {
        get: function () {
            return this._pTargetObject;
        },
        set: function (val) {
            if (this._pTargetObject == val) {
                return;
            }
            if (this._pTargetObject && this._pAutoUpdate) {
                this._pTargetObject._iController = null;
            }
            this._pTargetObject = val;
            if (this._pTargetObject && this._pAutoUpdate) {
                this._pTargetObject._iController = this;
            }
            this.pNotifyUpdate();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ControllerBase.prototype, "autoUpdate", {
        get: function () {
            return this._pAutoUpdate;
        },
        set: function (val) {
            if (this._pAutoUpdate == val) {
                return;
            }
            this._pAutoUpdate = val;
            if (this._pTargetObject) {
                if (this._pTargetObject) {
                    this._pTargetObject._iController = this;
                }
                else {
                    this._pTargetObject._iController = null;
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    ControllerBase.prototype.update = function (interpolate) {
        if (interpolate === void 0) { interpolate = true; }
        throw new AbstractMethodError();
    };
    return ControllerBase;
})();
module.exports = ControllerBase;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImF3YXlqcy1kaXNwbGF5L2xpYi9jb250cm9sbGVycy9Db250cm9sbGVyQmFzZS50cyJdLCJuYW1lcyI6WyJDb250cm9sbGVyQmFzZSIsIkNvbnRyb2xsZXJCYXNlLmNvbnN0cnVjdG9yIiwiQ29udHJvbGxlckJhc2UucE5vdGlmeVVwZGF0ZSIsIkNvbnRyb2xsZXJCYXNlLnRhcmdldE9iamVjdCIsIkNvbnRyb2xsZXJCYXNlLmF1dG9VcGRhdGUiLCJDb250cm9sbGVyQmFzZS51cGRhdGUiXSwibWFwcGluZ3MiOiJBQUFBLElBQU8sbUJBQW1CLFdBQVksNENBQTRDLENBQUMsQ0FBQztBQUlwRixJQUFNLGNBQWM7SUFNbkJBLFNBTktBLGNBQWNBLENBTVBBLFlBQWlDQTtRQUFqQ0MsNEJBQWlDQSxHQUFqQ0EsbUJBQWlDQTtRQUh0Q0EsaUJBQVlBLEdBQVdBLElBQUlBLENBQUNBO1FBS2xDQSxJQUFJQSxDQUFDQSxZQUFZQSxHQUFHQSxZQUFZQSxDQUFDQTtJQUNsQ0EsQ0FBQ0E7SUFFTUQsc0NBQWFBLEdBQXBCQTtRQUVDRSxFQUFFQSxDQUFDQSxDQUFDQSxJQUFJQSxDQUFDQSxjQUFjQSxJQUFJQSxJQUFJQSxDQUFDQSxjQUFjQSxDQUFDQSxtQkFBbUJBLElBQUlBLElBQUlBLENBQUNBLFlBQVlBLENBQUNBLENBQUNBLENBQUNBO1lBQ3pGQSxJQUFJQSxDQUFDQSxjQUFjQSxDQUFDQSxtQkFBbUJBLENBQUNBLGNBQWNBLENBQUNBLElBQUlBLENBQUNBLGNBQWNBLENBQUNBLENBQUNBO1FBQzdFQSxDQUFDQTtJQUNGQSxDQUFDQTtJQUVERixzQkFBV0Esd0NBQVlBO2FBQXZCQTtZQUVDRyxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQSxjQUFjQSxDQUFDQTtRQUM1QkEsQ0FBQ0E7YUFFREgsVUFBd0JBLEdBQWlCQTtZQUV4Q0csRUFBRUEsQ0FBQ0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsY0FBY0EsSUFBSUEsR0FBR0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7Z0JBQ2hDQSxNQUFNQSxDQUFDQTtZQUNSQSxDQUFDQTtZQUVEQSxFQUFFQSxDQUFDQSxDQUFDQSxJQUFJQSxDQUFDQSxjQUFjQSxJQUFJQSxJQUFJQSxDQUFDQSxZQUFZQSxDQUFDQSxDQUFDQSxDQUFDQTtnQkFDOUNBLElBQUlBLENBQUNBLGNBQWNBLENBQUNBLFlBQVlBLEdBQUdBLElBQUlBLENBQUNBO1lBQ3pDQSxDQUFDQTtZQUNEQSxJQUFJQSxDQUFDQSxjQUFjQSxHQUFHQSxHQUFHQSxDQUFDQTtZQUUxQkEsRUFBRUEsQ0FBQ0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsY0FBY0EsSUFBSUEsSUFBSUEsQ0FBQ0EsWUFBWUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7Z0JBQzlDQSxJQUFJQSxDQUFDQSxjQUFjQSxDQUFDQSxZQUFZQSxHQUFHQSxJQUFJQSxDQUFDQTtZQUN6Q0EsQ0FBQ0E7WUFDREEsSUFBSUEsQ0FBQ0EsYUFBYUEsRUFBRUEsQ0FBQ0E7UUFDdEJBLENBQUNBOzs7T0FqQkFIO0lBbUJEQSxzQkFBV0Esc0NBQVVBO2FBQXJCQTtZQUVDSSxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQSxZQUFZQSxDQUFDQTtRQUMxQkEsQ0FBQ0E7YUFFREosVUFBc0JBLEdBQVdBO1lBRWhDSSxFQUFFQSxDQUFDQSxDQUFDQSxJQUFJQSxDQUFDQSxZQUFZQSxJQUFJQSxHQUFHQSxDQUFDQSxDQUFDQSxDQUFDQTtnQkFDOUJBLE1BQU1BLENBQUNBO1lBQ1JBLENBQUNBO1lBQ0RBLElBQUlBLENBQUNBLFlBQVlBLEdBQUdBLEdBQUdBLENBQUNBO1lBRXhCQSxFQUFFQSxDQUFDQSxDQUFDQSxJQUFJQSxDQUFDQSxjQUFjQSxDQUFDQSxDQUFDQSxDQUFDQTtnQkFDekJBLEVBQUVBLENBQUNBLENBQUNBLElBQUlBLENBQUNBLGNBQWNBLENBQUNBLENBQUNBLENBQUNBO29CQUN6QkEsSUFBSUEsQ0FBQ0EsY0FBY0EsQ0FBQ0EsWUFBWUEsR0FBR0EsSUFBSUEsQ0FBQ0E7Z0JBQ3pDQSxDQUFDQTtnQkFBQ0EsSUFBSUEsQ0FBQ0EsQ0FBQ0E7b0JBQ1BBLElBQUlBLENBQUNBLGNBQWNBLENBQUNBLFlBQVlBLEdBQUdBLElBQUlBLENBQUNBO2dCQUN6Q0EsQ0FBQ0E7WUFDRkEsQ0FBQ0E7UUFDRkEsQ0FBQ0E7OztPQWhCQUo7SUFrQk1BLCtCQUFNQSxHQUFiQSxVQUFjQSxXQUEwQkE7UUFBMUJLLDJCQUEwQkEsR0FBMUJBLGtCQUEwQkE7UUFFdkNBLE1BQU1BLElBQUlBLG1CQUFtQkEsRUFBRUEsQ0FBQ0E7SUFDakNBLENBQUNBO0lBQ0ZMLHFCQUFDQTtBQUFEQSxDQWpFQSxBQWlFQ0EsSUFBQTtBQUVELEFBQXdCLGlCQUFmLGNBQWMsQ0FBQyIsImZpbGUiOiJjb250cm9sbGVycy9Db250cm9sbGVyQmFzZS5qcyIsInNvdXJjZVJvb3QiOiIuLi8iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgQWJzdHJhY3RNZXRob2RFcnJvclx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtY29yZS9saWIvZXJyb3JzL0Fic3RyYWN0TWV0aG9kRXJyb3JcIik7XHJcblxyXG5pbXBvcnQgRGlzcGxheU9iamVjdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1kaXNwbGF5L2xpYi9iYXNlL0Rpc3BsYXlPYmplY3RcIik7XHJcblxyXG5jbGFzcyBDb250cm9sbGVyQmFzZVxyXG57XHJcblxyXG5cdHB1YmxpYyBfcEF1dG9VcGRhdGU6Ym9vbGVhbiA9IHRydWU7XHJcblx0cHVibGljIF9wVGFyZ2V0T2JqZWN0OkRpc3BsYXlPYmplY3Q7XHJcblxyXG5cdGNvbnN0cnVjdG9yKHRhcmdldE9iamVjdDpEaXNwbGF5T2JqZWN0ID0gbnVsbClcclxuXHR7XHJcblx0XHR0aGlzLnRhcmdldE9iamVjdCA9IHRhcmdldE9iamVjdDtcclxuXHR9XHJcblxyXG5cdHB1YmxpYyBwTm90aWZ5VXBkYXRlKClcclxuXHR7XHJcblx0XHRpZiAodGhpcy5fcFRhcmdldE9iamVjdCAmJiB0aGlzLl9wVGFyZ2V0T2JqZWN0Ll9pQXNzaWduZWRQYXJ0aXRpb24gJiYgdGhpcy5fcEF1dG9VcGRhdGUpIHtcclxuXHRcdFx0dGhpcy5fcFRhcmdldE9iamVjdC5faUFzc2lnbmVkUGFydGl0aW9uLmlNYXJrRm9yVXBkYXRlKHRoaXMuX3BUYXJnZXRPYmplY3QpO1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0cHVibGljIGdldCB0YXJnZXRPYmplY3QoKTpEaXNwbGF5T2JqZWN0XHJcblx0e1xyXG5cdFx0cmV0dXJuIHRoaXMuX3BUYXJnZXRPYmplY3Q7XHJcblx0fVxyXG5cclxuXHRwdWJsaWMgc2V0IHRhcmdldE9iamVjdCh2YWw6RGlzcGxheU9iamVjdClcclxuXHR7XHJcblx0XHRpZiAodGhpcy5fcFRhcmdldE9iamVjdCA9PSB2YWwpIHtcclxuXHRcdFx0cmV0dXJuO1xyXG5cdFx0fVxyXG5cclxuXHRcdGlmICh0aGlzLl9wVGFyZ2V0T2JqZWN0ICYmIHRoaXMuX3BBdXRvVXBkYXRlKSB7XHJcblx0XHRcdHRoaXMuX3BUYXJnZXRPYmplY3QuX2lDb250cm9sbGVyID0gbnVsbDtcclxuXHRcdH1cclxuXHRcdHRoaXMuX3BUYXJnZXRPYmplY3QgPSB2YWw7XHJcblxyXG5cdFx0aWYgKHRoaXMuX3BUYXJnZXRPYmplY3QgJiYgdGhpcy5fcEF1dG9VcGRhdGUpIHtcclxuXHRcdFx0dGhpcy5fcFRhcmdldE9iamVjdC5faUNvbnRyb2xsZXIgPSB0aGlzO1xyXG5cdFx0fVxyXG5cdFx0dGhpcy5wTm90aWZ5VXBkYXRlKCk7XHJcblx0fVxyXG5cclxuXHRwdWJsaWMgZ2V0IGF1dG9VcGRhdGUoKTpib29sZWFuXHJcblx0e1xyXG5cdFx0cmV0dXJuIHRoaXMuX3BBdXRvVXBkYXRlO1xyXG5cdH1cclxuXHJcblx0cHVibGljIHNldCBhdXRvVXBkYXRlKHZhbDpib29sZWFuKVxyXG5cdHtcclxuXHRcdGlmICh0aGlzLl9wQXV0b1VwZGF0ZSA9PSB2YWwpIHtcclxuXHRcdFx0cmV0dXJuO1xyXG5cdFx0fVxyXG5cdFx0dGhpcy5fcEF1dG9VcGRhdGUgPSB2YWw7XHJcblxyXG5cdFx0aWYgKHRoaXMuX3BUYXJnZXRPYmplY3QpIHtcclxuXHRcdFx0aWYgKHRoaXMuX3BUYXJnZXRPYmplY3QpIHtcclxuXHRcdFx0XHR0aGlzLl9wVGFyZ2V0T2JqZWN0Ll9pQ29udHJvbGxlciA9IHRoaXM7XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0dGhpcy5fcFRhcmdldE9iamVjdC5faUNvbnRyb2xsZXIgPSBudWxsO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRwdWJsaWMgdXBkYXRlKGludGVycG9sYXRlOmJvb2xlYW4gPSB0cnVlKVxyXG5cdHtcclxuXHRcdHRocm93IG5ldyBBYnN0cmFjdE1ldGhvZEVycm9yKCk7XHJcblx0fVxyXG59XHJcblxyXG5leHBvcnQgPSBDb250cm9sbGVyQmFzZTsiXX0=