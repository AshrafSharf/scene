var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var LineSubMesh = require("awayjs-display/lib/base/LineSubMesh");
var SubGeometryBase = require("awayjs-display/lib/base/SubGeometryBase");
var TriangleSubGeometry = require("awayjs-display/lib/base/TriangleSubGeometry");
var SubGeometryEvent = require("awayjs-display/lib/events/SubGeometryEvent");
/**
 * @class LineSubGeometry
 */
var LineSubGeometry = (function (_super) {
    __extends(LineSubGeometry, _super);
    /**
     *
     */
    function LineSubGeometry() {
        _super.call(this, true);
        this._positionsDirty = true;
        this._boundingPositionDirty = true;
        this._thicknessDirty = true;
        this._colorsDirty = true;
        this._pSubMeshClass = LineSubMesh;
    }
    LineSubGeometry.prototype._pUpdateStrideOffset = function () {
        this._pOffset[LineSubGeometry.VERTEX_DATA] = 0;
        var stride = 0;
        this._pOffset[LineSubGeometry.START_POSITION_DATA] = stride;
        stride += 3;
        this._pOffset[LineSubGeometry.END_POSITION_DATA] = stride;
        stride += 3;
        this._pOffset[LineSubGeometry.THICKNESS_DATA] = stride;
        stride += 1;
        this._pOffset[LineSubGeometry.COLOR_DATA] = stride;
        stride += 4;
        this._pStride[LineSubGeometry.VERTEX_DATA] = stride;
        this._pStride[LineSubGeometry.START_POSITION_DATA] = stride;
        this._pStride[LineSubGeometry.END_POSITION_DATA] = stride;
        this._pStride[LineSubGeometry.THICKNESS_DATA] = stride;
        this._pStride[LineSubGeometry.COLOR_DATA] = stride;
        var len = this._pNumVertices * stride;
        if (this._pVertices == null)
            this._pVertices = new Array(len);
        else if (this._pVertices.length != len)
            this._pVertices.length = len;
        this._pStrideOffsetDirty = false;
    };
    Object.defineProperty(LineSubGeometry.prototype, "vertices", {
        /**
         *
         */
        get: function () {
            if (this._positionsDirty)
                this.updatePositions(this._startPositions, this._endPositions);
            if (this._thicknessDirty)
                this.updateThickness(this._thickness);
            if (this._colorsDirty)
                this.updateColors(this._startColors, this._endColors);
            return this._pVertices;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LineSubGeometry.prototype, "startPositions", {
        /**
         *
         */
        get: function () {
            if (this._positionsDirty)
                this.updatePositions(this._startPositions, this._endPositions);
            return this._startPositions;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LineSubGeometry.prototype, "endPositions", {
        /**
         *
         */
        get: function () {
            if (this._positionsDirty)
                this.updatePositions(this._startPositions, this._endPositions);
            return this._endPositions;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LineSubGeometry.prototype, "thickness", {
        /**
         *
         */
        get: function () {
            if (this._thicknessDirty)
                this.updateThickness(this._thickness);
            return this._thickness;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LineSubGeometry.prototype, "startColors", {
        /**
         *
         */
        get: function () {
            if (this._colorsDirty)
                this.updateColors(this._startColors, this._endColors);
            return this._startColors;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LineSubGeometry.prototype, "endColors", {
        /**
         *
         */
        get: function () {
            if (this._colorsDirty)
                this.updateColors(this._startColors, this._endColors);
            return this._endColors;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LineSubGeometry.prototype, "numSegments", {
        /**
         * The total amount of segments in the TriangleSubGeometry.
         */
        get: function () {
            return this._numSegments;
        },
        enumerable: true,
        configurable: true
    });
    LineSubGeometry.prototype.getBoundingPositions = function () {
        if (this._boundingPositionDirty)
            this._boundingPositions = this.startPositions.concat(this.endPositions);
        return this._boundingPositions;
    };
    /**
     *
     */
    LineSubGeometry.prototype.updatePositions = function (startValues, endValues) {
        var i;
        var j;
        var values;
        var index;
        var stride;
        var positions;
        var indices;
        this._startPositions = startValues;
        if (this._startPositions == null)
            this._startPositions = new Array();
        this._endPositions = endValues;
        if (this._endPositions == null)
            this._endPositions = new Array();
        this._boundingPositionDirty = true;
        this._numSegments = this._startPositions.length / 3;
        this._pNumVertices = this._numSegments * 4;
        var lenV = this._pNumVertices * this.getStride(LineSubGeometry.VERTEX_DATA);
        if (this._pVertices == null)
            this._pVertices = new Array(lenV);
        else if (this._pVertices.length != lenV)
            this._pVertices.length = lenV;
        i = 0;
        j = 0;
        index = this.getOffset(LineSubGeometry.START_POSITION_DATA);
        stride = this.getStride(LineSubGeometry.START_POSITION_DATA);
        positions = this._pVertices;
        indices = new Array();
        while (i < startValues.length) {
            values = (index / stride & 1) ? endValues : startValues;
            positions[index] = values[i];
            positions[index + 1] = values[i + 1];
            positions[index + 2] = values[i + 2];
            values = (index / stride & 1) ? startValues : endValues;
            positions[index + 3] = values[i];
            positions[index + 4] = values[i + 1];
            positions[index + 5] = values[i + 2];
            if (++j == 4) {
                var o = index / stride - 3;
                indices.push(o, o + 1, o + 2, o + 3, o + 2, o + 1);
                j = 0;
                i += 3;
            }
            index += stride;
        }
        this.updateIndices(indices);
        this.pInvalidateBounds();
        this.notifyPositionsUpdate();
        this._positionsDirty = false;
    };
    /**
     * Updates the thickness.
     */
    LineSubGeometry.prototype.updateThickness = function (values) {
        var i;
        var j;
        var index;
        var offset;
        var stride;
        var thickness;
        this._thickness = values;
        if (values != null) {
            i = 0;
            j = 0;
            offset = this.getOffset(LineSubGeometry.THICKNESS_DATA);
            stride = this.getStride(LineSubGeometry.THICKNESS_DATA);
            thickness = this._pVertices;
            index = offset;
            while (i < values.length) {
                thickness[index] = (Math.floor(0.5 * (index - offset) / stride + 0.5) & 1) ? -values[i] : values[i];
                if (++j == 4) {
                    j = 0;
                    i++;
                }
                index += stride;
            }
        }
        this.notifyThicknessUpdate();
        this._thicknessDirty = false;
    };
    /**
     *
     */
    LineSubGeometry.prototype.updateColors = function (startValues, endValues) {
        var i;
        var j;
        var values;
        var index;
        var offset;
        var stride;
        var colors;
        this._startColors = startValues;
        this._endColors = endValues;
        //default to white
        if (this._startColors == null) {
            this._startColors = new Array(this._numSegments * 4);
            i = 0;
            while (i < this._startColors.length)
                this._startColors[i++] = 1;
        }
        if (this._endColors == null) {
            this._endColors = new Array(this._numSegments * 4);
            i = 0;
            while (i < this._endColors.length)
                this._endColors[i++] = 1;
        }
        i = 0;
        j = 0;
        offset = this.getOffset(LineSubGeometry.COLOR_DATA);
        stride = this.getStride(LineSubGeometry.COLOR_DATA);
        colors = this._pVertices;
        index = offset;
        while (i < this._startColors.length) {
            values = ((index - offset) / stride & 1) ? this._endColors : this._startColors;
            colors[index] = values[i];
            colors[index + 1] = values[i + 1];
            colors[index + 2] = values[i + 2];
            colors[index + 3] = values[i + 3];
            if (++j == 4) {
                j = 0;
                i += 4;
            }
            index += stride;
        }
        this.notifyColorsUpdate();
        this._colorsDirty = false;
    };
    /**
     *
     */
    LineSubGeometry.prototype.dispose = function () {
        _super.prototype.dispose.call(this);
        this._startPositions = null;
        this._endPositions = null;
        this._thickness = null;
        this._startColors = null;
        this._endColors = null;
    };
    /**
     * @protected
     */
    LineSubGeometry.prototype.pInvalidateBounds = function () {
        if (this.parentGeometry)
            this.parentGeometry.iInvalidateBounds(this);
    };
    /**
     * Clones the current object
     * @return An exact duplicate of the current object.
     */
    LineSubGeometry.prototype.clone = function () {
        var clone = new LineSubGeometry();
        clone.updateIndices(this._pIndices.concat());
        clone.updatePositions(this._startPositions.concat(), this._endPositions.concat());
        clone.updateThickness(this._thickness.concat());
        clone.updatePositions(this._startPositions.concat(), this._endPositions.concat());
        return clone;
    };
    LineSubGeometry.prototype._pNotifyVerticesUpdate = function () {
        this._pStrideOffsetDirty = true;
        this.notifyPositionsUpdate();
        this.notifyThicknessUpdate();
        this.notifyColorsUpdate();
    };
    LineSubGeometry.prototype.notifyPositionsUpdate = function () {
        if (this._positionsDirty)
            return;
        this._positionsDirty = true;
        if (!this._positionsUpdated)
            this._positionsUpdated = new SubGeometryEvent(SubGeometryEvent.VERTICES_UPDATED, TriangleSubGeometry.POSITION_DATA);
        this.dispatchEvent(this._positionsUpdated);
    };
    LineSubGeometry.prototype.notifyThicknessUpdate = function () {
        if (this._thicknessDirty)
            return;
        this._thicknessDirty = true;
        if (!this._thicknessUpdated)
            this._thicknessUpdated = new SubGeometryEvent(SubGeometryEvent.VERTICES_UPDATED, LineSubGeometry.THICKNESS_DATA);
        this.dispatchEvent(this._thicknessUpdated);
    };
    LineSubGeometry.prototype.notifyColorsUpdate = function () {
        if (this._colorsDirty)
            return;
        this._colorsDirty = true;
        if (!this._colorUpdated)
            this._colorUpdated = new SubGeometryEvent(SubGeometryEvent.VERTICES_UPDATED, LineSubGeometry.COLOR_DATA);
        this.dispatchEvent(this._colorUpdated);
    };
    LineSubGeometry.VERTEX_DATA = "vertices";
    LineSubGeometry.START_POSITION_DATA = "startPositions";
    LineSubGeometry.END_POSITION_DATA = "endPositions";
    LineSubGeometry.THICKNESS_DATA = "thickness";
    LineSubGeometry.COLOR_DATA = "colors";
    //TODO - move these to StageGL
    LineSubGeometry.POSITION_FORMAT = "float3";
    LineSubGeometry.COLOR_FORMAT = "float4";
    LineSubGeometry.THICKNESS_FORMAT = "float1";
    return LineSubGeometry;
})(SubGeometryBase);
module.exports = LineSubGeometry;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImF3YXlqcy1kaXNwbGF5L2xpYi9iYXNlL0xpbmVTdWJHZW9tZXRyeS50cyJdLCJuYW1lcyI6WyJMaW5lU3ViR2VvbWV0cnkiLCJMaW5lU3ViR2VvbWV0cnkuY29uc3RydWN0b3IiLCJMaW5lU3ViR2VvbWV0cnkuX3BVcGRhdGVTdHJpZGVPZmZzZXQiLCJMaW5lU3ViR2VvbWV0cnkudmVydGljZXMiLCJMaW5lU3ViR2VvbWV0cnkuc3RhcnRQb3NpdGlvbnMiLCJMaW5lU3ViR2VvbWV0cnkuZW5kUG9zaXRpb25zIiwiTGluZVN1Ykdlb21ldHJ5LnRoaWNrbmVzcyIsIkxpbmVTdWJHZW9tZXRyeS5zdGFydENvbG9ycyIsIkxpbmVTdWJHZW9tZXRyeS5lbmRDb2xvcnMiLCJMaW5lU3ViR2VvbWV0cnkubnVtU2VnbWVudHMiLCJMaW5lU3ViR2VvbWV0cnkuZ2V0Qm91bmRpbmdQb3NpdGlvbnMiLCJMaW5lU3ViR2VvbWV0cnkudXBkYXRlUG9zaXRpb25zIiwiTGluZVN1Ykdlb21ldHJ5LnVwZGF0ZVRoaWNrbmVzcyIsIkxpbmVTdWJHZW9tZXRyeS51cGRhdGVDb2xvcnMiLCJMaW5lU3ViR2VvbWV0cnkuZGlzcG9zZSIsIkxpbmVTdWJHZW9tZXRyeS5wSW52YWxpZGF0ZUJvdW5kcyIsIkxpbmVTdWJHZW9tZXRyeS5jbG9uZSIsIkxpbmVTdWJHZW9tZXRyeS5fcE5vdGlmeVZlcnRpY2VzVXBkYXRlIiwiTGluZVN1Ykdlb21ldHJ5Lm5vdGlmeVBvc2l0aW9uc1VwZGF0ZSIsIkxpbmVTdWJHZW9tZXRyeS5ub3RpZnlUaGlja25lc3NVcGRhdGUiLCJMaW5lU3ViR2VvbWV0cnkubm90aWZ5Q29sb3JzVXBkYXRlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFFQSxJQUFPLFdBQVcsV0FBYyxxQ0FBcUMsQ0FBQyxDQUFDO0FBQ3ZFLElBQU8sZUFBZSxXQUFhLHlDQUF5QyxDQUFDLENBQUM7QUFDOUUsSUFBTyxtQkFBbUIsV0FBWSw2Q0FBNkMsQ0FBQyxDQUFDO0FBQ3JGLElBQU8s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QUNBLFVBQVVBLElBQUlBLElBQUlBLENBQUNBO1lBQzNCQSxJQUFJQSxDQUFDQSxVQUFVQSxHQUFHQSxJQUFJQSxLQUFLQSxDQUFTQSxJQUFJQSxDQUFDQSxDQUFDQTtRQUMzQ0EsSUFBSUEsQ0FBQ0EsRUFBRUEsQ0FBQ0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsVUFBVUEsQ0FBQ0EsTUFBTUEsSUFBSUEsSUFBSUEsQ0FBQ0E7WUFDdkNBLElBQUlBLENBQUNBLFVBQVVBLENBQUNBLE1BQU1BLEdBQUdBLElBQUlBLENBQUNBO1FBRS9CQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQTtRQUNOQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQTtRQUNOQSxLQUFLQSxHQUFHQSxJQUFJQSxDQUFDQSxTQUFTQSxDQUFDQSxlQUFlQSxDQUFDQSxtQkFBbUJBLENBQUNBLENBQUNBO1FBQzVEQSxNQUFNQSxHQUFHQSxJQUFJQSxDQUFDQSxTQUFTQSxDQUFDQSxlQUFlQSxDQUFDQSxtQkFBbUJBLENBQUNBLENBQUNBO1FBQzdEQSxTQUFTQSxHQUFHQSxJQUFJQSxDQUFDQSxVQUFVQSxDQUFDQTtRQUM1QkEsT0FBT0EsR0FBR0EsSUFBSUEsS0FBS0EsRUFBRUEsQ0FBQ0E7UUFFdEJBLE9BQU9BLENBQUNBLEdBQUdBLFdBQVdBLENBQUNBLE1BQU1BLEVBQUVBLENBQUNBO1lBQy9CQSxNQUFNQSxHQUFHQSxDQUFDQSxLQUFLQSxHQUFDQSxNQUFNQSxHQUFHQSxDQUFDQSxDQUFDQSxHQUFFQSxTQUFTQSxHQUFHQSxXQUFXQSxDQUFDQTtZQUNyREEsU0FBU0EsQ0FBQ0EsS0FBS0EsQ0FBQ0EsR0FBR0EsTUFBTUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFDN0JBLFNBQVNBLENBQUNBLEtBQUtBLEdBQUdBLENBQUNBLENBQUNBLEdBQUdBLE1BQU1BLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBLENBQUNBO1lBQ3JDQSxTQUFTQSxDQUFDQSxLQUFLQSxHQUFHQSxDQUFDQSxDQUFDQSxHQUFHQSxNQUFNQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUVyQ0EsTUFBTUEsR0FBR0EsQ0FBQ0EsS0FBS0EsR0FBQ0EsTUFBTUEsR0FBR0EsQ0FBQ0EsQ0FBQ0EsR0FBRUEsV0FBV0EsR0FBR0EsU0FBU0EsQ0FBQ0E7WUFDckRBLFNBQVNBLENBQUNBLEtBQUtBLEdBQUdBLENBQUNBLENBQUNBLEdBQUdBLE1BQU1BLENBQUNBLENBQUNBLENBQUNBLENBQUNBO1lBQ2pDQSxTQUFTQSxDQUFDQSxLQUFLQSxHQUFHQSxDQUFDQSxDQUFDQSxHQUFHQSxNQUFNQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUNyQ0EsU0FBU0EsQ0FBQ0EsS0FBS0EsR0FBR0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsTUFBTUEsQ0FBQ0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFFckNBLEVBQUVBLENBQUNBLENBQUNBLEVBQUVBLENBQUNBLElBQUlBLENBQUNBLENBQUNBLENBQUNBLENBQUNBO2dCQUNkQSxJQUFJQSxDQUFDQSxHQUFVQSxLQUFLQSxHQUFDQSxNQUFNQSxHQUFHQSxDQUFDQSxDQUFDQTtnQkFDaENBLE9BQU9BLENBQUNBLElBQUlBLENBQUNBLENBQUNBLEVBQUVBLENBQUNBLEdBQUdBLENBQUNBLEVBQUVBLENBQUNBLEdBQUdBLENBQUNBLEVBQUVBLENBQUNBLEdBQUdBLENBQUNBLEVBQUVBLENBQUNBLEdBQUdBLENBQUNBLEVBQUVBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBLENBQUNBO2dCQUNuREEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0E7Z0JBQ05BLENBQUNBLElBQUlBLENBQUNBLENBQUNBO1lBQ1JBLENBQUNBO1lBRURBLEtBQUtBLElBQUlBLE1BQU1BLENBQUNBO1FBQ2pCQSxDQUFDQTtRQUVEQSxJQUFJQSxDQUFDQSxhQUFhQSxDQUFDQSxPQUFPQSxDQUFDQSxDQUFDQTtRQUU1QkEsSUFBSUEsQ0FBQ0EsaUJBQWlCQSxFQUFFQSxDQUFDQTtRQUV6QkEsSUFBSUEsQ0FBQ0Es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LEVBQUVBLENBQUNBLENBQUNBLENBQUNBLElBQUlBLENBQUNBLGFBQWFBLENBQUNBO1lBQ3ZCQSxJQUFJQSxDQUFDQSxhQUFhQSxHQUFHQSxJQUFJQSxnQkFBZ0JBLENBQUNBLGdCQUFnQkEsQ0FBQ0EsZ0JBQWdCQSxFQUFFQSxlQUFlQSxDQUFDQSxVQUFVQSxDQUFDQSxDQUFDQTtRQUUxR0EsSUFBSUEsQ0FBQ0EsYUFBYUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsYUFBYUEsQ0FBQ0EsQ0FBQ0E7SUFDeENBLENBQUNBO0lBeGFhcEIsMkJBQVdBLEdBQVVBLFVBQVVBLENBQUNBO0lBQ2hDQSxtQ0FBbUJBLEdBQVVBLGdCQUFnQkEsQ0FBQ0E7SUFDOUNBLGlDQUFpQkEsR0FBVUEsY0FBY0EsQ0FBQ0E7SUFDMUNBLDhCQUFjQSxHQUFVQSxXQUFXQSxDQUFDQTtJQUNwQ0EsMEJBQVVBLEdBQVVBLFFBQVFBLENBQUNBO0lBRTNDQSw4QkFBOEJBO0lBQ2hCQSwrQkFBZUEsR0FBVUEsUUFBUUEsQ0FBQ0E7SUFDbENBLDRCQUFZQSxHQUFVQSxRQUFRQSxDQUFDQTtJQUMvQkEsZ0NBQWdCQSxHQUFVQSxRQUFRQSxDQUFDQTtJQWdhbERBLHNCQUFDQTtBQUFEQSxDQTNhQSxBQTJhQ0EsRUEzYTZCLGVBQWUsRUEyYTVDO0FBRUQsQUFBeUIsaUJBQWhCLGVBQWUsQ0FBQyIsImZpbGUiOiJiYXNlL0xpbmVTdWJHZW9tZXRyeS5qcyIsInNvdXJjZVJvb3QiOiIuLi8iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgRGlzcGxheU9iamVjdENvbnRhaW5lclx0PSByZXF1aXJlKFwiYXdheWpzLWRpc3BsYXkvbGliL2NvbnRhaW5lcnMvRGlzcGxheU9iamVjdENvbnRhaW5lclwiKTtcclxuaW1wb3J0IEdlb21ldHJ5XHRcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1kaXNwbGF5L2xpYi9iYXNlL0dlb21ldHJ5XCIpO1xyXG5pbXBvcnQgTGluZVN1Yk1lc2hcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1kaXNwbGF5L2xpYi9iYXNlL0xpbmVTdWJNZXNoXCIpO1xyXG5pbXBvcnQgU3ViR2VvbWV0cnlCYXNlXHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLWRpc3BsYXkvbGliL2Jhc2UvU3ViR2VvbWV0cnlCYXNlXCIpO1xyXG5pbXBvcnQgVHJpYW5nbGVTdWJHZW9tZXRyeVx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtZGlzcGxheS9saWIvYmFzZS9UcmlhbmdsZVN1Ykdlb21ldHJ5XCIpO1xyXG5pbXBvcnQgU3ViR2VvbWV0cnlFdmVudFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1kaXNwbGF5L2xpYi9ldmVudHMvU3ViR2VvbWV0cnlFdmVudFwiKTtcclxuXHJcbi8qKlxyXG4gKiBAY2xhc3MgTGluZVN1Ykdlb21ldHJ5XHJcbiAqL1xyXG5jbGFzcyBMaW5lU3ViR2VvbWV0cnkgZXh0ZW5kcyBTdWJHZW9tZXRyeUJhc2Vcclxue1xyXG5cdHB1YmxpYyBzdGF0aWMgVkVSVEVYX0RBVEE6c3RyaW5nID0gXCJ2ZXJ0aWNlc1wiO1xyXG5cdHB1YmxpYyBzdGF0aWMgU1RBUlRfUE9TSVRJT05fREFUQTpzdHJpbmcgPSBcInN0YXJ0UG9zaXRpb25zXCI7XHJcblx0cHVibGljIHN0YXRpYyBFTkRfUE9TSVRJT05fREFUQTpzdHJpbmcgPSBcImVuZFBvc2l0aW9uc1wiO1xyXG5cdHB1YmxpYyBzdGF0aWMgVEhJQ0tORVNTX0RBVEE6c3RyaW5nID0gXCJ0aGlja25lc3NcIjtcclxuXHRwdWJsaWMgc3RhdGljIENPTE9SX0RBVEE6c3RyaW5nID0gXCJjb2xvcnNcIjtcclxuXHJcblx0Ly9UT0RPIC0gbW92ZSB0aGVzZSB0byBTdGFnZUdMXHJcblx0cHVibGljIHN0YXRpYyBQT1NJVElPTl9GT1JNQVQ6c3RyaW5nID0gXCJmbG9hdDNcIjtcclxuXHRwdWJsaWMgc3RhdGljIENPTE9SX0ZPUk1BVDpzdHJpbmcgPSBcImZsb2F0NFwiO1xyXG5cdHB1YmxpYyBzdGF0aWMgVEhJQ0tORVNTX0ZPUk1BVDpzdHJpbmcgPSBcImZsb2F0MVwiO1xyXG5cclxuXHRwcml2YXRlIF9wb3NpdGlvbnNEaXJ0eTpib29sZWFuID0gdHJ1ZTtcclxuXHRwcml2YXRlIF9ib3VuZGluZ1Bvc2l0aW9uRGlydHkgPSB0cnVlO1xyXG5cdHByaXZhdGUgX3RoaWNrbmVzc0RpcnR5OmJvb2xlYW4gPSB0cnVlO1xyXG5cdHByaXZhdGUgX2NvbG9yc0RpcnR5OmJvb2xlYW4gPSB0cnVlO1xyXG5cclxuXHRwcml2YXRlIF9zdGFydFBvc2l0aW9uczpBcnJheTxudW1iZXI+O1xyXG5cdHByaXZhdGUgX2VuZFBvc2l0aW9uczpBcnJheTxudW1iZXI+O1xyXG5cdHByaXZhdGUgX2JvdW5kaW5nUG9zaXRpb25zOkFycmF5PG51bWJlcj5cclxuXHRwcml2YXRlIF90aGlja25lc3M6QXJyYXk8bnVtYmVyPjtcclxuXHRwcml2YXRlIF9zdGFydENvbG9yczpBcnJheTxudW1iZXI+O1xyXG5cdHByaXZhdGUgX2VuZENvbG9yczpBcnJheTxudW1iZXI+O1xyXG5cclxuXHRwcml2YXRlIF9udW1TZWdtZW50czpudW1iZXI7XHJcblxyXG5cdHByaXZhdGUgX3Bvc2l0aW9uc1VwZGF0ZWQ6U3ViR2VvbWV0cnlFdmVudDtcclxuXHRwcml2YXRlIF90aGlja25lc3NVcGRhdGVkOlN1Ykdlb21ldHJ5RXZlbnQ7XHJcblx0cHJpdmF0ZSBfY29sb3JVcGRhdGVkOlN1Ykdlb21ldHJ5RXZlbnQ7XHJcblxyXG5cdHB1YmxpYyBfcFVwZGF0ZVN0cmlkZU9mZnNldCgpXHJcblx0e1xyXG5cdFx0dGhpcy5fcE9mZnNldFtMaW5lU3ViR2VvbWV0cnkuVkVSVEVYX0RBVEFdID0gMDtcclxuXHJcblx0XHR2YXIgc3RyaWRlOm51bWJlciA9IDA7XHJcblx0XHR0aGlzLl9wT2Zmc2V0W0xpbmVTdWJHZW9tZXRyeS5TVEFSVF9QT1NJVElPTl9EQVRBXSA9IHN0cmlkZTtcclxuXHRcdHN0cmlkZSArPSAzO1xyXG5cclxuXHRcdHRoaXMuX3BPZmZzZXRbTGluZVN1Ykdlb21ldHJ5LkVORF9QT1NJVElPTl9EQVRBXSA9IHN0cmlkZTtcclxuXHRcdHN0cmlkZSArPSAzO1xyXG5cclxuXHRcdHRoaXMuX3BPZmZzZXRbTGluZVN1Ykdlb21ldHJ5LlRISUNLTkVTU19EQVRBXSA9IHN0cmlkZTtcclxuXHRcdHN0cmlkZSArPSAxO1xyXG5cclxuXHRcdHRoaXMuX3BPZmZzZXRbTGluZVN1Ykdlb21ldHJ5LkNPTE9SX0RBVEFdID0gc3RyaWRlO1xyXG5cdFx0c3RyaWRlICs9IDQ7XHJcblxyXG5cdFx0dGhpcy5fcFN0cmlkZVtMaW5lU3ViR2VvbWV0cnkuVkVSVEVYX0RBVEFdID0gc3RyaWRlO1xyXG5cdFx0dGhpcy5fcFN0cmlkZVtMaW5lU3ViR2VvbWV0cnkuU1RBUlRfUE9TSVRJT05fREFUQV0gPSBzdHJpZGU7XHJcblx0XHR0aGlzLl9wU3RyaWRlW0xpbmVTdWJHZW9tZXRyeS5FTkRfUE9TSVRJT05fREFUQV0gPSBzdHJpZGU7XHJcblx0XHR0aGlzLl9wU3RyaWRlW0xpbmVTdWJHZW9tZXRyeS5USElDS05FU1NfREFUQV0gPSBzdHJpZGU7XHJcblx0XHR0aGlzLl9wU3RyaWRlW0xpbmVTdWJHZW9tZXRyeS5DT0xPUl9EQVRBXSA9IHN0cmlkZTtcclxuXHJcblx0XHR2YXIgbGVuOm51bWJlciA9IHRoaXMuX3BOdW1WZXJ0aWNlcypzdHJpZGU7XHJcblxyXG5cdFx0aWYgKHRoaXMuX3BWZXJ0aWNlcyA9PSBudWxsKVxyXG5cdFx0XHR0aGlzLl9wVmVydGljZXMgPSBuZXcgQXJyYXk8bnVtYmVyPihsZW4pO1xyXG5cdFx0ZWxzZSBpZiAodGhpcy5fcFZlcnRpY2VzLmxlbmd0aCAhPSBsZW4pXHJcblx0XHRcdHRoaXMuX3BWZXJ0aWNlcy5sZW5ndGggPSBsZW47XHJcblxyXG5cdFx0dGhpcy5fcFN0cmlkZU9mZnNldERpcnR5ID0gZmFsc2U7XHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQgKiBcclxuXHQgKi9cclxuXHRwdWJsaWMgZ2V0IHZlcnRpY2VzKCk6QXJyYXk8bnVtYmVyPlxyXG5cdHtcclxuXHRcdGlmICh0aGlzLl9wb3NpdGlvbnNEaXJ0eSlcclxuXHRcdFx0dGhpcy51cGRhdGVQb3NpdGlvbnModGhpcy5fc3RhcnRQb3NpdGlvbnMsIHRoaXMuX2VuZFBvc2l0aW9ucyk7XHJcblxyXG5cdFx0aWYgKHRoaXMuX3RoaWNrbmVzc0RpcnR5KVxyXG5cdFx0XHR0aGlzLnVwZGF0ZVRoaWNrbmVzcyh0aGlzLl90aGlja25lc3MpO1xyXG5cclxuXHRcdGlmICh0aGlzLl9jb2xvcnNEaXJ0eSlcclxuXHRcdFx0dGhpcy51cGRhdGVDb2xvcnModGhpcy5fc3RhcnRDb2xvcnMsIHRoaXMuX2VuZENvbG9ycyk7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXMuX3BWZXJ0aWNlcztcclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqXHJcblx0ICovXHJcblx0cHVibGljIGdldCBzdGFydFBvc2l0aW9ucygpOkFycmF5PG51bWJlcj5cclxuXHR7XHJcblx0XHRpZiAodGhpcy5fcG9zaXRpb25zRGlydHkpXHJcblx0XHRcdHRoaXMudXBkYXRlUG9zaXRpb25zKHRoaXMuX3N0YXJ0UG9zaXRpb25zLCB0aGlzLl9lbmRQb3NpdGlvbnMpO1xyXG5cclxuXHRcdHJldHVybiB0aGlzLl9zdGFydFBvc2l0aW9ucztcclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqXHJcblx0ICovXHJcblx0cHVibGljIGdldCBlbmRQb3NpdGlvbnMoKTpBcnJheTxudW1iZXI+XHJcblx0e1xyXG5cdFx0aWYgKHRoaXMuX3Bvc2l0aW9uc0RpcnR5KVxyXG5cdFx0XHR0aGlzLnVwZGF0ZVBvc2l0aW9ucyh0aGlzLl9zdGFydFBvc2l0aW9ucywgdGhpcy5fZW5kUG9zaXRpb25zKTtcclxuXHJcblx0XHRyZXR1cm4gdGhpcy5fZW5kUG9zaXRpb25zO1xyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0ICpcclxuXHQgKi9cclxuXHRwdWJsaWMgZ2V0IHRoaWNrbmVzcygpOkFycmF5PG51bWJlcj5cclxuXHR7XHJcblx0XHRpZiAodGhpcy5fdGhpY2tuZXNzRGlydHkpXHJcblx0XHRcdHRoaXMudXBkYXRlVGhpY2tuZXNzKHRoaXMuX3RoaWNrbmVzcyk7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXMuX3RoaWNrbmVzcztcclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqXHJcblx0ICovXHJcblx0cHVibGljIGdldCBzdGFydENvbG9ycygpOkFycmF5PG51bWJlcj5cclxuXHR7XHJcblx0XHRpZiAodGhpcy5fY29sb3JzRGlydHkpXHJcblx0XHRcdHRoaXMudXBkYXRlQ29sb3JzKHRoaXMuX3N0YXJ0Q29sb3JzLCB0aGlzLl9lbmRDb2xvcnMpO1xyXG5cclxuXHRcdHJldHVybiB0aGlzLl9zdGFydENvbG9ycztcclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqXHJcblx0ICovXHJcblx0cHVibGljIGdldCBlbmRDb2xvcnMoKTpBcnJheTxudW1iZXI+XHJcblx0e1xyXG5cdFx0aWYgKHRoaXMuX2NvbG9yc0RpcnR5KVxyXG5cdFx0XHR0aGlzLnVwZGF0ZUNvbG9ycyh0aGlzLl9zdGFydENvbG9ycywgdGhpcy5fZW5kQ29sb3JzKTtcclxuXHJcblx0XHRyZXR1cm4gdGhpcy5fZW5kQ29sb3JzO1xyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0ICogVGhlIHRvdGFsIGFtb3VudCBvZiBzZWdtZW50cyBpbiB0aGUgVHJpYW5nbGVTdWJHZW9tZXRyeS5cclxuXHQgKi9cclxuXHRwdWJsaWMgZ2V0IG51bVNlZ21lbnRzKCk6bnVtYmVyXHJcblx0e1xyXG5cdFx0cmV0dXJuIHRoaXMuX251bVNlZ21lbnRzO1xyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0ICpcclxuXHQgKi9cclxuXHRjb25zdHJ1Y3RvcigpXHJcblx0e1xyXG5cdFx0c3VwZXIodHJ1ZSk7XHJcblxyXG5cdFx0dGhpcy5fcFN1Yk1lc2hDbGFzcyA9IExpbmVTdWJNZXNoO1xyXG5cdH1cclxuXHJcblx0cHVibGljIGdldEJvdW5kaW5nUG9zaXRpb25zKCk6QXJyYXk8bnVtYmVyPlxyXG5cdHtcclxuXHRcdGlmICh0aGlzLl9ib3VuZGluZ1Bvc2l0aW9uRGlydHkpXHJcblx0XHRcdHRoaXMuX2JvdW5kaW5nUG9zaXRpb25zID0gdGhpcy5zdGFydFBvc2l0aW9ucy5jb25jYXQodGhpcy5lbmRQb3NpdGlvbnMpO1xyXG5cclxuXHRcdHJldHVybiB0aGlzLl9ib3VuZGluZ1Bvc2l0aW9ucztcclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqXHJcblx0ICovXHJcblx0cHVibGljIHVwZGF0ZVBvc2l0aW9ucyhzdGFydFZhbHVlczpBcnJheTxudW1iZXI+LCBlbmRWYWx1ZXM6QXJyYXk8bnVtYmVyPilcclxuXHR7XHJcblx0XHR2YXIgaTpudW1iZXI7XHJcblx0XHR2YXIgajpudW1iZXI7XHJcblx0XHR2YXIgdmFsdWVzOkFycmF5PG51bWJlcj5cclxuXHRcdHZhciBpbmRleDpudW1iZXI7XHJcblx0XHR2YXIgc3RyaWRlOm51bWJlcjtcclxuXHRcdHZhciBwb3NpdGlvbnM6QXJyYXk8bnVtYmVyPjtcclxuXHRcdHZhciBpbmRpY2VzOkFycmF5PG51bWJlcj47XHJcblxyXG5cdFx0dGhpcy5fc3RhcnRQb3NpdGlvbnMgPSBzdGFydFZhbHVlcztcclxuXHJcblx0XHRpZiAodGhpcy5fc3RhcnRQb3NpdGlvbnMgPT0gbnVsbClcclxuXHRcdFx0dGhpcy5fc3RhcnRQb3NpdGlvbnMgPSBuZXcgQXJyYXk8bnVtYmVyPigpO1xyXG5cclxuXHRcdHRoaXMuX2VuZFBvc2l0aW9ucyA9IGVuZFZhbHVlcztcclxuXHJcblx0XHRpZiAodGhpcy5fZW5kUG9zaXRpb25zID09IG51bGwpXHJcblx0XHRcdHRoaXMuX2VuZFBvc2l0aW9ucyA9IG5ldyBBcnJheTxudW1iZXI+KCk7XHJcblxyXG5cdFx0dGhpcy5fYm91bmRpbmdQb3NpdGlvbkRpcnR5ID0gdHJ1ZTtcclxuXHJcblx0XHR0aGlzLl9udW1TZWdtZW50cyA9IHRoaXMuX3N0YXJ0UG9zaXRpb25zLmxlbmd0aC8zO1xyXG5cclxuXHRcdHRoaXMuX3BOdW1WZXJ0aWNlcyA9IHRoaXMuX251bVNlZ21lbnRzKjQ7XHJcblxyXG5cdFx0dmFyIGxlblY6bnVtYmVyID0gdGhpcy5fcE51bVZlcnRpY2VzKnRoaXMuZ2V0U3RyaWRlKExpbmVTdWJHZW9tZXRyeS5WRVJURVhfREFUQSk7XHJcblxyXG5cdFx0aWYgKHRoaXMuX3BWZXJ0aWNlcyA9PSBudWxsKVxyXG5cdFx0XHR0aGlzLl9wVmVydGljZXMgPSBuZXcgQXJyYXk8bnVtYmVyPihsZW5WKTtcclxuXHRcdGVsc2UgaWYgKHRoaXMuX3BWZXJ0aWNlcy5sZW5ndGggIT0gbGVuVilcclxuXHRcdFx0dGhpcy5fcFZlcnRpY2VzLmxlbmd0aCA9IGxlblY7XHJcblxyXG5cdFx0aSA9IDA7XHJcblx0XHRqID0gMDtcclxuXHRcdGluZGV4ID0gdGhpcy5nZXRPZmZzZXQoTGluZVN1Ykdlb21ldHJ5LlNUQVJUX1BPU0lUSU9OX0RBVEEpO1xyXG5cdFx0c3RyaWRlID0gdGhpcy5nZXRTdHJpZGUoTGluZVN1Ykdlb21ldHJ5LlNUQVJUX1BPU0lUSU9OX0RBVEEpO1xyXG5cdFx0cG9zaXRpb25zID0gdGhpcy5fcFZlcnRpY2VzO1xyXG5cdFx0aW5kaWNlcyA9IG5ldyBBcnJheSgpO1xyXG5cclxuXHRcdHdoaWxlIChpIDwgc3RhcnRWYWx1ZXMubGVuZ3RoKSB7XHJcblx0XHRcdHZhbHVlcyA9IChpbmRleC9zdHJpZGUgJiAxKT8gZW5kVmFsdWVzIDogc3RhcnRWYWx1ZXM7XHJcblx0XHRcdHBvc2l0aW9uc1tpbmRleF0gPSB2YWx1ZXNbaV07XHJcblx0XHRcdHBvc2l0aW9uc1tpbmRleCArIDFdID0gdmFsdWVzW2kgKyAxXTtcclxuXHRcdFx0cG9zaXRpb25zW2luZGV4ICsgMl0gPSB2YWx1ZXNbaSArIDJdO1xyXG5cclxuXHRcdFx0dmFsdWVzID0gKGluZGV4L3N0cmlkZSAmIDEpPyBzdGFydFZhbHVlcyA6IGVuZFZhbHVlcztcclxuXHRcdFx0cG9zaXRpb25zW2luZGV4ICsgM10gPSB2YWx1ZXNbaV07XHJcblx0XHRcdHBvc2l0aW9uc1tpbmRleCArIDRdID0gdmFsdWVzW2kgKyAxXTtcclxuXHRcdFx0cG9zaXRpb25zW2luZGV4ICsgNV0gPSB2YWx1ZXNbaSArIDJdO1xyXG5cclxuXHRcdFx0aWYgKCsraiA9PSA0KSB7XHJcblx0XHRcdFx0dmFyIG86bnVtYmVyID0gaW5kZXgvc3RyaWRlIC0gMztcclxuXHRcdFx0XHRpbmRpY2VzLnB1c2gobywgbyArIDEsIG8gKyAyLCBvICsgMywgbyArIDIsIG8gKyAxKTtcclxuXHRcdFx0XHRqID0gMDtcclxuXHRcdFx0XHRpICs9IDM7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGluZGV4ICs9IHN0cmlkZTtcclxuXHRcdH1cclxuXHJcblx0XHR0aGlzLnVwZGF0ZUluZGljZXMoaW5kaWNlcyk7XHJcblxyXG5cdFx0dGhpcy5wSW52YWxpZGF0ZUJvdW5kcygpO1xyXG5cclxuXHRcdHRoaXMubm90aWZ5UG9zaXRpb25zVXBkYXRlKCk7XHJcblxyXG5cdFx0dGhpcy5fcG9zaXRpb25zRGlydHkgPSBmYWxzZTtcclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqIFVwZGF0ZXMgdGhlIHRoaWNrbmVzcy5cclxuXHQgKi9cclxuXHRwdWJsaWMgdXBkYXRlVGhpY2tuZXNzKHZhbHVlczpBcnJheTxudW1iZXI+KVxyXG5cdHtcclxuXHRcdHZhciBpOm51bWJlcjtcclxuXHRcdHZhciBqOm51bWJlcjtcclxuXHRcdHZhciBpbmRleDpudW1iZXI7XHJcblx0XHR2YXIgb2Zmc2V0Om51bWJlcjtcclxuXHRcdHZhciBzdHJpZGU6bnVtYmVyO1xyXG5cdFx0dmFyIHRoaWNrbmVzczpBcnJheTxudW1iZXI+O1xyXG5cclxuXHRcdHRoaXMuX3RoaWNrbmVzcyA9IHZhbHVlcztcclxuXHJcblx0XHRpZiAodmFsdWVzICE9IG51bGwpIHtcclxuXHRcdFx0aSA9IDA7XHJcblx0XHRcdGogPSAwO1xyXG5cdFx0XHRvZmZzZXQgPSB0aGlzLmdldE9mZnNldChMaW5lU3ViR2VvbWV0cnkuVEhJQ0tORVNTX0RBVEEpO1xyXG5cdFx0XHRzdHJpZGUgPSB0aGlzLmdldFN0cmlkZShMaW5lU3ViR2VvbWV0cnkuVEhJQ0tORVNTX0RBVEEpO1xyXG5cdFx0XHR0aGlja25lc3MgPSB0aGlzLl9wVmVydGljZXM7XHJcblxyXG5cdFx0XHRpbmRleCA9IG9mZnNldFxyXG5cdFx0XHR3aGlsZSAoaSA8IHZhbHVlcy5sZW5ndGgpIHtcclxuXHRcdFx0XHR0aGlja25lc3NbaW5kZXhdID0gKE1hdGguZmxvb3IoMC41KihpbmRleCAtIG9mZnNldCkvc3RyaWRlICsgMC41KSAmIDEpPyAtdmFsdWVzW2ldIDogdmFsdWVzW2ldO1xyXG5cclxuXHRcdFx0XHRpZiAoKytqID09IDQpIHtcclxuXHRcdFx0XHRcdGogPSAwO1xyXG5cdFx0XHRcdFx0aSsrO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRpbmRleCArPSBzdHJpZGU7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHR0aGlzLm5vdGlmeVRoaWNrbmVzc1VwZGF0ZSgpO1xyXG5cclxuXHRcdHRoaXMuX3RoaWNrbmVzc0RpcnR5ID0gZmFsc2U7XHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQgKlxyXG5cdCAqL1xyXG5cdHB1YmxpYyB1cGRhdGVDb2xvcnMoc3RhcnRWYWx1ZXM6QXJyYXk8bnVtYmVyPiwgZW5kVmFsdWVzOkFycmF5PG51bWJlcj4pXHJcblx0e1xyXG5cdFx0dmFyIGk6bnVtYmVyO1xyXG5cdFx0dmFyIGo6bnVtYmVyO1xyXG5cdFx0dmFyIHZhbHVlczpBcnJheTxudW1iZXI+XHJcblx0XHR2YXIgaW5kZXg6bnVtYmVyO1xyXG5cdFx0dmFyIG9mZnNldDpudW1iZXI7XHJcblx0XHR2YXIgc3RyaWRlOm51bWJlcjtcclxuXHRcdHZhciBjb2xvcnM6QXJyYXk8bnVtYmVyPjtcclxuXHJcblx0XHR0aGlzLl9zdGFydENvbG9ycyA9IHN0YXJ0VmFsdWVzO1xyXG5cclxuXHRcdHRoaXMuX2VuZENvbG9ycyA9IGVuZFZhbHVlcztcclxuXHJcblx0XHQvL2RlZmF1bHQgdG8gd2hpdGVcclxuXHRcdGlmICh0aGlzLl9zdGFydENvbG9ycyA9PSBudWxsKSB7XHJcblx0XHRcdHRoaXMuX3N0YXJ0Q29sb3JzID0gbmV3IEFycmF5KHRoaXMuX251bVNlZ21lbnRzKjQpO1xyXG5cclxuXHRcdFx0aSA9IDA7XHJcblx0XHRcdHdoaWxlIChpIDwgdGhpcy5fc3RhcnRDb2xvcnMubGVuZ3RoKVxyXG5cdFx0XHRcdHRoaXMuX3N0YXJ0Q29sb3JzW2krK10gPSAxO1xyXG5cdFx0fVxyXG5cclxuXHRcdGlmICh0aGlzLl9lbmRDb2xvcnMgPT0gbnVsbCkge1xyXG5cdFx0XHR0aGlzLl9lbmRDb2xvcnMgPSBuZXcgQXJyYXkodGhpcy5fbnVtU2VnbWVudHMqNCk7XHJcblxyXG5cdFx0XHRpID0gMDtcclxuXHRcdFx0d2hpbGUgKGkgPCB0aGlzLl9lbmRDb2xvcnMubGVuZ3RoKVxyXG5cdFx0XHRcdHRoaXMuX2VuZENvbG9yc1tpKytdID0gMTtcclxuXHRcdH1cclxuXHJcblx0XHRpID0gMDtcclxuXHRcdGogPSAwO1xyXG5cdFx0b2Zmc2V0ID0gdGhpcy5nZXRPZmZzZXQoTGluZVN1Ykdlb21ldHJ5LkNPTE9SX0RBVEEpO1xyXG5cdFx0c3RyaWRlID0gdGhpcy5nZXRTdHJpZGUoTGluZVN1Ykdlb21ldHJ5LkNPTE9SX0RBVEEpO1xyXG5cdFx0Y29sb3JzID0gdGhpcy5fcFZlcnRpY2VzO1xyXG5cclxuXHRcdGluZGV4ID0gb2Zmc2V0O1xyXG5cclxuXHRcdHdoaWxlIChpIDwgdGhpcy5fc3RhcnRDb2xvcnMubGVuZ3RoKSB7XHJcblx0XHRcdHZhbHVlcyA9ICgoaW5kZXggLSBvZmZzZXQpL3N0cmlkZSAmIDEpPyB0aGlzLl9lbmRDb2xvcnMgOiB0aGlzLl9zdGFydENvbG9ycztcclxuXHRcdFx0Y29sb3JzW2luZGV4XSA9IHZhbHVlc1tpXTtcclxuXHRcdFx0Y29sb3JzW2luZGV4ICsgMV0gPSB2YWx1ZXNbaSArIDFdO1xyXG5cdFx0XHRjb2xvcnNbaW5kZXggKyAyXSA9IHZhbHVlc1tpICsgMl07XHJcblx0XHRcdGNvbG9yc1tpbmRleCArIDNdID0gdmFsdWVzW2kgKyAzXTtcclxuXHJcblx0XHRcdGlmICgrK2ogPT0gNCkge1xyXG5cdFx0XHRcdGogPSAwO1xyXG5cdFx0XHRcdGkgKz0gNDtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0aW5kZXggKz0gc3RyaWRlO1xyXG5cdFx0fVxyXG5cclxuXHRcdHRoaXMubm90aWZ5Q29sb3JzVXBkYXRlKCk7XHJcblxyXG5cdFx0dGhpcy5fY29sb3JzRGlydHkgPSBmYWxzZTtcclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqXHJcblx0ICovXHJcblx0cHVibGljIGRpc3Bvc2UoKVxyXG5cdHtcclxuXHRcdHN1cGVyLmRpc3Bvc2UoKTtcclxuXHJcblx0XHR0aGlzLl9zdGFydFBvc2l0aW9ucyA9IG51bGw7XHJcblx0XHR0aGlzLl9lbmRQb3NpdGlvbnMgPSBudWxsO1xyXG5cdFx0dGhpcy5fdGhpY2tuZXNzID0gbnVsbDtcclxuXHRcdHRoaXMuX3N0YXJ0Q29sb3JzID0gbnVsbDtcclxuXHRcdHRoaXMuX2VuZENvbG9ycyA9IG51bGw7XHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQgKiBAcHJvdGVjdGVkXHJcblx0ICovXHJcblx0cHVibGljIHBJbnZhbGlkYXRlQm91bmRzKClcclxuXHR7XHJcblx0XHRpZiAodGhpcy5wYXJlbnRHZW9tZXRyeSlcclxuXHRcdFx0dGhpcy5wYXJlbnRHZW9tZXRyeS5pSW52YWxpZGF0ZUJvdW5kcyh0aGlzKTtcclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqIFRoZSBHZW9tZXRyeSBvYmplY3QgdGhhdCAnb3ducycgdGhpcyBUcmlhbmdsZVN1Ykdlb21ldHJ5IG9iamVjdC5cclxuXHQgKlxyXG5cdCAqIEBwcml2YXRlXHJcblx0ICovXHJcblx0cHVibGljIHBhcmVudEdlb21ldHJ5Okdlb21ldHJ5O1xyXG5cclxuXHQvKipcclxuXHQgKiBDbG9uZXMgdGhlIGN1cnJlbnQgb2JqZWN0XHJcblx0ICogQHJldHVybiBBbiBleGFjdCBkdXBsaWNhdGUgb2YgdGhlIGN1cnJlbnQgb2JqZWN0LlxyXG5cdCAqL1xyXG5cdHB1YmxpYyBjbG9uZSgpOkxpbmVTdWJHZW9tZXRyeVxyXG5cdHtcclxuXHRcdHZhciBjbG9uZTpMaW5lU3ViR2VvbWV0cnkgPSBuZXcgTGluZVN1Ykdlb21ldHJ5KCk7XHJcblx0XHRjbG9uZS51cGRhdGVJbmRpY2VzKHRoaXMuX3BJbmRpY2VzLmNvbmNhdCgpKTtcclxuXHRcdGNsb25lLnVwZGF0ZVBvc2l0aW9ucyh0aGlzLl9zdGFydFBvc2l0aW9ucy5jb25jYXQoKSwgdGhpcy5fZW5kUG9zaXRpb25zLmNvbmNhdCgpKTtcclxuXHRcdGNsb25lLnVwZGF0ZVRoaWNrbmVzcyh0aGlzLl90aGlja25lc3MuY29uY2F0KCkpO1xyXG5cdFx0Y2xvbmUudXBkYXRlUG9zaXRpb25zKHRoaXMuX3N0YXJ0UG9zaXRpb25zLmNvbmNhdCgpLCB0aGlzLl9lbmRQb3NpdGlvbnMuY29uY2F0KCkpO1xyXG5cclxuXHRcdHJldHVybiBjbG9uZTtcclxuXHR9XHJcblxyXG5cdHB1YmxpYyBfcE5vdGlmeVZlcnRpY2VzVXBkYXRlKClcclxuXHR7XHJcblx0XHR0aGlzLl9wU3RyaWRlT2Zmc2V0RGlydHkgPSB0cnVlO1xyXG5cclxuXHRcdHRoaXMubm90aWZ5UG9zaXRpb25zVXBkYXRlKCk7XHJcblx0XHR0aGlzLm5vdGlmeVRoaWNrbmVzc1VwZGF0ZSgpO1xyXG5cdFx0dGhpcy5ub3RpZnlDb2xvcnNVcGRhdGUoKTtcclxuXHR9XHJcblxyXG5cdHByaXZhdGUgbm90aWZ5UG9zaXRpb25zVXBkYXRlKClcclxuXHR7XHJcblx0XHRpZiAodGhpcy5fcG9zaXRpb25zRGlydHkpXHJcblx0XHRcdHJldHVybjtcclxuXHJcblx0XHR0aGlzLl9wb3NpdGlvbnNEaXJ0eSA9IHRydWU7XHJcblxyXG5cdFx0aWYgKCF0aGlzLl9wb3NpdGlvbnNVcGRhdGVkKVxyXG5cdFx0XHR0aGlzLl9wb3NpdGlvbnNVcGRhdGVkID0gbmV3IFN1Ykdlb21ldHJ5RXZlbnQoU3ViR2VvbWV0cnlFdmVudC5WRVJUSUNFU19VUERBVEVELCBUcmlhbmdsZVN1Ykdlb21ldHJ5LlBPU0lUSU9OX0RBVEEpO1xyXG5cclxuXHRcdHRoaXMuZGlzcGF0Y2hFdmVudCh0aGlzLl9wb3NpdGlvbnNVcGRhdGVkKTtcclxuXHR9XHJcblxyXG5cdHByaXZhdGUgbm90aWZ5VGhpY2tuZXNzVXBkYXRlKClcclxuXHR7XHJcblx0XHRpZiAodGhpcy5fdGhpY2tuZXNzRGlydHkpXHJcblx0XHRcdHJldHVybjtcclxuXHJcblx0XHR0aGlzLl90aGlja25lc3NEaXJ0eSA9IHRydWU7XHJcblxyXG5cdFx0aWYgKCF0aGlzLl90aGlja25lc3NVcGRhdGVkKVxyXG5cdFx0XHR0aGlzLl90aGlja25lc3NVcGRhdGVkID0gbmV3IFN1Ykdlb21ldHJ5RXZlbnQoU3ViR2VvbWV0cnlFdmVudC5WRVJUSUNFU19VUERBVEVELCBMaW5lU3ViR2VvbWV0cnkuVEhJQ0tORVNTX0RBVEEpO1xyXG5cclxuXHRcdHRoaXMuZGlzcGF0Y2hFdmVudCh0aGlzLl90aGlja25lc3NVcGRhdGVkKTtcclxuXHR9XHJcblxyXG5cdHByaXZhdGUgbm90aWZ5Q29sb3JzVXBkYXRlKClcclxuXHR7XHJcblx0XHRpZiAodGhpcy5fY29sb3JzRGlydHkpXHJcblx0XHRcdHJldHVybjtcclxuXHJcblx0XHR0aGlzLl9jb2xvcnNEaXJ0eSA9IHRydWU7XHJcblxyXG5cdFx0aWYgKCF0aGlzLl9jb2xvclVwZGF0ZWQpXHJcblx0XHRcdHRoaXMuX2NvbG9yVXBkYXRlZCA9IG5ldyBTdWJHZW9tZXRyeUV2ZW50KFN1Ykdlb21ldHJ5RXZlbnQuVkVSVElDRVNfVVBEQVRFRCwgTGluZVN1Ykdlb21ldHJ5LkNPTE9SX0RBVEEpO1xyXG5cclxuXHRcdHRoaXMuZGlzcGF0Y2hFdmVudCh0aGlzLl9jb2xvclVwZGF0ZWQpO1xyXG5cdH1cclxufVxyXG5cclxuZXhwb3J0ID0gTGluZVN1Ykdlb21ldHJ5OyJdfQ==