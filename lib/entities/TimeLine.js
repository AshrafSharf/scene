var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var AssetType = require("awayjs-core/lib/library/AssetType");
var DisplayObjectContainer = require("awayjs-display/lib/containers/DisplayObjectContainer");
/**
 * Timeline is a DisplayObjectContainer, that can control the animation of a list of TimeLineObjects.
 * For now, the focus of Development is on animating the new type of 2D-Geometry exported from FlashPro,
 * but there is no reason that this cannot be used to animate any type of object, that implements IAsset.
**/
var TimeLine = (function (_super) {
    __extends(TimeLine, _super);
    function TimeLine() {
        _super.call(this);
        this._duration = 0;
        this._timeLineObjs = new Array();
        this._frames = new Array();
        this._currentFrame = 0;
        this._speed = 1.0;
        this._isplaying = false;
        this._fps = 25;
        this._time = 0;
        this._duration = 0;
        this._playMode = 1;
    }
    Object.defineProperty(TimeLine.prototype, "speed", {
        get: function () {
            return this._speed;
        },
        set: function (newSpeed) {
            this._speed = newSpeed;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TimeLine.prototype, "fps", {
        get: function () {
            return this._fps;
        },
        set: function (newFps) {
            this._fps = newFps;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TimeLine.prototype, "assetType", {
        get: function () {
            return AssetType.TIMELINE;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * should be called right before the call to away3d-render.
     */
    TimeLine.prototype.update = function (timeDelta, jumpingToFrame) {
        if (jumpingToFrame === void 0) { jumpingToFrame = false; }
        var tlo;
        // only update if playing, or if not init before, or if jumping to frame
        if ((this._isplaying) || (!this._isInit) || (jumpingToFrame)) {
            // multiply the timeDelta with the speed (can be negative)
            // update the this._time accordingly
            var timeDelta = timeDelta * this._speed;
            this._time += timeDelta;
            while (this._time > this._duration) {
                if (this._playMode == 0) {
                    this._time = this._duration;
                    this.stop();
                }
                else if (this._playMode == 1) {
                    this._time -= this._duration;
                }
            }
            while (this._time < 0) {
                if (this._playMode == 0) {
                    this._time = 0;
                    this.stop();
                }
                else if (this._playMode == 1) {
                    this._time += this._duration;
                }
            }
            // now we know the exact time of the animation that we want to display.
            // next we need to decide which Frame needs to be displayed. (index in Array)
            // this should always be currentFrame, or currentFrame++
            // each frame has startTime and EndTime, so we can easily decide
            var frameCnt = 0;
            var curFrame;
            var foundFrame = false;
            while (frameCnt < this._frames.length) {
                curFrame = this._frames[this._currentFrame];
                //console.log("searchForFrame=="+this._time+" startTime= "+curFrame.startTime+" endTime = "+curFrame.endTime);
                if ((this._time >= curFrame.startTime) && (this._time <= curFrame.endTime)) {
                    foundFrame = true;
                    frameCnt = this._frames.length;
                }
                else {
                    curFrame.makeDirty(); // make sure the frame gets executed next time it should show
                    if (this._speed < 0) {
                        this._currentFrame--;
                        if (this._currentFrame < 0) {
                            this._currentFrame = this._frames.length - 1;
                        }
                    }
                    else {
                        this._currentFrame++;
                        if (this._currentFrame >= this._frames.length) {
                            this._currentFrame = 0;
                        }
                    }
                }
                frameCnt++;
            }
            //console.log("foundframe="+foundFrame+" thistime= "+this._time+" frameIDX = "+this._currentFrame);
            // if foundFrame is true, curFrame is the frame to display.
            if (foundFrame) {
                //console.log("Frame dirty="+curFrame.isDirty);
                if (curFrame.isDirty) {
                    //console.log("Reset isOnStage value");
                    // reset the "isOnStage" state for all the objects
                    var commandSet = 1; // 1 = execute normal playback commands
                    if (this._speed < 0) {
                        commandSet = 2; //2 = execute reversed playback commands
                    }
                    // if we are jumping Frames, we need to hide all objects and fully init
                    //if(jumpingToFrame) {
                    commandSet = 0; //0 = execute full init frame commands
                    for (tlo = 0; tlo < this._timeLineObjs.length; tlo++) {
                        if (this._timeLineObjs[tlo].isActive) {
                            this._timeLineObjs[tlo].deactivate();
                        }
                    }
                    // }
                    //todo: use the correct set of commands (for now we always use set 1)
                    curFrame.executeCommands(1, this._time, this._speed);
                    // now we have all objects on stage, we can execute the frame script for this frame
                    this.executeFrameScript(curFrame.script);
                }
                else {
                }
            }
            this._isInit = true;
        }
        for (tlo = 0; tlo < this._timeLineObjs.length; tlo++) {
            if (this._timeLineObjs[tlo].isActive) {
                if (this._timeLineObjs[tlo].asset.assetType == AssetType.TIMELINE) {
                    this._timeLineObjs[tlo].asset.update(timeDelta);
                }
            }
        }
    };
    /**
     * Add a new TimeLineFrame.
     */
    TimeLine.prototype.addFrame = function (newFrame) {
        this._duration += newFrame.duration;
        this._frames.push(newFrame);
    };
    Object.defineProperty(TimeLine.prototype, "duration", {
        get: function () {
            return this._duration;
        },
        set: function (newDuration) {
            this._duration = newDuration;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * This is called inside the TimeLineFrame.execute() function.
     */
    TimeLine.prototype.executeFrameScript = function (frameScript) {
        // this function should interpret the framescript.
        // the timeline object offer functions getObjectByInstanceName(instanceName:string)
        // a nested movieClip like "mainWindow.clip1" could be accessed like this:
        // getObjectByInstanceName("mainWindow").getObjectByInstanceName("clip1")
        // the AssetLibrary can be used as equivalent for the flash-library.
        // it already has options to access library-assets by name, so i think we can work with that.
    };
    /**
     * Starts playback of animation from current position
     */
    TimeLine.prototype.start = function () {
        this._isplaying = true;
        this.update(0);
    };
    /**
     * Stop playback of animation and hold current position
     */
    TimeLine.prototype.stop = function () {
        this._isplaying = false; // no need to call any other stuff
    };
    /**
     * Classic gotoAndPlay like as3 api - set frame by frame-number.
     */
    TimeLine.prototype.gotoAndPlay = function (frameNumber) {
        this._time = frameNumber * (1000 / this._fps);
        this._isplaying = true;
        this.update(0, true);
    };
    /**
     * Classic gotoAndStop as3 api - set frame by frame-number.
     */
    TimeLine.prototype.gotoAndStop = function (frameNumber) {
        this._time = frameNumber * (1000 / this._fps);
        this.update(0, true);
        this._isplaying = false; //stop playback again
    };
    /**
     * gotoAndPlay - set frame by frame-label.
     */
    TimeLine.prototype.gotoAndPlayLabel = function (frameLabel) {
        var frameNumber = -1;
        for (var i = 0; i < this._frames.length; i++) {
            for (var fl = 0; fl < this._frames[i].framelabels.length; fl++) {
                if (this._frames[i].framelabels[fl] == frameLabel) {
                    fl = this._frames[i].framelabels.length;
                    frameNumber = i;
                    i = this._frames.length;
                }
            }
        }
        if (frameNumber >= 0) {
            this._time = frameNumber * (1000 / this._fps);
            this._isplaying = true;
            this.update(0, true);
        }
    };
    /**
     * gotoAndStop - set frame by frame-label.
     */
    TimeLine.prototype.gotoAndStopLabel = function (frameLabel) {
        var frameNumber = -1;
        for (var i = 0; i < this._frames.length; i++) {
            for (var fl = 0; fl < this._frames[i].framelabels.length; fl++) {
                if (this._frames[i].framelabels[fl] == frameLabel) {
                    fl = this._frames[i].framelabels.length;
                    frameNumber = i;
                    i = this._frames.length;
                }
            }
        }
        if (frameNumber >= 0) {
            this._time = frameNumber * (1000 / this._fps);
            this.update(0, true);
            this._isplaying = false;
        }
    };
    /**
     * gotoAndPlay - set time in ms.
     */
    TimeLine.prototype.gotoAndPlayTime = function (time) {
        this._time = time;
        this._isplaying = true;
        this.update(0, true);
    };
    /**
     * gotoAndStop - set time in ms.
     */
    TimeLine.prototype.gotoAndStopTime = function (time) {
        this._time = time;
        this.update(0, true);
        this._isplaying = false; //stop playback again
    };
    TimeLine.prototype.addTimeLineObject = function (newTlObj, isDisplayObj) {
        if (isDisplayObj === void 0) { isDisplayObj = true; }
        if (isDisplayObj) {
            this.addChild(newTlObj.asset);
        }
        newTlObj.deactivate();
        this._timeLineObjs.push(newTlObj);
    };
    TimeLine.prototype.getTimeLineObjectByID = function (objID) {
        for (var tlo = 0; tlo < this._timeLineObjs.length; tlo++) {
            if (this._timeLineObjs[tlo].objID == objID) {
                return this._timeLineObjs[tlo];
            }
        }
        return undefined;
    };
    TimeLine.prototype.getObjectByInstanceName = function (instanceName) {
        for (var tlo = 0; tlo < this._timeLineObjs.length; tlo++) {
            if (this._timeLineObjs[tlo].asset.name == instanceName) {
                return this._timeLineObjs[tlo].asset;
            }
        }
    };
    return TimeLine;
})(DisplayObjectContainer);
module.exports = TimeLine;

//# sourceMappingURL=data:application/json;base64,