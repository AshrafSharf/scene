/**
 * TimeLineObject represents a unique object that is (or will be) used by a TimeLine.
 *  A TimeLineObject basically consists of an objID, and an IAsset.
 *  The FrameCommands hold references to these TimeLineObjects, so they can access and modify the IAssets

 */
var InterpolationObject = (function () {
    function InterpolationObject(type, startValue, endValue, startTime, endTime) {
        this._type = type;
        this._startValue = startValue;
        this._startTime = startTime;
        this._endValue = endValue;
        this._duration = endTime - startTime;
    }
    InterpolationObject.prototype.getState = function (time, speed) {
        // todo: handle reverse playback
        if (time < this._startTime * speed) {
            return;
        }
        if (time > this._endTime * speed) {
            return;
        }
        if (this._type == 0) {
            //interpolate number
            return (this._startValue + (((time - this._startTime) * (this._duration * speed)) * (this._endValue - this._startValue)));
        }
        if (this._type == 1) {
        }
        if (this._type == 2) {
        }
        if (this._type == 3) {
        }
        return;
    };
    return InterpolationObject;
})();
module.exports = InterpolationObject;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImF3YXlqcy1kaXNwbGF5L2xpYi9lbnRpdGllcy90aW1lbGluZWRhdGEvaW50ZXJwb2xhdGlvbm9iamVjdC50cyJdLCJuYW1lcyI6WyJJbnRlcnBvbGF0aW9uT2JqZWN0IiwiSW50ZXJwb2xhdGlvbk9iamVjdC5jb25zdHJ1Y3RvciIsIkludGVycG9sYXRpb25PYmplY3QuZ2V0U3RhdGUiXSwibWFwcGluZ3MiOiJBQUFBLEFBTUE7Ozs7O0dBREc7SUFDRyxtQkFBbUI7SUFTckJBLFNBVEVBLG1CQUFtQkEsQ0FTVEEsSUFBV0EsRUFBRUEsVUFBVUEsRUFBRUEsUUFBUUEsRUFBRUEsU0FBZ0JBLEVBQUNBLE9BQWNBO1FBRTFFQyxJQUFJQSxDQUFDQSxLQUFLQSxHQUFDQSxJQUFJQSxDQUFDQTtRQUNoQkEsSUFBSUEsQ0FBQ0EsV0FBV0EsR0FBQ0EsVUFBVUEsQ0FBQ0E7UUFDNUJBLElBQUlBLENBQUNBLFVBQVVBLEdBQUNBLFNBQVNBLENBQUNBO1FBQzFCQSxJQUFJQSxDQUFDQSxTQUFTQSxHQUFDQSxRQUFRQSxDQUFDQTtRQUN4QkEsSUFBSUEsQ0FBQ0EsU0FBU0EsR0FBQ0EsT0FBT0EsR0FBQ0EsU0FBU0EsQ0FBQ0E7SUFDckNBLENBQUNBO0lBRU1ELHNDQUFRQSxHQUFmQSxVQUFnQkEsSUFBV0EsRUFBRUEsS0FBWUE7UUFDckNFLEFBQ0FBLGdDQURnQ0E7UUFDaENBLEVBQUVBLENBQUNBLENBQUNBLElBQUlBLEdBQUdBLElBQUlBLENBQUNBLFVBQVVBLEdBQUdBLEtBQUtBLENBQUNBLENBQUNBLENBQUNBO1lBQ2pDQSxNQUFNQSxDQUFDQTtRQUNYQSxDQUFDQTtRQUNEQSxFQUFFQSxDQUFDQSxDQUFDQSxJQUFJQSxHQUFHQSxJQUFJQSxDQUFDQSxRQUFRQSxHQUFHQSxLQUFLQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUMvQkEsTUFBTUEsQ0FBQ0E7UUFDWEEsQ0FBQ0E7UUFDREEsRUFBRUEsQ0FBQ0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsS0FBS0EsSUFBSUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFDbEJBLEFBQ0FBLG9CQURvQkE7WUFDcEJBLE1BQU1BLENBQUNBLENBQUNBLElBQUlBLENBQUNBLFdBQVdBLEdBQUdBLENBQUNBLENBQUNBLENBQUNBLElBQUlBLEdBQUdBLElBQUlBLENBQUNBLFVBQVVBLENBQUNBLEdBQUdBLENBQUNBLElBQUlBLENBQUNBLFNBQVNBLEdBQUdBLEtBQUtBLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLElBQUlBLENBQUNBLFNBQVNBLEdBQUdBLElBQUlBLENBQUNBLFdBQVdBLENBQUNBLENBQUNBLENBQUNBLENBQUNBO1FBQzlIQSxDQUFDQTtRQUNEQSxFQUFFQSxDQUFDQSxDQUFDQSxJQUFJQSxDQUFDQSxLQUFLQSxJQUFJQSxDQUFDQSxDQUFDQSxDQUFBQSxDQUFDQTtRQUVyQkEsQ0FBQ0E7UUFDREEsRUFBRUEsQ0FBQ0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsS0FBS0EsSUFBSUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7UUFFdEJBLENBQUNBO1FBQ0RBLEVBQUVBLENBQUNBLENBQUNBLElBQUlBLENBQUNBLEtBQUtBLElBQUlBLENBQUNBLENBQUNBLENBQUNBLENBQUNBO1FBRXRCQSxDQUFDQTtRQUNEQSxNQUFNQSxDQUFDQTtJQUNYQSxDQUFDQTtJQUNMRiwwQkFBQ0E7QUFBREEsQ0F6Q0EsQUF5Q0NBLElBQUE7QUFFRCxBQUE2QixpQkFBcEIsbUJBQW1CLENBQUMiLCJmaWxlIjoiZW50aXRpZXMvdGltZWxpbmVkYXRhL0ludGVycG9sYXRpb25PYmplY3QuanMiLCJzb3VyY2VSb290IjoiLi4vIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIFRpbWVMaW5lT2JqZWN0IHJlcHJlc2VudHMgYSB1bmlxdWUgb2JqZWN0IHRoYXQgaXMgKG9yIHdpbGwgYmUpIHVzZWQgYnkgYSBUaW1lTGluZS5cclxuICogIEEgVGltZUxpbmVPYmplY3QgYmFzaWNhbGx5IGNvbnNpc3RzIG9mIGFuIG9iaklELCBhbmQgYW4gSUFzc2V0LlxyXG4gKiAgVGhlIEZyYW1lQ29tbWFuZHMgaG9sZCByZWZlcmVuY2VzIHRvIHRoZXNlIFRpbWVMaW5lT2JqZWN0cywgc28gdGhleSBjYW4gYWNjZXNzIGFuZCBtb2RpZnkgdGhlIElBc3NldHNcclxuXHJcbiAqL1xyXG5jbGFzcyBJbnRlcnBvbGF0aW9uT2JqZWN0XHJcbntcclxuICAgIHByaXZhdGUgX3R5cGU7Ly8wOm51bWJlciAsIDE6IG1hdHJpeDNELCAyOiBtYXRyaXgyRCwgMzpDb2xvclRyYW5zZm9ybSxcclxuICAgIHByaXZhdGUgX3N0YXJ0VmFsdWU7XHJcbiAgICBwcml2YXRlIF9zdGFydFRpbWU6bnVtYmVyO1xyXG4gICAgcHJpdmF0ZSBfZW5kVmFsdWU7XHJcbiAgICBwcml2YXRlIF9lbmRUaW1lOm51bWJlcjtcclxuICAgIHByaXZhdGUgX2R1cmF0aW9uOm51bWJlcjtcclxuXHJcbiAgICBjb25zdHJ1Y3Rvcih0eXBlOm51bWJlciwgc3RhcnRWYWx1ZSwgZW5kVmFsdWUsIHN0YXJ0VGltZTpudW1iZXIsZW5kVGltZTpudW1iZXIpXHJcbiAgICB7XHJcbiAgICAgICAgdGhpcy5fdHlwZT10eXBlO1xyXG4gICAgICAgIHRoaXMuX3N0YXJ0VmFsdWU9c3RhcnRWYWx1ZTtcclxuICAgICAgICB0aGlzLl9zdGFydFRpbWU9c3RhcnRUaW1lO1xyXG4gICAgICAgIHRoaXMuX2VuZFZhbHVlPWVuZFZhbHVlO1xyXG4gICAgICAgIHRoaXMuX2R1cmF0aW9uPWVuZFRpbWUtc3RhcnRUaW1lO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXRTdGF0ZSh0aW1lOm51bWJlciwgc3BlZWQ6bnVtYmVyKSB7XHJcbiAgICAgICAgLy8gdG9kbzogaGFuZGxlIHJldmVyc2UgcGxheWJhY2tcclxuICAgICAgICBpZiAodGltZSA8IHRoaXMuX3N0YXJ0VGltZSAqIHNwZWVkKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRpbWUgPiB0aGlzLl9lbmRUaW1lICogc3BlZWQpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5fdHlwZSA9PSAwKSB7XHJcbiAgICAgICAgICAgIC8vaW50ZXJwb2xhdGUgbnVtYmVyXHJcbiAgICAgICAgICAgIHJldHVybiAodGhpcy5fc3RhcnRWYWx1ZSArICgoKHRpbWUgLSB0aGlzLl9zdGFydFRpbWUpICogKHRoaXMuX2R1cmF0aW9uICogc3BlZWQpKSAqICh0aGlzLl9lbmRWYWx1ZSAtIHRoaXMuX3N0YXJ0VmFsdWUpKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLl90eXBlID09IDEpe1xyXG4gICAgICAgICAgICAvL3RvZG86IGludGVycG9sYXRlIG1hdHJpeDNEXHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLl90eXBlID09IDIpIHtcclxuICAgICAgICAgICAgLy90b2RvOiBpbnRlcnBvbGF0ZSBNYXRyaXgzRCwgYnV0IGhhbmRsZSBpdCBhcyAyRCBvYmplY3QgKGRvIG5vdCB0b3VjaCB6LnBvc2l0aW9uKVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5fdHlwZSA9PSAzKSB7XHJcbiAgICAgICAgICAgIC8vdG9kbzogaW50ZXJwb2xhdGUgQ29sb3JUcmFuc2Zvcm1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgPSBJbnRlcnBvbGF0aW9uT2JqZWN0O1xyXG4iXX0=