var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var CommandPropsBase = require("awayjs-display/lib/entities/timelinedata/CommandPropsBase");
var CommandPropsDisplayObject = (function (_super) {
    __extends(CommandPropsDisplayObject, _super);
    function CommandPropsDisplayObject() {
        _super.call(this);
        this._doDisplaymatrix = 0;
        this._doColorTransform = 0;
        this._doInstanceName = false;
        this._doDepth = false;
        this._doFilters = false;
        this._doDepthClip = false;
        this._doBlendMode = false;
    }
    CommandPropsDisplayObject.prototype.setBlendMode = function (blendMode) {
        this._blendMode = blendMode;
        this._doBlendMode = true;
    };
    CommandPropsDisplayObject.prototype.setClipDepth = function (clipDepth) {
        this._depthClip = clipDepth;
        this._doDepthClip = true;
    };
    //todo:handle filters
    CommandPropsDisplayObject.prototype.setFilter = function (filter) {
        this._filter = filter;
        this._doFilters = true;
    };
    CommandPropsDisplayObject.prototype.setDepth = function (depth) {
        this._depth = depth;
        this._doDepth = true;
    };
    CommandPropsDisplayObject.prototype.setDisplaymatrixInterpolate = function (interpolate) {
        this._displayMatrixInterpolate = interpolate;
        this._doDisplaymatrix = 2;
    };
    CommandPropsDisplayObject.prototype.setDisplaymatrix = function (displayMatrix) {
        this._displayMatrix = displayMatrix;
        this._doDisplaymatrix = 1;
    };
    CommandPropsDisplayObject.prototype.setColorTransform = function (colorTransform) {
        this._colorTransform = colorTransform;
        this._doColorTransform = 1;
    };
    CommandPropsDisplayObject.prototype.setColorTranformInterpolate = function (interpolate) {
        this._colorTransformInterpolate = interpolate;
        this._doColorTransform = 2;
    };
    CommandPropsDisplayObject.prototype.setInstancename = function (instanceName) {
        this._instanceName = instanceName;
        this._doInstanceName = true;
    };
    CommandPropsDisplayObject.prototype.deactivate = function (thisObj) {
        thisObj.visible = false;
    };
    CommandPropsDisplayObject.prototype.apply = function (thisObj, time, speed) {
        thisObj.visible = true;
        if (this._doDisplaymatrix == 1) {
            thisObj.transform.matrix3D = this._displayMatrix;
        }
        else if (this._doDisplaymatrix == 2) {
        }
        //todo: check how to apply colortransform (i guess this will be materials of meshes)
        //maybe we must give displayobjectcontainer the functions to pass ColorTransform to children
        if (this._doColorTransform == 1) {
        }
        else if (this._doColorTransform == 2) {
        }
        if (this._doInstanceName) {
            thisObj.name = this._instanceName;
        }
        if (this._doDepth) {
        }
        if (this._doBlendMode) {
        }
        if (this._doDepthClip) {
        }
        if (this._doFilters) {
        }
    };
    return CommandPropsDisplayObject;
})(CommandPropsBase);
module.exports = CommandPropsDisplayObject;

//# sourceMappingURL=data:application/json;base64,