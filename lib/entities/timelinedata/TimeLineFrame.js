/**
 * TimelineFrame holds 3 list of FrameCommands
 *  - list1 _frameCommands should be  executed when playing the timeline (previous Frame was played)
 *  - list2 _frameCommandsReverse should be executed when playing the timeline reversed (previous Frame was played)
 *  - list3 _frameCommandsInit should be executed when jumping to a frame, so we need to fully init the frame
 *
 *  Addionial TimelineFrame properties are:
 *  - script - can be executed, after the frameCommands have been executed
 *  - list of FrameLabels, and list of corresponding labelTypes
 *  - duration-value (1 frame is not necessary 1 frame long)
 *  - startTime and endTime are needed internally when deciding what frame to display
 */
var TimeLineFrame = (function () {
    function TimeLineFrame() {
        this._isDirty = true;
        this._script = "";
        this._duration = 1; //use millisecs for duration ? or frames ?
        this._frameCommands = new Array();
        this._frameCommandsReverse = new Array();
        this._frameCommandsInit = new Array();
        this._framelabels = new Array();
        this._labelTypes = new Array();
    }
    TimeLineFrame.prototype.addCommand = function (newCommand) {
        // make the timeline available for the commands
        this._frameCommands.push(newCommand);
    };
    TimeLineFrame.prototype.addCommandReverse = function (newCommand) {
        // make the timeline available for the commands
        this._frameCommandsReverse.push(newCommand);
    };
    TimeLineFrame.prototype.addCommandInit = function (newCommand) {
        // make the timeline available for the commands
        this._frameCommandsInit.push(newCommand);
    };
    TimeLineFrame.prototype.addLabel = function (label, type) {
        this._framelabels.push(label);
        this._labelTypes.push(type);
    };
    Object.defineProperty(TimeLineFrame.prototype, "framelabels", {
        get: function () {
            return this._framelabels;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TimeLineFrame.prototype, "labelTypes", {
        get: function () {
            return this._labelTypes;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TimeLineFrame.prototype, "script", {
        get: function () {
            return this._script;
        },
        enumerable: true,
        configurable: true
    });
    TimeLineFrame.prototype.addToScript = function (newscript) {
        this._script += newscript;
    };
    Object.defineProperty(TimeLineFrame.prototype, "isDirty", {
        get: function () {
            return this._isDirty;
        },
        enumerable: true,
        configurable: true
    });
    TimeLineFrame.prototype.makeDirty = function () {
        this._isDirty = true;
    };
    Object.defineProperty(TimeLineFrame.prototype, "startTime", {
        get: function () {
            return this._startTime;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TimeLineFrame.prototype, "duration", {
        get: function () {
            return this._duration;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TimeLineFrame.prototype, "endTime", {
        get: function () {
            return this._endTime;
        },
        enumerable: true,
        configurable: true
    });
    TimeLineFrame.prototype.setFrameTime = function (startTime, duration) {
        this._startTime = startTime;
        this._duration = duration;
        this._endTime = startTime + duration;
    };
    /**
     * executes the set of Commands for this Frame.
     * Each Frame has 3 sets of commands:
     *  0 = init frame commands = the frame must be init as if previous frame was not played
     *  1 = play frame commands = the previous frame was played
     *  2 = playReverse Commands = the next frame was played
     */
    TimeLineFrame.prototype.executeCommands = function (commandSet, time, speed) {
        // execute all the  frame commands for this frame
        if (commandSet == 0) {
            for (var i = 0; i < this._frameCommandsInit.length; i++) {
                this._frameCommandsInit[i].execute(time, speed);
            }
        }
        else if (commandSet == 1) {
            for (var i = 0; i < this._frameCommands.length; i++) {
                this._frameCommands[i].execute(time, speed);
            }
        }
        else if (commandSet == 2) {
            for (var i = 0; i < this._frameCommandsReverse.length; i++) {
                this._frameCommandsReverse[i].execute(time, speed);
            }
        }
        // mark this frame as not dirty, so it will not get executed again, unless TimeLine makes it dirty again.
        // whenever a Frame is entered, the Timeline should mark the previous frame as dirty.
        this._isDirty = false;
    };
    return TimeLineFrame;
})();
module.exports = TimeLineFrame;

//# sourceMappingURL=data:application/json;base64,