import { AttributesBuffer } from "@awayjs/core/lib/attributes/AttributesBuffer";
import { AttributesView } from "@awayjs/core/lib/attributes/AttributesView";
import { Short2Attributes } from "@awayjs/core/lib/attributes/Short2Attributes";
import { Short3Attributes } from "@awayjs/core/lib/attributes/Short3Attributes";
import { Float3Attributes } from "@awayjs/core/lib/attributes/Float3Attributes";
import { Float4Attributes } from "@awayjs/core/lib/attributes/Float4Attributes";
import { Byte4Attributes } from "@awayjs/core/lib/attributes/Byte4Attributes";
import { Matrix3D } from "@awayjs/core/lib/geom/Matrix3D";
import { Vector3D } from "@awayjs/core/lib/geom/Vector3D";
import { Box } from "@awayjs/core/lib/geom/Box";
import { Sphere } from "@awayjs/core/lib/geom/Sphere";
import { TriangleElements } from "../graphics/TriangleElements";
export declare class ElementsUtils {
    private static tempFloat32x4;
    private static LIMIT_VERTS;
    private static LIMIT_INDICES;
    private static _indexSwap;
    static generateFaceNormals(indexAttributes: Short3Attributes, positionAttributes: AttributesView, faceNormalAttributes: Float4Attributes, count: number, offset?: number): Float4Attributes;
    static generateNormals(indexAttributes: Short3Attributes, faceNormalAttributes: Float4Attributes, normalAttributes: Float3Attributes, concatenatedBuffer: AttributesBuffer): Float3Attributes;
    static generateFaceTangents(indexAttributes: Short3Attributes, positionAttributes: AttributesView, uvAttributes: AttributesView, faceTangentAttributes: Float4Attributes, count: number, offset?: number, useFaceWeights?: boolean): Float4Attributes;
    static generateTangents(indexAttributes: Short3Attributes, faceTangentAttributes: Float3Attributes, faceNormalAttributes: Float4Attributes, tangentAttributes: Float3Attributes, concatenatedBuffer: AttributesBuffer): Float3Attributes;
    static generateColors(indexAttributes: Short3Attributes, colorAttributes: Byte4Attributes, concatenatedBuffer: AttributesBuffer, count: number, offset?: number): Byte4Attributes;
    static scale(scaleA: number, scaleB: number, scaleC: number, output: AttributesView, count: number, offset?: number): void;
    static applyTransformation(transform: Matrix3D, positionAttributes: AttributesView, normalAttributes: Float3Attributes, tangentAttributes: Float3Attributes, count: number, offset?: number): void;
    static getSubIndices(indexAttributes: Short2Attributes, numVertices: number, indexMappings: Array<number>, indexOffset?: number): AttributesBuffer;
    static getSubIndices(indexAttributes: Short3Attributes, numVertices: number, indexMappings: Array<number>, indexOffset?: number): AttributesBuffer;
    static getSubVertices(vertexBuffer: AttributesBuffer, indexMappings: Array<number>): AttributesBuffer;
    static hitTestTriangleElements(x: number, y: number, z: number, box: Box, triangleElements: TriangleElements, count: number, offset?: number): boolean;
    static getTriangleGraphicsBoxBounds(positionAttributes: AttributesView, output: Box, count: number, offset?: number): Box;
    static getTriangleGraphicsSphereBounds(positionAttributes: AttributesView, center: Vector3D, output: Sphere, count: number, offset?: number): Sphere;
}
