var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var Matrix3D = require("awayjs-core/lib/geom/Matrix3D");
var FreeMatrixProjection = require("awayjs-core/lib/projections/FreeMatrixProjection");
var Camera = require("awayjs-display/lib/entities/Camera");
var ShadowMapperBase = require("awayjs-display/lib/materials/shadowmappers/ShadowMapperBase");
var DirectionalShadowMapper = (function (_super) {
    __extends(DirectionalShadowMapper, _super);
    function DirectionalShadowMapper() {
        _super.call(this);
        this._pLightOffset = 10000;
        this._pSnap = 64;
        this._pCullPlanes = [];
        this._pOverallDepthProjection = new FreeMatrixProjection();
        this._pOverallDepthCamera = new Camera(this._pOverallDepthProjection);
        this._pLocalFrustum = [];
        this._pMatrix = new Matrix3D();
    }
    Object.defineProperty(DirectionalShadowMapper.prototype, "snap", {
        get: function () {
            return this._pSnap;
        },
        set: function (value) {
            this._pSnap = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DirectionalShadowMapper.prototype, "lightOffset", {
        get: function () {
            return this._pLightOffset;
        },
        set: function (value) {
            this._pLightOffset = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DirectionalShadowMapper.prototype, "iDepthProjection", {
        //@arcane
        get: function () {
            return this._pOverallDepthCamera.viewProjection;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DirectionalShadowMapper.prototype, "depth", {
        //@arcane
        get: function () {
            return this._pMaxZ - this._pMinZ;
        },
        enumerable: true,
        configurable: true
    });
    //@override
    DirectionalShadowMapper.prototype.pDrawDepthMap = function (target, scene, renderer) {
        this._pCasterCollector.camera = this._pOverallDepthCamera;
        this._pCasterCollector.cullPlanes = this._pCullPlanes;
        this._pCasterCollector.clear();
        scene.traversePartitions(this._pCasterCollector);
        renderer._iRender(this._pCasterCollector, target);
    };
    //@protected
    DirectionalShadowMapper.prototype.pUpdateCullPlanes = function (viewCamera) {
        var lightFrustumPlanes = this._pOverallDepthCamera.frustumPlanes;
        var viewFrustumPlanes = viewCamera.frustumPlanes;
        this._pCullPlanes.length = 4;
        this._pCullPlanes[0] = lightFrustumPlanes[0];
        this._pCullPlanes[1] = lightFrustumPlanes[1];
        this._pCullPlanes[2] = lightFrustumPlanes[2];
        this._pCullPlanes[3] = lightFrustumPlanes[3];
        var light = this._pLight;
        var dir = light.sceneDirection;
        var dirX = dir.x;
        var dirY = dir.y;
        var dirZ = dir.z;
        var j = 4;
        for (var i = 0; i < 6; ++i) {
            var plane = viewFrustumPlanes[i];
            if (plane.a * dirX + plane.b * dirY + plane.c * dirZ < 0)
                this._pCullPlanes[j++] = plane;
        }
    };
    //@override
    DirectionalShadowMapper.prototype.pUpdateDepthProjection = function (viewCamera) {
        this.pUpdateProjectionFromFrustumCorners(viewCamera, viewCamera.projection.frustumCorners, this._pMatrix);
        this._pOverallDepthProjection.matrix = this._pMatrix;
        this.pUpdateCullPlanes(viewCamera);
    };
    DirectionalShadowMapper.prototype.pUpdateProjectionFromFrustumCorners = function (viewCamera, corners, matrix) {
        var raw = new Array();
        var dir;
        var x, y, z;
        var minX, minY;
        var maxX, maxY;
        var i;
        var light = this._pLight;
        dir = light.sceneDirection;
        this._pOverallDepthCamera.transform.matrix3D = this._pLight.sceneTransform;
        x = Math.floor((viewCamera.x - dir.x * this._pLightOffset) / this._pSnap) * this._pSnap;
        y = Math.floor((viewCamera.y - dir.y * this._pLightOffset) / this._pSnap) * this._pSnap;
        z = Math.floor((viewCamera.z - dir.z * this._pLightOffset) / this._pSnap) * this._pSnap;
        this._pOverallDepthCamera.x = x;
        this._pOverallDepthCamera.y = y;
        this._pOverallDepthCamera.z = z;
        this._pMatrix.copyFrom(this._pOverallDepthCamera.inverseSceneTransform);
        this._pMatrix.prepend(viewCamera.sceneTransform);
        this._pMatrix.transformVectors(corners, this._pLocalFrustum);
        minX = maxX = this._pLocalFrustum[0];
        minY = maxY = this._pLocalFrustum[1];
        this._pMaxZ = this._pLocalFrustum[2];
        i = 3;
        while (i < 24) {
            x = this._pLocalFrustum[i];
            y = this._pLocalFrustum[i + 1];
            z = this._pLocalFrustum[i + 2];
            if (x < minX)
                minX = x;
            if (x > maxX)
                maxX = x;
            if (y < minY)
                minY = y;
            if (y > maxY)
                maxY = y;
            if (z > this._pMaxZ)
                this._pMaxZ = z;
            i += 3;
        }
        this._pMinZ = 1;
        var w = maxX - minX;
        var h = maxY - minY;
        var d = 1 / (this._pMaxZ - this._pMinZ);
        if (minX < 0)
            minX -= this._pSnap; // because int() rounds up for < 0
        if (minY < 0)
            minY -= this._pSnap;
        minX = Math.floor(minX / this._pSnap) * this._pSnap;
        minY = Math.floor(minY / this._pSnap) * this._pSnap;
        var snap2 = 2 * this._pSnap;
        w = Math.floor(w / snap2 + 2) * snap2;
        h = Math.floor(h / snap2 + 2) * snap2;
        maxX = minX + w;
        maxY = minY + h;
        w = 1 / w;
        h = 1 / h;
        raw[0] = 2 * w;
        raw[5] = 2 * h;
        raw[10] = d;
        raw[12] = -(maxX + minX) * w;
        raw[13] = -(maxY + minY) * h;
        raw[14] = -this._pMinZ * d;
        raw[15] = 1;
        raw[1] = raw[2] = raw[3] = raw[4] = raw[6] = raw[7] = raw[8] = raw[9] = raw[11] = 0;
        matrix.copyRawDataFrom(raw);
    };
    return DirectionalShadowMapper;
})(ShadowMapperBase);
module.exports = DirectionalShadowMapper;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImF3YXlqcy1kaXNwbGF5L2xpYi9tYXRlcmlhbHMvc2hhZG93bWFwcGVycy9EaXJlY3Rpb25hbFNoYWRvd01hcHBlci50cyJdLCJuYW1lcyI6WyJEaXJlY3Rpb25hbFNoYWRvd01hcHBlciIsIkRpcmVjdGlvbmFsU2hhZG93TWFwcGVyLmNvbnN0cnVjdG9yIiwiRGlyZWN0aW9uYWxTaGFkb3dNYXBwZXIuc25hcCIsIkRpcmVjdGlvbmFsU2hhZG93TWFwcGVyLmxpZ2h0T2Zmc2V0IiwiRGlyZWN0aW9uYWxTaGFkb3dNYXBwZXIuaURlcHRoUHJvamVjdGlvbiIsIkRpcmVjdGlvbmFsU2hhZG93TWFwcGVyLmRlcHRoIiwiRGlyZWN0aW9uYWxTaGFkb3dNYXBwZXIucERyYXdEZXB0aE1hcCIsIkRpcmVjdGlvbmFsU2hhZG93TWFwcGVyLnBVcGRhdGVDdWxsUGxhbmVzIiwiRGlyZWN0aW9uYWxTaGFkb3dNYXBwZXIucFVwZGF0ZURlcHRoUHJvamVjdGlvbiIsIkRpcmVjdGlvbmFsU2hhZG93TWFwcGVyLnBVcGRhdGVQcm9qZWN0aW9uRnJvbUZydXN0dW1Db3JuZXJzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxJQUFPLFFBQVEsV0FBZ0IsK0JBQStCLENBQUMsQ0FBQztBQUdoRSxJQUFPLG9CQUFvQixXQUFhLGtEQUFrRCxDQUFDLENBQUM7QUFJNUYsSUFBTyxNQUFNLFdBQWdCLG9DQUFvQyxDQUFDLENBQUM7QUFFbkUsSUFBTyxnQkFBZ0IsV0FBYyw2REFBNkQsQ0FBQyxDQUFDO0FBSXBHLElBQU0sdUJBQXVCO0lBQVNBLFVBQWhDQSx1QkFBdUJBLFVBQXlCQTtJQWNyREEsU0FkS0EsdUJBQXVCQTtRQWdCM0JDLGlCQUFPQSxDQUFDQTtRQVhGQSxrQkFBYUEsR0FBVUEsS0FBS0EsQ0FBQ0E7UUFHN0JBLFdBQU1BLEdBQVVBLEVBQUVBLENBQUNBO1FBVXpCQSxJQUFJQSxDQUFDQSxZQUFZQSxHQUFHQSxFQUFFQSxDQUFDQTtRQUN2QkEsSUFBSUEsQ0FBQ0Esd0JB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QUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUMzQkEsQ0FBQ0EsR0FBR0EsSUFBSUEsQ0FBQ0EsY0FBY0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFDL0JBLENBQUNBLEdBQUdBLElBQUlBLENBQUNBLGNBQWNBLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBLENBQUNBO1lBQy9CQSxFQUFFQSxDQUFDQSxDQUFDQSxDQUFDQSxHQUFHQSxJQUFJQSxDQUFDQTtnQkFDWkEsSUFBSUEsR0FBR0EsQ0FBQ0EsQ0FBQ0E7WUFDVkEsRUFBRUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsSUFBSUEsQ0FBQ0E7Z0JBQ1pBLElBQUlBLEdBQUdBLENBQUNBLENBQUNBO1lBQ1ZBLEVBQUVBLENBQUNBLENBQUNBLENBQUNBLEdBQUdBLElBQUlBLENBQUNBO2dCQUNaQSxJQUFJQSxHQUFHQSxDQUFDQSxDQUFDQTtZQUNWQSxFQUFFQSxDQUFDQSxDQUFDQSxDQUFDQSxHQUFHQSxJQUFJQSxDQUFDQTtnQkFDWkEsSUFBSUEsR0FBR0EsQ0FBQ0EsQ0FBQ0E7WUFDVkEsRUFBRUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsSUFBSUEsQ0FBQ0EsTUFBTUEsQ0FBQ0E7Z0JBQ25CQSxJQUFJQSxDQUFDQSxNQUFNQSxHQUFHQSxDQUFDQSxDQUFDQTtZQUNqQkEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsQ0FBQ0E7UUFDUkEsQ0FBQ0E7UUFFREEsSUFBSUEsQ0FBQ0EsTUFBTUEsR0FBR0EsQ0FBQ0EsQ0FBQ0E7UUFFaEJBLElBQUlBLENBQUNBLEdBQVVBLElBQUlBLEdBQUdBLElBQUlBLENBQUNBO1FBQzNCQSxJQUFJQSxDQUFDQSxHQUFVQSxJQUFJQSxHQUFHQSxJQUFJQSxDQUFDQTtRQUMzQkEsSUFBSUEsQ0FBQ0EsR0FBVUEsQ0FBQ0EsR0FBQ0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsTUFBTUEsR0FBR0EsSUFBSUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsQ0FBQ0E7UUFFN0NBLEVBQUVBLENBQUNBLENBQUNBLElBQUlBLEdBQUdBLENBQUNBLENBQUNBO1lBQ1pBLElBQUlBLElBQUlBLElBQUlBLENBQUNBLE1BQU1BLENBQUNBLENBQUNBLGtDQUFrQ0E7UUFFeERBLEVBQUVBLENBQUNBLENBQUNBLElBQUlBLEdBQUdBLENBQUNBLENBQUNBO1lBQ1pBLElBQUlBLElBQUlBLElBQUlBLENBQUNBLE1BQU1BLENBQUNBO1FBRXJCQSxJQUFJQSxHQUFHQSxJQUFJQSxDQUFDQSxLQUFLQSxDQUFDQSxJQUFJQSxHQUFDQSxJQUFJQSxDQUFDQSxNQUFNQSxDQUFDQSxHQUFDQSxJQUFJQSxDQUFDQSxNQUFNQSxDQUFDQTtRQUNoREEsSUFBSUEsR0FBR0EsSUFBSUEsQ0FBQ0EsS0FBS0EsQ0FBQ0EsSUFBSUEsR0FBQ0EsSUFBSUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsR0FBQ0EsSUFBSUEsQ0FBQ0EsTUFBTUEsQ0FBQ0E7UUFFaERBLElBQUlBLEtBQUtBLEdBQVVBLENBQUNBLEdBQUNBLElBQUlBLENBQUNBLE1BQU1BLENBQUNBO1FBQ2pDQSxDQUFDQSxHQUFHQSxJQUFJQSxDQUFDQSxLQUFLQSxDQUFDQSxDQUFDQSxHQUFDQSxLQUFLQSxHQUFHQSxDQUFDQSxDQUFDQSxHQUFDQSxLQUFLQSxDQUFDQTtRQUNsQ0EsQ0FBQ0EsR0FBR0EsSUFBSUEsQ0FBQ0EsS0FBS0EsQ0FBQ0EsQ0FBQ0EsR0FBQ0EsS0FBS0EsR0FBR0EsQ0FBQ0EsQ0FBQ0EsR0FBQ0EsS0FBS0EsQ0FBQ0E7UUFFbENBLElBQUlBLEdBQUdBLElBQUlBLEdBQUdBLENBQUNBLENBQUNBO1FBQ2hCQSxJQUFJQSxHQUFHQSxJQUFJQSxHQUFHQSxDQUFDQSxDQUFDQTtRQUVoQkEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsR0FBQ0EsQ0FBQ0EsQ0FBQ0E7UUFDUkEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsR0FBQ0EsQ0FBQ0EsQ0FBQ0E7UUFFUkEsR0FBR0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsR0FBQ0EsQ0FBQ0EsQ0FBQ0E7UUFDYkEsR0FBR0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsR0FBQ0EsQ0FBQ0EsQ0FBQ0E7UUFDYkEsR0FBR0EsQ0FBQ0EsRUFBRUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0E7UUFDWkEsR0FBR0EsQ0FBQ0EsRUFBRUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0EsSUFBSUEsR0FBR0EsSUFBSUEsQ0FBQ0EsR0FBQ0EsQ0FBQ0EsQ0FBQ0E7UUFDM0JBLEdBQUdBLENBQUNBLEVBQUVBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBLElBQUlBLEdBQUdBLElBQUlBLENBQUNBLEdBQUNBLENBQUNBLENBQUNBO1FBQzNCQSxHQUFHQSxDQUFDQSxFQUFFQSxDQUFDQSxHQUFHQSxDQUFDQSxJQUFJQSxDQUFDQSxNQUFNQSxHQUFDQSxDQUFDQSxDQUFDQTtRQUN6QkEsR0FBR0EsQ0FBQ0EsRUFBRUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0E7UUFDWkEsR0FBR0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsR0FBR0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsR0FBR0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsR0FBR0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsR0FBR0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsR0FBR0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsR0FBR0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsR0FBR0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsR0FBR0EsQ0FBQ0EsRUFBRUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0E7UUFFcEZBLE1BQU1BLENBQUNBLGVBQWVBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBO0lBQzdCQSxDQUFDQTtJQUNGVCw4QkFBQ0E7QUFBREEsQ0FyTEEsQUFxTENBLEVBckxxQyxnQkFBZ0IsRUFxTHJEO0FBRUQsQUFBaUMsaUJBQXhCLHVCQUF1QixDQUFDIiwiZmlsZSI6Im1hdGVyaWFscy9zaGFkb3dtYXBwZXJzL0RpcmVjdGlvbmFsU2hhZG93TWFwcGVyLmpzIiwic291cmNlUm9vdCI6Ii4uLyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBNYXRyaXgzRFx0XHRcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1jb3JlL2xpYi9nZW9tL01hdHJpeDNEXCIpO1xuaW1wb3J0IFBsYW5lM0RcdFx0XHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtY29yZS9saWIvZ2VvbS9QbGFuZTNEXCIpO1xuaW1wb3J0IFZlY3RvcjNEXHRcdFx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLWNvcmUvbGliL2dlb20vVmVjdG9yM0RcIik7XG5pbXBvcnQgRnJlZU1hdHJpeFByb2plY3Rpb25cdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtY29yZS9saWIvcHJvamVjdGlvbnMvRnJlZU1hdHJpeFByb2plY3Rpb25cIik7XG5cbmltcG9ydCBTY2VuZVx0XHRcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1kaXNwbGF5L2xpYi9jb250YWluZXJzL1NjZW5lXCIpO1xuaW1wb3J0IElSZW5kZXJlclx0XHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtZGlzcGxheS9saWIvcmVuZGVyL0lSZW5kZXJlclwiKTtcbmltcG9ydCBDYW1lcmFcdFx0XHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtZGlzcGxheS9saWIvZW50aXRpZXMvQ2FtZXJhXCIpO1xuaW1wb3J0IERpcmVjdGlvbmFsTGlnaHRcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1kaXNwbGF5L2xpYi9lbnRpdGllcy9EaXJlY3Rpb25hbExpZ2h0XCIpO1xuaW1wb3J0IFNoYWRvd01hcHBlckJhc2VcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1kaXNwbGF5L2xpYi9tYXRlcmlhbHMvc2hhZG93bWFwcGVycy9TaGFkb3dNYXBwZXJCYXNlXCIpO1xuaW1wb3J0IFJlbmRlclRleHR1cmVcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1jb3JlL2xpYi90ZXh0dXJlcy9SZW5kZXJUZXh0dXJlXCIpO1xuaW1wb3J0IFRleHR1cmVQcm94eUJhc2VcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1jb3JlL2xpYi90ZXh0dXJlcy9UZXh0dXJlUHJveHlCYXNlXCIpO1xuXG5jbGFzcyBEaXJlY3Rpb25hbFNoYWRvd01hcHBlciBleHRlbmRzIFNoYWRvd01hcHBlckJhc2Vcbntcblx0cHVibGljIF9wT3ZlcmFsbERlcHRoQ2FtZXJhOkNhbWVyYTtcblx0cHVibGljIF9wTG9jYWxGcnVzdHVtOkFycmF5PG51bWJlcj47XG5cblx0cHVibGljIF9wTGlnaHRPZmZzZXQ6bnVtYmVyID0gMTAwMDA7XG5cdHB1YmxpYyBfcE1hdHJpeDpNYXRyaXgzRDtcblx0cHVibGljIF9wT3ZlcmFsbERlcHRoUHJvamVjdGlvbjpGcmVlTWF0cml4UHJvamVjdGlvbjtcblx0cHVibGljIF9wU25hcDpudW1iZXIgPSA2NDtcblxuXHRwdWJsaWMgX3BDdWxsUGxhbmVzOkFycmF5PFBsYW5lM0Q+O1xuXHRwdWJsaWMgX3BNaW5aOm51bWJlcjtcblx0cHVibGljIF9wTWF4WjpudW1iZXI7XG5cblx0Y29uc3RydWN0b3IoKVxuXHR7XG5cdFx0c3VwZXIoKTtcblxuXHRcdHRoaXMuX3BDdWxsUGxhbmVzID0gW107XG5cdFx0dGhpcy5fcE92ZXJhbGxEZXB0aFByb2plY3Rpb24gPSBuZXcgRnJlZU1hdHJpeFByb2plY3Rpb24oKTtcblx0XHR0aGlzLl9wT3ZlcmFsbERlcHRoQ2FtZXJhID0gbmV3IENhbWVyYSh0aGlzLl9wT3ZlcmFsbERlcHRoUHJvamVjdGlvbik7XG5cdFx0dGhpcy5fcExvY2FsRnJ1c3R1bSA9IFtdO1xuXHRcdHRoaXMuX3BNYXRyaXggPSBuZXcgTWF0cml4M0QoKTtcblx0fVxuXG5cdHB1YmxpYyBnZXQgc25hcCgpOm51bWJlclxuXHR7XG5cdFx0cmV0dXJuIHRoaXMuX3BTbmFwO1xuXHR9XG5cblx0cHVibGljIHNldCBzbmFwKHZhbHVlOm51bWJlcilcblx0e1xuXHRcdHRoaXMuX3BTbmFwID0gdmFsdWU7XG5cdH1cblxuXHRwdWJsaWMgZ2V0IGxpZ2h0T2Zmc2V0KCk6bnVtYmVyXG5cdHtcblx0XHRyZXR1cm4gdGhpcy5fcExpZ2h0T2Zmc2V0O1xuXHR9XG5cblx0cHVibGljIHNldCBsaWdodE9mZnNldCh2YWx1ZTpudW1iZXIpXG5cdHtcblx0XHR0aGlzLl9wTGlnaHRPZmZzZXQgPSB2YWx1ZTtcblx0fVxuXG5cdC8vQGFyY2FuZVxuXHRwdWJsaWMgZ2V0IGlEZXB0aFByb2plY3Rpb24oKTpNYXRyaXgzRFxuXHR7XG5cdFx0cmV0dXJuIHRoaXMuX3BPdmVyYWxsRGVwdGhDYW1lcmEudmlld1Byb2plY3Rpb247XG5cdH1cblxuXHQvL0BhcmNhbmVcblx0cHVibGljIGdldCBkZXB0aCgpOm51bWJlclxuXHR7XG5cdFx0cmV0dXJuIHRoaXMuX3BNYXhaIC0gdGhpcy5fcE1pblo7XG5cdH1cblxuXHQvL0BvdmVycmlkZVxuXHRwdWJsaWMgcERyYXdEZXB0aE1hcCh0YXJnZXQ6VGV4dHVyZVByb3h5QmFzZSwgc2NlbmU6U2NlbmUsIHJlbmRlcmVyOklSZW5kZXJlcilcblx0e1xuXHRcdHRoaXMuX3BDYXN0ZXJDb2xsZWN0b3IuY2FtZXJhID0gdGhpcy5fcE92ZXJhbGxEZXB0aENhbWVyYTtcblx0XHR0aGlzLl9wQ2FzdGVyQ29sbGVjdG9yLmN1bGxQbGFuZXMgPSB0aGlzLl9wQ3VsbFBsYW5lcztcblx0XHR0aGlzLl9wQ2FzdGVyQ29sbGVjdG9yLmNsZWFyKCk7XG5cdFx0c2NlbmUudHJhdmVyc2VQYXJ0aXRpb25zKHRoaXMuX3BDYXN0ZXJDb2xsZWN0b3IpO1xuXHRcdHJlbmRlcmVyLl9pUmVuZGVyKHRoaXMuX3BDYXN0ZXJDb2xsZWN0b3IsIHRhcmdldCk7XG5cdH1cblxuXHQvL0Bwcm90ZWN0ZWRcblx0cHVibGljIHBVcGRhdGVDdWxsUGxhbmVzKHZpZXdDYW1lcmE6Q2FtZXJhKVxuXHR7XG5cdFx0dmFyIGxpZ2h0RnJ1c3R1bVBsYW5lczpBcnJheTxQbGFuZTNEPiA9IHRoaXMuX3BPdmVyYWxsRGVwdGhDYW1lcmEuZnJ1c3R1bVBsYW5lcztcblx0XHR2YXIgdmlld0ZydXN0dW1QbGFuZXM6QXJyYXk8UGxhbmUzRD4gPSB2aWV3Q2FtZXJhLmZydXN0dW1QbGFuZXM7XG5cdFx0dGhpcy5fcEN1bGxQbGFuZXMubGVuZ3RoID0gNDtcblxuXHRcdHRoaXMuX3BDdWxsUGxhbmVzWzBdID0gbGlnaHRGcnVzdHVtUGxhbmVzWzBdO1xuXHRcdHRoaXMuX3BDdWxsUGxhbmVzWzFdID0gbGlnaHRGcnVzdHVtUGxhbmVzWzFdO1xuXHRcdHRoaXMuX3BDdWxsUGxhbmVzWzJdID0gbGlnaHRGcnVzdHVtUGxhbmVzWzJdO1xuXHRcdHRoaXMuX3BDdWxsUGxhbmVzWzNdID0gbGlnaHRGcnVzdHVtUGxhbmVzWzNdO1xuXG5cdFx0dmFyIGxpZ2h0OkRpcmVjdGlvbmFsTGlnaHQgPSA8RGlyZWN0aW9uYWxMaWdodD4gdGhpcy5fcExpZ2h0O1xuXHRcdHZhciBkaXI6VmVjdG9yM0QgPSBsaWdodC5zY2VuZURpcmVjdGlvbjtcblx0XHR2YXIgZGlyWDpudW1iZXIgPSBkaXIueDtcblx0XHR2YXIgZGlyWTpudW1iZXIgPSBkaXIueTtcblx0XHR2YXIgZGlyWjpudW1iZXIgPSBkaXIuejtcblx0XHR2YXIgajpudW1iZXIgPSA0O1xuXHRcdGZvciAodmFyIGk6bnVtYmVyID0gMDsgaSA8IDY7ICsraSkge1xuXHRcdFx0dmFyIHBsYW5lOlBsYW5lM0QgPSB2aWV3RnJ1c3R1bVBsYW5lc1tpXTtcblx0XHRcdGlmIChwbGFuZS5hKmRpclggKyBwbGFuZS5iKmRpclkgKyBwbGFuZS5jKmRpclogPCAwKVxuXHRcdFx0XHR0aGlzLl9wQ3VsbFBsYW5lc1tqKytdID0gcGxhbmU7XG5cdFx0fVxuXHR9XG5cblx0Ly9Ab3ZlcnJpZGVcblx0cHVibGljIHBVcGRhdGVEZXB0aFByb2plY3Rpb24odmlld0NhbWVyYTpDYW1lcmEpXG5cdHtcblx0XHR0aGlzLnBVcGRhdGVQcm9qZWN0aW9uRnJvbUZydXN0dW1Db3JuZXJzKHZpZXdDYW1lcmEsIHZpZXdDYW1lcmEucHJvamVjdGlvbi5mcnVzdHVtQ29ybmVycywgdGhpcy5fcE1hdHJpeCk7XG5cdFx0dGhpcy5fcE92ZXJhbGxEZXB0aFByb2plY3Rpb24ubWF0cml4ID0gdGhpcy5fcE1hdHJpeDtcblx0XHR0aGlzLnBVcGRhdGVDdWxsUGxhbmVzKHZpZXdDYW1lcmEpO1xuXHR9XG5cblx0cHVibGljIHBVcGRhdGVQcm9qZWN0aW9uRnJvbUZydXN0dW1Db3JuZXJzKHZpZXdDYW1lcmE6Q2FtZXJhLCBjb3JuZXJzOkFycmF5PG51bWJlcj4sIG1hdHJpeDpNYXRyaXgzRClcblx0e1xuXHRcdHZhciByYXc6QXJyYXk8bnVtYmVyPiA9IG5ldyBBcnJheTxudW1iZXI+KCk7XG5cdFx0dmFyIGRpcjpWZWN0b3IzRDtcblx0XHR2YXIgeDpudW1iZXIsIHk6bnVtYmVyLCB6Om51bWJlcjtcblx0XHR2YXIgbWluWDpudW1iZXIsIG1pblk6bnVtYmVyO1xuXHRcdHZhciBtYXhYOm51bWJlciwgbWF4WTpudW1iZXI7XG5cdFx0dmFyIGk6bnVtYmVyO1xuXG5cdFx0dmFyIGxpZ2h0OkRpcmVjdGlvbmFsTGlnaHQgPSA8RGlyZWN0aW9uYWxMaWdodD4gdGhpcy5fcExpZ2h0O1xuXHRcdGRpciA9IGxpZ2h0LnNjZW5lRGlyZWN0aW9uO1xuXHRcdHRoaXMuX3BPdmVyYWxsRGVwdGhDYW1lcmEudHJhbnNmb3JtLm1hdHJpeDNEID0gdGhpcy5fcExpZ2h0LnNjZW5lVHJhbnNmb3JtO1xuXHRcdHggPSBNYXRoLmZsb29yKCh2aWV3Q2FtZXJhLnggLSBkaXIueCp0aGlzLl9wTGlnaHRPZmZzZXQpL3RoaXMuX3BTbmFwKSp0aGlzLl9wU25hcDtcblx0XHR5ID0gTWF0aC5mbG9vcigodmlld0NhbWVyYS55IC0gZGlyLnkqdGhpcy5fcExpZ2h0T2Zmc2V0KS90aGlzLl9wU25hcCkqdGhpcy5fcFNuYXA7XG5cdFx0eiA9IE1hdGguZmxvb3IoKHZpZXdDYW1lcmEueiAtIGRpci56KnRoaXMuX3BMaWdodE9mZnNldCkvdGhpcy5fcFNuYXApKnRoaXMuX3BTbmFwO1xuXHRcdHRoaXMuX3BPdmVyYWxsRGVwdGhDYW1lcmEueCA9IHg7XG5cdFx0dGhpcy5fcE92ZXJhbGxEZXB0aENhbWVyYS55ID0geTtcblx0XHR0aGlzLl9wT3ZlcmFsbERlcHRoQ2FtZXJhLnogPSB6O1xuXG5cdFx0dGhpcy5fcE1hdHJpeC5jb3B5RnJvbSh0aGlzLl9wT3ZlcmFsbERlcHRoQ2FtZXJhLmludmVyc2VTY2VuZVRyYW5zZm9ybSk7XG5cdFx0dGhpcy5fcE1hdHJpeC5wcmVwZW5kKHZpZXdDYW1lcmEuc2NlbmVUcmFuc2Zvcm0pO1xuXHRcdHRoaXMuX3BNYXRyaXgudHJhbnNmb3JtVmVjdG9ycyhjb3JuZXJzLCB0aGlzLl9wTG9jYWxGcnVzdHVtKTtcblxuXHRcdG1pblggPSBtYXhYID0gdGhpcy5fcExvY2FsRnJ1c3R1bVswXTtcblx0XHRtaW5ZID0gbWF4WSA9IHRoaXMuX3BMb2NhbEZydXN0dW1bMV07XG5cdFx0dGhpcy5fcE1heFogPSB0aGlzLl9wTG9jYWxGcnVzdHVtWzJdO1xuXG5cdFx0aSA9IDM7XG5cdFx0d2hpbGUgKGkgPCAyNCkge1xuXHRcdFx0eCA9IHRoaXMuX3BMb2NhbEZydXN0dW1baV07XG5cdFx0XHR5ID0gdGhpcy5fcExvY2FsRnJ1c3R1bVtpICsgMV07XG5cdFx0XHR6ID0gdGhpcy5fcExvY2FsRnJ1c3R1bVtpICsgMl07XG5cdFx0XHRpZiAoeCA8IG1pblgpXG5cdFx0XHRcdG1pblggPSB4O1xuXHRcdFx0aWYgKHggPiBtYXhYKVxuXHRcdFx0XHRtYXhYID0geDtcblx0XHRcdGlmICh5IDwgbWluWSlcblx0XHRcdFx0bWluWSA9IHk7XG5cdFx0XHRpZiAoeSA+IG1heFkpXG5cdFx0XHRcdG1heFkgPSB5O1xuXHRcdFx0aWYgKHogPiB0aGlzLl9wTWF4Wilcblx0XHRcdFx0dGhpcy5fcE1heFogPSB6O1xuXHRcdFx0aSArPSAzO1xuXHRcdH1cblxuXHRcdHRoaXMuX3BNaW5aID0gMTtcblxuXHRcdHZhciB3Om51bWJlciA9IG1heFggLSBtaW5YO1xuXHRcdHZhciBoOm51bWJlciA9IG1heFkgLSBtaW5ZO1xuXHRcdHZhciBkOm51bWJlciA9IDEvKHRoaXMuX3BNYXhaIC0gdGhpcy5fcE1pblopO1xuXG5cdFx0aWYgKG1pblggPCAwKVxuXHRcdFx0bWluWCAtPSB0aGlzLl9wU25hcDsgLy8gYmVjYXVzZSBpbnQoKSByb3VuZHMgdXAgZm9yIDwgMFxuXG5cdFx0aWYgKG1pblkgPCAwKVxuXHRcdFx0bWluWSAtPSB0aGlzLl9wU25hcDtcblxuXHRcdG1pblggPSBNYXRoLmZsb29yKG1pblgvdGhpcy5fcFNuYXApKnRoaXMuX3BTbmFwO1xuXHRcdG1pblkgPSBNYXRoLmZsb29yKG1pblkvdGhpcy5fcFNuYXApKnRoaXMuX3BTbmFwO1xuXG5cdFx0dmFyIHNuYXAyOm51bWJlciA9IDIqdGhpcy5fcFNuYXA7XG5cdFx0dyA9IE1hdGguZmxvb3Iody9zbmFwMiArIDIpKnNuYXAyO1xuXHRcdGggPSBNYXRoLmZsb29yKGgvc25hcDIgKyAyKSpzbmFwMjtcblxuXHRcdG1heFggPSBtaW5YICsgdztcblx0XHRtYXhZID0gbWluWSArIGg7XG5cblx0XHR3ID0gMS93O1xuXHRcdGggPSAxL2g7XG5cblx0XHRyYXdbMF0gPSAyKnc7XG5cdFx0cmF3WzVdID0gMipoO1xuXHRcdHJhd1sxMF0gPSBkO1xuXHRcdHJhd1sxMl0gPSAtKG1heFggKyBtaW5YKSp3O1xuXHRcdHJhd1sxM10gPSAtKG1heFkgKyBtaW5ZKSpoO1xuXHRcdHJhd1sxNF0gPSAtdGhpcy5fcE1pbloqZDtcblx0XHRyYXdbMTVdID0gMTtcblx0XHRyYXdbMV0gPSByYXdbMl0gPSByYXdbM10gPSByYXdbNF0gPSByYXdbNl0gPSByYXdbN10gPSByYXdbOF0gPSByYXdbOV0gPSByYXdbMTFdID0gMDtcblxuXHRcdG1hdHJpeC5jb3B5UmF3RGF0YUZyb20ocmF3KTtcblx0fVxufVxuXG5leHBvcnQgPSBEaXJlY3Rpb25hbFNoYWRvd01hcHBlcjsiXX0=