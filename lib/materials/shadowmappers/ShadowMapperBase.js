var AbstractMethodError = require("awayjs-core/lib/errors/AbstractMethodError");
var ShadowCasterCollector = require("awayjs-display/lib/traverse/ShadowCasterCollector");
var RenderTexture = require("awayjs-core/lib/textures/RenderTexture");
var ShadowMapperBase = (function () {
    function ShadowMapperBase() {
        this._pDepthMapSize = 2048;
        this._autoUpdateShadows = true;
        this._pCasterCollector = this.pCreateCasterCollector();
    }
    ShadowMapperBase.prototype.pCreateCasterCollector = function () {
        return new ShadowCasterCollector();
    };
    Object.defineProperty(ShadowMapperBase.prototype, "autoUpdateShadows", {
        get: function () {
            return this._autoUpdateShadows;
        },
        set: function (value) {
            this._autoUpdateShadows = value;
        },
        enumerable: true,
        configurable: true
    });
    ShadowMapperBase.prototype.updateShadows = function () {
        this._iShadowsInvalid = true;
    };
    ShadowMapperBase.prototype.iSetDepthMap = function (depthMap) {
        if (this._depthMap == depthMap)
            return;
        if (this._depthMap && !this._explicitDepthMap)
            this._depthMap.dispose();
        this._depthMap = depthMap;
        if (this._depthMap) {
            this._explicitDepthMap = true;
            this._pDepthMapSize = this._depthMap.size;
        }
        else {
            this._explicitDepthMap = false;
        }
    };
    Object.defineProperty(ShadowMapperBase.prototype, "light", {
        get: function () {
            return this._pLight;
        },
        set: function (value) {
            this._pLight = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ShadowMapperBase.prototype, "depthMap", {
        get: function () {
            if (!this._depthMap)
                this._depthMap = this.pCreateDepthTexture();
            return this._depthMap;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ShadowMapperBase.prototype, "depthMapSize", {
        get: function () {
            return this._pDepthMapSize;
        },
        set: function (value) {
            if (value == this._pDepthMapSize)
                return;
            this._pSetDepthMapSize(value);
        },
        enumerable: true,
        configurable: true
    });
    ShadowMapperBase.prototype.dispose = function () {
        this._pCasterCollector = null;
        if (this._depthMap && !this._explicitDepthMap)
            this._depthMap.dispose();
        this._depthMap = null;
    };
    ShadowMapperBase.prototype.pCreateDepthTexture = function () {
        return new RenderTexture(this._pDepthMapSize, this._pDepthMapSize);
    };
    ShadowMapperBase.prototype.iRenderDepthMap = function (entityCollector, renderer) {
        this._iShadowsInvalid = false;
        this.pUpdateDepthProjection(entityCollector.camera);
        if (!this._depthMap)
            this._depthMap = this.pCreateDepthTexture();
        this.pDrawDepthMap(this._depthMap, entityCollector.scene, renderer);
    };
    ShadowMapperBase.prototype.pUpdateDepthProjection = function (viewCamera) {
        throw new AbstractMethodError();
    };
    ShadowMapperBase.prototype.pDrawDepthMap = function (target, scene, renderer) {
        throw new AbstractMethodError();
    };
    ShadowMapperBase.prototype._pSetDepthMapSize = function (value) {
        this._pDepthMapSize = value;
        if (this._explicitDepthMap) {
            throw Error("Cannot set depth map size for the current renderer.");
        }
        else if (this._depthMap) {
            this._depthMap.dispose();
            this._depthMap = null;
        }
    };
    return ShadowMapperBase;
})();
module.exports = ShadowMapperBase;

//# sourceMappingURL=data:application/json;base64,