var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var NamedAssetBase = require("awayjs-core/lib/library/NamedAssetBase");
var TesselatedFontChar = require("awayjs-display/lib/text/TesselatedFontChar");
/**
 * SubMeshBase wraps a TriangleSubGeometry as a scene graph instantiation. A SubMeshBase is owned by a Mesh object.
 *
 *
 * @see away.base.TriangleSubGeometry
 * @see away.entities.Mesh
 *
 * @class away.base.SubMeshBase
 */
var TesselatedFontTable = (function (_super) {
    __extends(TesselatedFontTable, _super);
    //TODO test shader picking
    //		public get shaderPickingDetails():boolean
    //		{
    //
    //			return this.sourceEntity.shaderPickingDetails;
    //		}
    /**
     * Creates a new TesselatedFont object
     */
    function TesselatedFontTable() {
        _super.call(this);
        this._font_chars = new Array();
        this._font_chars_dic = new Object();
    }
    /**
     *
     */
    TesselatedFontTable.prototype.dispose = function () {
    };
    TesselatedFontTable.prototype.get_font_chars = function () {
        return this._font_chars;
    };
    TesselatedFontTable.prototype.get_font_em_size = function () {
        return this._font_em_size;
    };
    TesselatedFontTable.prototype.set_font_em_size = function (font_em_size) {
        this._font_em_size = font_em_size;
    };
    /**
     *
     */
    TesselatedFontTable.prototype.get_subgeo_for_char = function (char) {
        return this._font_chars_dic[char];
    };
    /**
     *
     */
    TesselatedFontTable.prototype.set_subgeo_for_char = function (char, subgeo) {
        var tesselated_font_char = new TesselatedFontChar(subgeo);
        subgeo.name = char;
        this._font_chars.push(tesselated_font_char);
        this._font_chars_dic[char] = tesselated_font_char;
    };
    return TesselatedFontTable;
})(NamedAssetBase);
module.exports = TesselatedFontTable;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImF3YXlqcy1kaXNwbGF5L2xpYi90ZXh0L1Rlc3NlbGF0ZWRGb250VGFibGUudHMiXSwibmFtZXMiOlsiVGVzc2VsYXRlZEZvbnRUYWJsZSIsIlRlc3NlbGF0ZWRGb250VGFibGUuY29uc3RydWN0b3IiLCJUZXNzZWxhdGVkRm9udFRhYmxlLmRpc3Bvc2UiLCJUZXNzZWxhdGVkRm9udFRhYmxlLmdldF9mb250X2NoYXJzIiwiVGVzc2VsYXRlZEZvbnRUYWJsZS5nZXRfZm9udF9lbV9zaXplIiwiVGVzc2VsYXRlZEZvbnRUYWJsZS5zZXRfZm9udF9lbV9zaXplIiwiVGVzc2VsYXRlZEZvbnRUYWJsZS5nZXRfc3ViZ2VvX2Zvcl9jaGFyIiwiVGVzc2VsYXRlZEZvbnRUYWJsZS5zZXRfc3ViZ2VvX2Zvcl9jaGFyIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFDQSxJQUFPLGNBQWMsV0FBYyx3Q0FBd0MsQ0FBQyxDQUFDO0FBTTdFLElBQU8sa0JBQWtCLFdBQWEsNENBQTRDLENBQUMsQ0FBQztBQUVwRixBQVNBOzs7Ozs7OztHQURHO0lBQ0csbUJBQW1CO0lBQVNBLFVBQTVCQSxtQkFBbUJBLFVBQXVCQTtJQU0vQ0EsMEJBQTBCQTtJQUMzQkEsNkNBQTZDQTtJQUM3Q0EsS0FBS0E7SUFDTEEsRUFBRUE7SUFDRkEsbURBQW1EQTtJQUNuREEsS0FBS0E7SUFFSkE7O09BRUdBO0lBQ0hBLFNBaEJLQSxtQkFBbUJBO1FBa0J2QkMsaUJBQU9BLENBQUNBO1FBQ1JBLElBQUlBLENBQUNBLFdBQVdBLEdBQUdBLElBQUlBLEtBQUtBLEVBQXNCQSxDQUFDQTtRQUNuREEsSUFBSUEsQ0FBQ0EsZUFBZUEsR0FBR0EsSUFBSUEsTUFBTUEsRUFBRUEsQ0FBQ0E7SUFDckNBLENBQUNBO0lBRUREOztPQUVHQTtJQUNJQSxxQ0FBT0EsR0FBZEE7SUFHQUUsQ0FBQ0E7SUFFTUYsNENBQWNBLEdBQXJCQTtRQUVDRyxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQSxXQUFXQSxDQUFBQTtJQUN4QkEsQ0FBQ0E7SUFDTUgsOENBQWdCQSxHQUF2QkE7UUFFQ0ksTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsYUFBYUEsQ0FBQUE7SUFDMUJBLENBQUNBO0lBQ01KLDhDQUFnQkEsR0FBdkJBLFVBQXdCQSxZQUFtQkE7UUFFMUNLLElBQUlBLENBQUNBLGFBQWFBLEdBQUNBLFlBQVlBLENBQUNBO0lBQ2pDQSxDQUFDQTtJQUNETDs7T0FFR0E7SUFDSUEsaURBQW1CQSxHQUExQkEsVUFBMkJBLElBQVdBO1FBRXJDTSxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQSxlQUFlQSxDQUFDQSxJQUFJQSxDQUFDQSxDQUFDQTtJQUNuQ0EsQ0FBQ0E7SUFDRE47O09BRUdBO0lBQ0lBLGlEQUFtQkEsR0FBMUJBLFVBQTJCQSxJQUFXQSxFQUFFQSxNQUFzQkE7UUFFN0RPLElBQUlBLG9CQUFvQkEsR0FBc0JBLElBQUlBLGtCQUFrQkEsQ0FBbUJBLE1BQU1BLENBQUNBLENBQUNBO1FBQy9GQSxNQUFNQSxDQUFDQSxJQUFJQSxHQUFDQSxJQUFJQSxDQUFDQTtRQUNqQkEsSUFBSUEsQ0FBQ0EsV0FBV0EsQ0FBQ0EsSUFBSUEsQ0FBQ0Esb0JBQW9CQSxDQUFDQSxDQUFDQTtRQUM1Q0EsSUFBSUEsQ0FBQ0EsZUFBZUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsR0FBQ0Esb0JBQW9CQSxDQUFDQTtJQUNqREEsQ0FBQ0E7SUFFRlAsMEJBQUNBO0FBQURBLENBN0RBLEFBNkRDQSxFQTdEaUMsY0FBYyxFQTZEL0M7QUFFRCxBQUE2QixpQkFBcEIsbUJBQW1CLENBQUMiLCJmaWxlIjoidGV4dC9UZXNzZWxhdGVkRm9udFRhYmxlLmpzIiwic291cmNlUm9vdCI6Ii4uLyIsInNvdXJjZXNDb250ZW50IjpbIlxyXG5pbXBvcnQgTmFtZWRBc3NldEJhc2VcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1jb3JlL2xpYi9saWJyYXJ5L05hbWVkQXNzZXRCYXNlXCIpO1xyXG5cclxuXHJcbmltcG9ydCBJQXNzZXRcdFx0XHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtY29yZS9saWIvbGlicmFyeS9JQXNzZXRcIik7XHJcbmltcG9ydCBTdWJHZW9tZXRyeUJhc2VcdFx0XHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtY29yZS9saWIvZGF0YS9TdWJHZW9tZXRyeUJhc2VcIik7XHJcbmltcG9ydCBDdXJ2ZVN1Ykdlb21ldHJ5XHRcdFx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLWNvcmUvbGliL2RhdGEvQ3VydmVTdWJHZW9tZXRyeVwiKTtcclxuaW1wb3J0IFRlc3NlbGF0ZWRGb250Q2hhclx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1kaXNwbGF5L2xpYi90ZXh0L1Rlc3NlbGF0ZWRGb250Q2hhclwiKTtcclxuXHJcbi8qKlxyXG4gKiBTdWJNZXNoQmFzZSB3cmFwcyBhIFRyaWFuZ2xlU3ViR2VvbWV0cnkgYXMgYSBzY2VuZSBncmFwaCBpbnN0YW50aWF0aW9uLiBBIFN1Yk1lc2hCYXNlIGlzIG93bmVkIGJ5IGEgTWVzaCBvYmplY3QuXHJcbiAqXHJcbiAqXHJcbiAqIEBzZWUgYXdheS5iYXNlLlRyaWFuZ2xlU3ViR2VvbWV0cnlcclxuICogQHNlZSBhd2F5LmVudGl0aWVzLk1lc2hcclxuICpcclxuICogQGNsYXNzIGF3YXkuYmFzZS5TdWJNZXNoQmFzZVxyXG4gKi9cclxuY2xhc3MgVGVzc2VsYXRlZEZvbnRUYWJsZSBleHRlbmRzIE5hbWVkQXNzZXRCYXNlXHJcbntcclxuXHRwcml2YXRlIF9mb250X2NoYXJzOkFycmF5PFRlc3NlbGF0ZWRGb250Q2hhcj47XHJcblx0cHJpdmF0ZSBfZm9udF9jaGFyc19kaWM6T2JqZWN0O1xyXG5cdHByaXZhdGUgX2ZvbnRfZW1fc2l6ZTpudW1iZXI7XHJcblx0cHJpdmF0ZSBfY2hhckRpY3REaXJ0eTpCb29sZWFuO1xyXG5cdC8vVE9ETyB0ZXN0IHNoYWRlciBwaWNraW5nXHJcbi8vXHRcdHB1YmxpYyBnZXQgc2hhZGVyUGlja2luZ0RldGFpbHMoKTpib29sZWFuXHJcbi8vXHRcdHtcclxuLy9cclxuLy9cdFx0XHRyZXR1cm4gdGhpcy5zb3VyY2VFbnRpdHkuc2hhZGVyUGlja2luZ0RldGFpbHM7XHJcbi8vXHRcdH1cclxuXHJcblx0LyoqXHJcblx0ICogQ3JlYXRlcyBhIG5ldyBUZXNzZWxhdGVkRm9udCBvYmplY3RcclxuXHQgKi9cclxuXHRjb25zdHJ1Y3RvcigpXHJcblx0e1xyXG5cdFx0c3VwZXIoKTtcclxuXHRcdHRoaXMuX2ZvbnRfY2hhcnMgPSBuZXcgQXJyYXk8VGVzc2VsYXRlZEZvbnRDaGFyPigpO1xyXG5cdFx0dGhpcy5fZm9udF9jaGFyc19kaWMgPSBuZXcgT2JqZWN0KCk7XHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQgKlxyXG5cdCAqL1xyXG5cdHB1YmxpYyBkaXNwb3NlKClcclxuXHR7XHJcblxyXG5cdH1cclxuXHJcblx0cHVibGljIGdldF9mb250X2NoYXJzKCk6QXJyYXk8VGVzc2VsYXRlZEZvbnRDaGFyPlxyXG5cdHtcclxuXHRcdHJldHVybiB0aGlzLl9mb250X2NoYXJzXHJcblx0fVxyXG5cdHB1YmxpYyBnZXRfZm9udF9lbV9zaXplKCk6bnVtYmVyXHJcblx0e1xyXG5cdFx0cmV0dXJuIHRoaXMuX2ZvbnRfZW1fc2l6ZVxyXG5cdH1cclxuXHRwdWJsaWMgc2V0X2ZvbnRfZW1fc2l6ZShmb250X2VtX3NpemU6bnVtYmVyKTp2b2lkXHJcblx0e1xyXG5cdFx0dGhpcy5fZm9udF9lbV9zaXplPWZvbnRfZW1fc2l6ZTtcclxuXHR9XHJcblx0LyoqXHJcblx0ICpcclxuXHQgKi9cclxuXHRwdWJsaWMgZ2V0X3N1Ymdlb19mb3JfY2hhcihjaGFyOnN0cmluZyk6VGVzc2VsYXRlZEZvbnRDaGFyXHJcblx0e1xyXG5cdFx0cmV0dXJuIHRoaXMuX2ZvbnRfY2hhcnNfZGljW2NoYXJdO1xyXG5cdH1cclxuXHQvKipcclxuXHQgKlxyXG5cdCAqL1xyXG5cdHB1YmxpYyBzZXRfc3ViZ2VvX2Zvcl9jaGFyKGNoYXI6c3RyaW5nLCBzdWJnZW86U3ViR2VvbWV0cnlCYXNlKTp2b2lkXHJcblx0e1xyXG5cdFx0dmFyIHRlc3NlbGF0ZWRfZm9udF9jaGFyOlRlc3NlbGF0ZWRGb250Q2hhciA9IG5ldyBUZXNzZWxhdGVkRm9udENoYXIoPEN1cnZlU3ViR2VvbWV0cnk+c3ViZ2VvKTtcclxuXHRcdHN1Ymdlby5uYW1lPWNoYXI7XHJcblx0XHR0aGlzLl9mb250X2NoYXJzLnB1c2godGVzc2VsYXRlZF9mb250X2NoYXIpO1xyXG5cdFx0dGhpcy5fZm9udF9jaGFyc19kaWNbY2hhcl09dGVzc2VsYXRlZF9mb250X2NoYXI7XHJcblx0fVxyXG5cclxufVxyXG5cclxuZXhwb3J0ID0gVGVzc2VsYXRlZEZvbnRUYWJsZTsiXX0=