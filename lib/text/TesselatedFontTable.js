var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var AssetBase = require("awayjs-core/lib/library/AssetBase");
var TesselatedFontChar = require("awayjs-display/lib/text/TesselatedFontChar");
/**
 * SubMeshBase wraps a TriangleSubGeometry as a scene graph instantiation. A SubMeshBase is owned by a Mesh object.
 *
 *
 * @see away.base.TriangleSubGeometry
 * @see away.entities.Mesh
 *
 * @class away.base.SubMeshBase
 */
var TesselatedFontTable = (function (_super) {
    __extends(TesselatedFontTable, _super);
    //TODO test shader picking
    //		public get shaderPickingDetails():boolean
    //		{
    //
    //			return this.sourceEntity.shaderPickingDetails;
    //		}
    /**
     * Creates a new TesselatedFont object
     */
    function TesselatedFontTable() {
        _super.call(this);
        this._font_chars = new Array();
        this._font_chars_dic = new Object();
    }
    /**
     *
     */
    TesselatedFontTable.prototype.dispose = function () {
    };
    TesselatedFontTable.prototype.get_font_chars = function () {
        return this._font_chars;
    };
    TesselatedFontTable.prototype.get_font_em_size = function () {
        return this._font_em_size;
    };
    TesselatedFontTable.prototype.set_font_em_size = function (font_em_size) {
        this._font_em_size = font_em_size;
    };
    /**
     *
     */
    TesselatedFontTable.prototype.get_subgeo_for_char = function (char) {
        return this._font_chars_dic[char];
    };
    /**
     *
     */
    TesselatedFontTable.prototype.set_subgeo_for_char = function (char, subgeo) {
        var tesselated_font_char = new TesselatedFontChar(subgeo);
        subgeo.name = char;
        this._font_chars.push(tesselated_font_char);
        this._font_chars_dic[char] = tesselated_font_char;
    };
    return TesselatedFontTable;
})(AssetBase);
module.exports = TesselatedFontTable;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImF3YXlqcy1kaXNwbGF5L2xpYi90ZXh0L1Rlc3NlbGF0ZWRGb250VGFibGUudHMiXSwibmFtZXMiOlsiVGVzc2VsYXRlZEZvbnRUYWJsZSIsIlRlc3NlbGF0ZWRGb250VGFibGUuY29uc3RydWN0b3IiLCJUZXNzZWxhdGVkRm9udFRhYmxlLmRpc3Bvc2UiLCJUZXNzZWxhdGVkRm9udFRhYmxlLmdldF9mb250X2NoYXJzIiwiVGVzc2VsYXRlZEZvbnRUYWJsZS5nZXRfZm9udF9lbV9zaXplIiwiVGVzc2VsYXRlZEZvbnRUYWJsZS5zZXRfZm9udF9lbV9zaXplIiwiVGVzc2VsYXRlZEZvbnRUYWJsZS5nZXRfc3ViZ2VvX2Zvcl9jaGFyIiwiVGVzc2VsYXRlZEZvbnRUYWJsZS5zZXRfc3ViZ2VvX2Zvcl9jaGFyIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFDQSxJQUFPLFNBQVMsV0FBZSxtQ0FBbUMsQ0FBQyxDQUFDO0FBTXBFLElBQU8sa0JBQWtCLFdBQWEsNENBQTRDLENBQUMsQ0FBQztBQUVwRixBQVNBOzs7Ozs7OztHQURHO0lBQ0csbUJBQW1CO0lBQVNBLFVBQTVCQSxtQkFBbUJBLFVBQWtCQTtJQU0xQ0EsMEJBQTBCQTtJQUMzQkEsNkNBQTZDQTtJQUM3Q0EsS0FBS0E7SUFDTEEsRUFBRUE7SUFDRkEsbURBQW1EQTtJQUNuREEsS0FBS0E7SUFFSkE7O09BRUdBO0lBQ0hBLFNBaEJLQSxtQkFBbUJBO1FBa0J2QkMsaUJBQU9BLENBQUNBO1FBQ1JBLElBQUlBLENBQUNBLFdBQVdBLEdBQUdBLElBQUlBLEtBQUtBLEVBQXNCQSxDQUFDQTtRQUNuREEsSUFBSUEsQ0FBQ0EsZUFBZUEsR0FBR0EsSUFBSUEsTUFBTUEsRUFBRUEsQ0FBQ0E7SUFDckNBLENBQUNBO0lBRUREOztPQUVHQTtJQUNJQSxxQ0FBT0EsR0FBZEE7SUFHQUUsQ0FBQ0E7SUFFTUYsNENBQWNBLEdBQXJCQTtRQUVDRyxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQSxXQUFXQSxDQUFBQTtJQUN4QkEsQ0FBQ0E7SUFDTUgsOENBQWdCQSxHQUF2QkE7UUFFQ0ksTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsYUFBYUEsQ0FBQUE7SUFDMUJBLENBQUNBO0lBQ01KLDhDQUFnQkEsR0FBdkJBLFVBQXdCQSxZQUFtQkE7UUFFMUNLLElBQUlBLENBQUNBLGFBQWFBLEdBQUNBLFlBQVlBLENBQUNBO0lBQ2pDQSxDQUFDQTtJQUNETDs7T0FFR0E7SUFDSUEsaURBQW1CQSxHQUExQkEsVUFBMkJBLElBQVdBO1FBRXJDTSxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQSxlQUFlQSxDQUFDQSxJQUFJQSxDQUFDQSxDQUFDQTtJQUNuQ0EsQ0FBQ0E7SUFDRE47O09BRUdBO0lBQ0lBLGlEQUFtQkEsR0FBMUJBLFVBQTJCQSxJQUFXQSxFQUFFQSxNQUFzQkE7UUFFN0RPLElBQUlBLG9CQUFvQkEsR0FBc0JBLElBQUlBLGtCQUFrQkEsQ0FBbUJBLE1BQU1BLENBQUNBLENBQUNBO1FBQy9GQSxNQUFNQSxDQUFDQSxJQUFJQSxHQUFDQSxJQUFJQSxDQUFDQTtRQUNqQkEsSUFBSUEsQ0FBQ0EsV0FBV0EsQ0FBQ0EsSUFBSUEsQ0FBQ0Esb0JBQW9CQSxDQUFDQSxDQUFDQTtRQUM1Q0EsSUFBSUEsQ0FBQ0EsZUFBZUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsR0FBQ0Esb0JBQW9CQSxDQUFDQTtJQUNqREEsQ0FBQ0E7SUFFRlAsMEJBQUNBO0FBQURBLENBN0RBLEFBNkRDQSxFQTdEaUMsU0FBUyxFQTZEMUM7QUFFRCxBQUE2QixpQkFBcEIsbUJBQW1CLENBQUMiLCJmaWxlIjoidGV4dC9UZXNzZWxhdGVkRm9udFRhYmxlLmpzIiwic291cmNlUm9vdCI6Ii4uLyIsInNvdXJjZXNDb250ZW50IjpbIlxyXG5pbXBvcnQgQXNzZXRCYXNlXHRcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1jb3JlL2xpYi9saWJyYXJ5L0Fzc2V0QmFzZVwiKTtcclxuXHJcblxyXG5pbXBvcnQgSUFzc2V0XHRcdFx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLWNvcmUvbGliL2xpYnJhcnkvSUFzc2V0XCIpO1xyXG5pbXBvcnQgU3ViR2VvbWV0cnlCYXNlXHRcdFx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLWNvcmUvbGliL2RhdGEvU3ViR2VvbWV0cnlCYXNlXCIpO1xyXG5pbXBvcnQgQ3VydmVTdWJHZW9tZXRyeVx0XHRcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1jb3JlL2xpYi9kYXRhL0N1cnZlU3ViR2VvbWV0cnlcIik7XHJcbmltcG9ydCBUZXNzZWxhdGVkRm9udENoYXJcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtZGlzcGxheS9saWIvdGV4dC9UZXNzZWxhdGVkRm9udENoYXJcIik7XHJcblxyXG4vKipcclxuICogU3ViTWVzaEJhc2Ugd3JhcHMgYSBUcmlhbmdsZVN1Ykdlb21ldHJ5IGFzIGEgc2NlbmUgZ3JhcGggaW5zdGFudGlhdGlvbi4gQSBTdWJNZXNoQmFzZSBpcyBvd25lZCBieSBhIE1lc2ggb2JqZWN0LlxyXG4gKlxyXG4gKlxyXG4gKiBAc2VlIGF3YXkuYmFzZS5UcmlhbmdsZVN1Ykdlb21ldHJ5XHJcbiAqIEBzZWUgYXdheS5lbnRpdGllcy5NZXNoXHJcbiAqXHJcbiAqIEBjbGFzcyBhd2F5LmJhc2UuU3ViTWVzaEJhc2VcclxuICovXHJcbmNsYXNzIFRlc3NlbGF0ZWRGb250VGFibGUgZXh0ZW5kcyBBc3NldEJhc2Vcclxue1xyXG5cdHByaXZhdGUgX2ZvbnRfY2hhcnM6QXJyYXk8VGVzc2VsYXRlZEZvbnRDaGFyPjtcclxuXHRwcml2YXRlIF9mb250X2NoYXJzX2RpYzpPYmplY3Q7XHJcblx0cHJpdmF0ZSBfZm9udF9lbV9zaXplOm51bWJlcjtcclxuXHRwcml2YXRlIF9jaGFyRGljdERpcnR5OkJvb2xlYW47XHJcblx0Ly9UT0RPIHRlc3Qgc2hhZGVyIHBpY2tpbmdcclxuLy9cdFx0cHVibGljIGdldCBzaGFkZXJQaWNraW5nRGV0YWlscygpOmJvb2xlYW5cclxuLy9cdFx0e1xyXG4vL1xyXG4vL1x0XHRcdHJldHVybiB0aGlzLnNvdXJjZUVudGl0eS5zaGFkZXJQaWNraW5nRGV0YWlscztcclxuLy9cdFx0fVxyXG5cclxuXHQvKipcclxuXHQgKiBDcmVhdGVzIGEgbmV3IFRlc3NlbGF0ZWRGb250IG9iamVjdFxyXG5cdCAqL1xyXG5cdGNvbnN0cnVjdG9yKClcclxuXHR7XHJcblx0XHRzdXBlcigpO1xyXG5cdFx0dGhpcy5fZm9udF9jaGFycyA9IG5ldyBBcnJheTxUZXNzZWxhdGVkRm9udENoYXI+KCk7XHJcblx0XHR0aGlzLl9mb250X2NoYXJzX2RpYyA9IG5ldyBPYmplY3QoKTtcclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqXHJcblx0ICovXHJcblx0cHVibGljIGRpc3Bvc2UoKVxyXG5cdHtcclxuXHJcblx0fVxyXG5cclxuXHRwdWJsaWMgZ2V0X2ZvbnRfY2hhcnMoKTpBcnJheTxUZXNzZWxhdGVkRm9udENoYXI+XHJcblx0e1xyXG5cdFx0cmV0dXJuIHRoaXMuX2ZvbnRfY2hhcnNcclxuXHR9XHJcblx0cHVibGljIGdldF9mb250X2VtX3NpemUoKTpudW1iZXJcclxuXHR7XHJcblx0XHRyZXR1cm4gdGhpcy5fZm9udF9lbV9zaXplXHJcblx0fVxyXG5cdHB1YmxpYyBzZXRfZm9udF9lbV9zaXplKGZvbnRfZW1fc2l6ZTpudW1iZXIpOnZvaWRcclxuXHR7XHJcblx0XHR0aGlzLl9mb250X2VtX3NpemU9Zm9udF9lbV9zaXplO1xyXG5cdH1cclxuXHQvKipcclxuXHQgKlxyXG5cdCAqL1xyXG5cdHB1YmxpYyBnZXRfc3ViZ2VvX2Zvcl9jaGFyKGNoYXI6c3RyaW5nKTpUZXNzZWxhdGVkRm9udENoYXJcclxuXHR7XHJcblx0XHRyZXR1cm4gdGhpcy5fZm9udF9jaGFyc19kaWNbY2hhcl07XHJcblx0fVxyXG5cdC8qKlxyXG5cdCAqXHJcblx0ICovXHJcblx0cHVibGljIHNldF9zdWJnZW9fZm9yX2NoYXIoY2hhcjpzdHJpbmcsIHN1YmdlbzpTdWJHZW9tZXRyeUJhc2UpOnZvaWRcclxuXHR7XHJcblx0XHR2YXIgdGVzc2VsYXRlZF9mb250X2NoYXI6VGVzc2VsYXRlZEZvbnRDaGFyID0gbmV3IFRlc3NlbGF0ZWRGb250Q2hhcig8Q3VydmVTdWJHZW9tZXRyeT5zdWJnZW8pO1xyXG5cdFx0c3ViZ2VvLm5hbWU9Y2hhcjtcclxuXHRcdHRoaXMuX2ZvbnRfY2hhcnMucHVzaCh0ZXNzZWxhdGVkX2ZvbnRfY2hhcik7XHJcblx0XHR0aGlzLl9mb250X2NoYXJzX2RpY1tjaGFyXT10ZXNzZWxhdGVkX2ZvbnRfY2hhcjtcclxuXHR9XHJcblxyXG59XHJcblxyXG5leHBvcnQgPSBUZXNzZWxhdGVkRm9udFRhYmxlOyJdfQ==