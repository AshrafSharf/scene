/**
 * The TextFormat class represents character formatting information. Use the
 * TextFormat class to create specific text formatting for text fields. You
 * can apply text formatting to both static and dynamic text fields. The
 * properties of the TextFormat class apply to device and embedded fonts.
 * However, for embedded fonts, bold and italic text actually require specific
 * fonts. If you want to display bold or italic text with an embedded font,
 * you need to embed the bold and italic variations of that font.
 *
 * <p> You must use the constructor <code>new TextFormat()</code> to create a
 * TextFormat object before setting its properties. When you apply a
 * TextFormat object to a text field using the
 * <code>TextField.defaultTextFormat</code> property or the
 * <code>TextField.setTextFormat()</code> method, only its defined properties
 * are applied. Use the <code>TextField.defaultTextFormat</code> property to
 * apply formatting BEFORE you add text to the <code>TextField</code>, and the
 * <code>setTextFormat()</code> method to add formatting AFTER you add text to
 * the <code>TextField</code>. The TextFormat properties are <code>null</code>
 * by default because if you don't provide values for the properties, Flash
 * Player uses its own default formatting. The default formatting that Flash
 * Player uses for each property(if property's value is <code>null</code>) is
 * as follows:</p>
 *
 * <p>The default formatting for each property is also described in each
 * property description.</p>
 */
var TesselatedFontChar = (function () {
    function TesselatedFontChar(subgeom) {
        /**
         * the char_codes that this geom has kerning set for
         */
        this.kerningCharCodes = new Array();
        /**
         * the kerning values per char_code
         */
        this.kerningValues = new Array();
        this.char_width = 0;
        this.subgeom = subgeom;
        if (this.subgeom != null) {
            var positions2 = this.subgeom.positions;
            for (var v = 0; v < positions2.length / 3; v++) {
                if (positions2[v * 3] > this.char_width)
                    this.char_width = positions2[v * 3];
            }
        }
    }
    return TesselatedFontChar;
})();
module.exports = TesselatedFontChar;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImF3YXlqcy1kaXNwbGF5L2xpYi90ZXh0L1Rlc3NlbGF0ZWRGb250Q2hhci50cyJdLCJuYW1lcyI6WyJUZXNzZWxhdGVkRm9udENoYXIiLCJUZXNzZWxhdGVkRm9udENoYXIuY29uc3RydWN0b3IiXSwibWFwcGluZ3MiOiJBQVNBLEFBMEJBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBREc7SUFDRyxrQkFBa0I7SUF1QnZCQSxTQXZCS0Esa0JBQWtCQSxDQXVCWEEsT0FBd0JBO1FBVnBDQzs7V0FFR0E7UUFDSUEscUJBQWdCQSxHQUFlQSxJQUFJQSxLQUFLQSxFQUFVQSxDQUFDQTtRQUMxREE7O1dBRUdBO1FBQ0lBLGtCQUFhQSxHQUFlQSxJQUFJQSxLQUFLQSxFQUFVQSxDQUFDQTtRQUt0REEsSUFBSUEsQ0FBQ0EsVUFBVUEsR0FBQ0EsQ0FBQ0EsQ0FBQ0E7UUFDbEJBLElBQUlBLENBQUNBLE9BQU9BLEdBQUdBLE9BQU9BLENBQUNBO1FBQ3ZCQSxFQUFFQSxDQUFDQSxDQUFDQSxJQUFJQSxDQUFDQSxPQUFPQSxJQUFJQSxJQUFJQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUMxQkEsSUFBSUEsVUFBVUEsR0FBaUJBLElBQUlBLENBQUNBLE9BQU9BLENBQUNBLFNBQVNBLENBQUNBO1lBQ3REQSxHQUFHQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQSxHQUFVQSxDQUFDQSxFQUFFQSxDQUFDQSxHQUFHQSxVQUFVQSxDQUFDQSxNQUFNQSxHQUFDQSxDQUFDQSxFQUFFQSxDQUFDQSxFQUFFQSxFQUFFQSxDQUFDQTtnQkFDckRBLEVBQUVBLENBQUFBLENBQUNBLFVBQVVBLENBQUNBLENBQUNBLEdBQUNBLENBQUNBLENBQUNBLEdBQUNBLElBQUlBLENBQUNBLFVBQVVBLENBQUNBO29CQUNsQ0EsSUFBSUEsQ0FBQ0EsVUFBVUEsR0FBQ0EsVUFBVUEsQ0FBQ0EsQ0FBQ0EsR0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFDbENBLENBQUNBO1FBQ0ZBLENBQUNBO0lBQ0ZBLENBQUNBO0lBRUZELHlCQUFDQTtBQUFEQSxDQXBDQSxBQW9DQ0EsSUFBQTtBQUVELEFBQTRCLGlCQUFuQixrQkFBa0IsQ0FBQyIsImZpbGUiOiJ0ZXh0L1Rlc3NlbGF0ZWRGb250Q2hhci5qcyIsInNvdXJjZVJvb3QiOiIuLi8iLCJzb3VyY2VzQ29udGVudCI6WyJcclxuaW1wb3J0IE5hbWVkQXNzZXRCYXNlXHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtY29yZS9saWIvbGlicmFyeS9OYW1lZEFzc2V0QmFzZVwiKTtcclxuXHJcblxyXG5pbXBvcnQgSUFzc2V0XHRcdFx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLWNvcmUvbGliL2xpYnJhcnkvSUFzc2V0XCIpO1xyXG5pbXBvcnQgQXNzZXRUeXBlXHRcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1jb3JlL2xpYi9saWJyYXJ5L0Fzc2V0VHlwZVwiKTtcclxuaW1wb3J0IFRlc3NlbGF0ZWRGb250VGFibGVcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtZGlzcGxheS9saWIvdGV4dC9UZXNzZWxhdGVkRm9udFRhYmxlXCIpO1xyXG5pbXBvcnQgTWF0ZXJpYWxCYXNlXHRcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1kaXNwbGF5L2xpYi9tYXRlcmlhbHMvTWF0ZXJpYWxCYXNlXCIpO1xyXG5pbXBvcnQgQ3VydmVTdWJHZW9tZXRyeVx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLWNvcmUvbGliL2RhdGEvQ3VydmVTdWJHZW9tZXRyeVwiKTtcclxuLyoqXHJcbiAqIFRoZSBUZXh0Rm9ybWF0IGNsYXNzIHJlcHJlc2VudHMgY2hhcmFjdGVyIGZvcm1hdHRpbmcgaW5mb3JtYXRpb24uIFVzZSB0aGVcclxuICogVGV4dEZvcm1hdCBjbGFzcyB0byBjcmVhdGUgc3BlY2lmaWMgdGV4dCBmb3JtYXR0aW5nIGZvciB0ZXh0IGZpZWxkcy4gWW91XHJcbiAqIGNhbiBhcHBseSB0ZXh0IGZvcm1hdHRpbmcgdG8gYm90aCBzdGF0aWMgYW5kIGR5bmFtaWMgdGV4dCBmaWVsZHMuIFRoZVxyXG4gKiBwcm9wZXJ0aWVzIG9mIHRoZSBUZXh0Rm9ybWF0IGNsYXNzIGFwcGx5IHRvIGRldmljZSBhbmQgZW1iZWRkZWQgZm9udHMuXHJcbiAqIEhvd2V2ZXIsIGZvciBlbWJlZGRlZCBmb250cywgYm9sZCBhbmQgaXRhbGljIHRleHQgYWN0dWFsbHkgcmVxdWlyZSBzcGVjaWZpY1xyXG4gKiBmb250cy4gSWYgeW91IHdhbnQgdG8gZGlzcGxheSBib2xkIG9yIGl0YWxpYyB0ZXh0IHdpdGggYW4gZW1iZWRkZWQgZm9udCxcclxuICogeW91IG5lZWQgdG8gZW1iZWQgdGhlIGJvbGQgYW5kIGl0YWxpYyB2YXJpYXRpb25zIG9mIHRoYXQgZm9udC5cclxuICpcclxuICogPHA+IFlvdSBtdXN0IHVzZSB0aGUgY29uc3RydWN0b3IgPGNvZGU+bmV3IFRleHRGb3JtYXQoKTwvY29kZT4gdG8gY3JlYXRlIGFcclxuICogVGV4dEZvcm1hdCBvYmplY3QgYmVmb3JlIHNldHRpbmcgaXRzIHByb3BlcnRpZXMuIFdoZW4geW91IGFwcGx5IGFcclxuICogVGV4dEZvcm1hdCBvYmplY3QgdG8gYSB0ZXh0IGZpZWxkIHVzaW5nIHRoZVxyXG4gKiA8Y29kZT5UZXh0RmllbGQuZGVmYXVsdFRleHRGb3JtYXQ8L2NvZGU+IHByb3BlcnR5IG9yIHRoZVxyXG4gKiA8Y29kZT5UZXh0RmllbGQuc2V0VGV4dEZvcm1hdCgpPC9jb2RlPiBtZXRob2QsIG9ubHkgaXRzIGRlZmluZWQgcHJvcGVydGllc1xyXG4gKiBhcmUgYXBwbGllZC4gVXNlIHRoZSA8Y29kZT5UZXh0RmllbGQuZGVmYXVsdFRleHRGb3JtYXQ8L2NvZGU+IHByb3BlcnR5IHRvXHJcbiAqIGFwcGx5IGZvcm1hdHRpbmcgQkVGT1JFIHlvdSBhZGQgdGV4dCB0byB0aGUgPGNvZGU+VGV4dEZpZWxkPC9jb2RlPiwgYW5kIHRoZVxyXG4gKiA8Y29kZT5zZXRUZXh0Rm9ybWF0KCk8L2NvZGU+IG1ldGhvZCB0byBhZGQgZm9ybWF0dGluZyBBRlRFUiB5b3UgYWRkIHRleHQgdG9cclxuICogdGhlIDxjb2RlPlRleHRGaWVsZDwvY29kZT4uIFRoZSBUZXh0Rm9ybWF0IHByb3BlcnRpZXMgYXJlIDxjb2RlPm51bGw8L2NvZGU+XHJcbiAqIGJ5IGRlZmF1bHQgYmVjYXVzZSBpZiB5b3UgZG9uJ3QgcHJvdmlkZSB2YWx1ZXMgZm9yIHRoZSBwcm9wZXJ0aWVzLCBGbGFzaFxyXG4gKiBQbGF5ZXIgdXNlcyBpdHMgb3duIGRlZmF1bHQgZm9ybWF0dGluZy4gVGhlIGRlZmF1bHQgZm9ybWF0dGluZyB0aGF0IEZsYXNoXHJcbiAqIFBsYXllciB1c2VzIGZvciBlYWNoIHByb3BlcnR5KGlmIHByb3BlcnR5J3MgdmFsdWUgaXMgPGNvZGU+bnVsbDwvY29kZT4pIGlzXHJcbiAqIGFzIGZvbGxvd3M6PC9wPlxyXG4gKlxyXG4gKiA8cD5UaGUgZGVmYXVsdCBmb3JtYXR0aW5nIGZvciBlYWNoIHByb3BlcnR5IGlzIGFsc28gZGVzY3JpYmVkIGluIGVhY2hcclxuICogcHJvcGVydHkgZGVzY3JpcHRpb24uPC9wPlxyXG4gKi9cclxuY2xhc3MgVGVzc2VsYXRlZEZvbnRDaGFyXHJcbntcclxuXHJcblx0LyoqXHJcblx0ICogVGhlIHdpZHRoIG9mIHRoZSBjaGFyXHJcblx0ICovXHJcblx0cHVibGljIGNoYXJfd2lkdGg6bnVtYmVyO1xyXG5cclxuXHQvKipcclxuXHQgKiBTdWJHZW9tZXRyeSBmb3IgdGhpcyBjaGFyXHJcblx0ICovXHJcblx0cHVibGljIHN1Ymdlb206Q3VydmVTdWJHZW9tZXRyeTtcclxuXHJcblx0LyoqXHJcblx0ICogdGhlIGNoYXJfY29kZXMgdGhhdCB0aGlzIGdlb20gaGFzIGtlcm5pbmcgc2V0IGZvclxyXG5cdCAqL1xyXG5cdHB1YmxpYyBrZXJuaW5nQ2hhckNvZGVzOkFycmF5PG51bWJlcj49bmV3IEFycmF5PG51bWJlcj4oKTtcclxuXHQvKipcclxuXHQgKiB0aGUga2VybmluZyB2YWx1ZXMgcGVyIGNoYXJfY29kZVxyXG5cdCAqL1xyXG5cdHB1YmxpYyBrZXJuaW5nVmFsdWVzOkFycmF5PG51bWJlcj49bmV3IEFycmF5PG51bWJlcj4oKTtcclxuXHJcblxyXG5cdGNvbnN0cnVjdG9yKHN1Ymdlb206Q3VydmVTdWJHZW9tZXRyeSlcclxuXHR7XHJcblx0XHR0aGlzLmNoYXJfd2lkdGg9MDtcclxuXHRcdHRoaXMuc3ViZ2VvbSA9IHN1Ymdlb207XHJcblx0XHRpZiAodGhpcy5zdWJnZW9tICE9IG51bGwpIHtcclxuXHRcdFx0dmFyIHBvc2l0aW9uczI6QXJyYXk8bnVtYmVyPiA9IHRoaXMuc3ViZ2VvbS5wb3NpdGlvbnM7XHJcblx0XHRcdGZvciAodmFyIHY6bnVtYmVyID0gMDsgdiA8IHBvc2l0aW9uczIubGVuZ3RoLzM7IHYrKykge1xyXG5cdFx0XHRcdGlmKHBvc2l0aW9uczJbdiozXT50aGlzLmNoYXJfd2lkdGgpXHJcblx0XHRcdFx0XHR0aGlzLmNoYXJfd2lkdGg9cG9zaXRpb25zMlt2KjNdO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fVxyXG5cclxufVxyXG5cclxuZXhwb3J0ID0gVGVzc2VsYXRlZEZvbnRDaGFyOyJdfQ==