/**
 * The TextFormat class represents character formatting information. Use the
 * TextFormat class to create specific text formatting for text fields. You
 * can apply text formatting to both static and dynamic text fields. The
 * properties of the TextFormat class apply to device and embedded fonts.
 * However, for embedded fonts, bold and italic text actually require specific
 * fonts. If you want to display bold or italic text with an embedded font,
 * you need to embed the bold and italic variations of that font.
 *
 * <p> You must use the constructor <code>new TextFormat()</code> to create a
 * TextFormat object before setting its properties. When you apply a
 * TextFormat object to a text field using the
 * <code>TextField.defaultTextFormat</code> property or the
 * <code>TextField.setTextFormat()</code> method, only its defined properties
 * are applied. Use the <code>TextField.defaultTextFormat</code> property to
 * apply formatting BEFORE you add text to the <code>TextField</code>, and the
 * <code>setTextFormat()</code> method to add formatting AFTER you add text to
 * the <code>TextField</code>. The TextFormat properties are <code>null</code>
 * by default because if you don't provide values for the properties, Flash
 * Player uses its own default formatting. The default formatting that Flash
 * Player uses for each property(if property's value is <code>null</code>) is
 * as follows:</p>
 *
 * <p>The default formatting for each property is also described in each
 * property description.</p>
 */
var TesselatedFontChar = (function () {
    function TesselatedFontChar(subgeom) {
        /**
         * the char_codes that this geom has kerning set for
         */
        this.kerningCharCodes = new Array();
        /**
         * the kerning values per char_code
         */
        this.kerningValues = new Array();
        this.char_width = 0;
        this.subgeom = subgeom;
        if (this.subgeom != null) {
            var positions2 = this.subgeom.positions;
            for (var v = 0; v < positions2.length / 3; v++) {
                if (positions2[v * 3] > this.char_width)
                    this.char_width = positions2[v * 3];
            }
        }
    }
    return TesselatedFontChar;
})();
module.exports = TesselatedFontChar;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImF3YXlqcy1kaXNwbGF5L2xpYi90ZXh0L1Rlc3NlbGF0ZWRGb250Q2hhci50cyJdLCJuYW1lcyI6WyJUZXNzZWxhdGVkRm9udENoYXIiLCJUZXNzZWxhdGVkRm9udENoYXIuY29uc3RydWN0b3IiXSwibWFwcGluZ3MiOiJBQUlBLEFBMEJBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBREc7SUFDRyxrQkFBa0I7SUF1QnZCQSxTQXZCS0Esa0JBQWtCQSxDQXVCWEEsT0FBd0JBO1FBVnBDQzs7V0FFR0E7UUFDSUEscUJBQWdCQSxHQUFlQSxJQUFJQSxLQUFLQSxFQUFVQSxDQUFDQTtRQUMxREE7O1dBRUdBO1FBQ0lBLGtCQUFhQSxHQUFlQSxJQUFJQSxLQUFLQSxFQUFVQSxDQUFDQTtRQUt0REEsSUFBSUEsQ0FBQ0EsVUFBVUEsR0FBQ0EsQ0FBQ0EsQ0FBQ0E7UUFDbEJBLElBQUlBLENBQUNBLE9BQU9BLEdBQUdBLE9BQU9BLENBQUNBO1FBQ3ZCQSxFQUFFQSxDQUFDQSxDQUFDQSxJQUFJQSxDQUFDQSxPQUFPQSxJQUFJQSxJQUFJQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUMxQkEsSUFBSUEsVUFBVUEsR0FBaUJBLElBQUlBLENBQUNBLE9BQU9BLENBQUNBLFNBQVNBLENBQUNBO1lBQ3REQSxHQUFHQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQSxHQUFVQSxDQUFDQSxFQUFFQSxDQUFDQSxHQUFHQSxVQUFVQSxDQUFDQSxNQUFNQSxHQUFDQSxDQUFDQSxFQUFFQSxDQUFDQSxFQUFFQSxFQUFFQSxDQUFDQTtnQkFDckRBLEVBQUVBLENBQUFBLENBQUNBLFVBQVVBLENBQUNBLENBQUNBLEdBQUNBLENBQUNBLENBQUNBLEdBQUNBLElBQUlBLENBQUNBLFVBQVVBLENBQUNBO29CQUNsQ0EsSUFBSUEsQ0FBQ0EsVUFBVUEsR0FBQ0EsVUFBVUEsQ0FBQ0EsQ0FBQ0EsR0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFDbENBLENBQUNBO1FBQ0ZBLENBQUNBO0lBQ0ZBLENBQUNBO0lBRUZELHlCQUFDQTtBQUFEQSxDQXBDQSxBQW9DQ0EsSUFBQTtBQUVELEFBQTRCLGlCQUFuQixrQkFBa0IsQ0FBQyIsImZpbGUiOiJ0ZXh0L1Rlc3NlbGF0ZWRGb250Q2hhci5qcyIsInNvdXJjZVJvb3QiOiIuLi8iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgSUFzc2V0XHRcdFx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLWNvcmUvbGliL2xpYnJhcnkvSUFzc2V0XCIpO1xyXG5pbXBvcnQgVGVzc2VsYXRlZEZvbnRUYWJsZVx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1kaXNwbGF5L2xpYi90ZXh0L1Rlc3NlbGF0ZWRGb250VGFibGVcIik7XHJcbmltcG9ydCBNYXRlcmlhbEJhc2VcdFx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLWRpc3BsYXkvbGliL21hdGVyaWFscy9NYXRlcmlhbEJhc2VcIik7XHJcbmltcG9ydCBDdXJ2ZVN1Ykdlb21ldHJ5XHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtY29yZS9saWIvZGF0YS9DdXJ2ZVN1Ykdlb21ldHJ5XCIpO1xyXG4vKipcclxuICogVGhlIFRleHRGb3JtYXQgY2xhc3MgcmVwcmVzZW50cyBjaGFyYWN0ZXIgZm9ybWF0dGluZyBpbmZvcm1hdGlvbi4gVXNlIHRoZVxyXG4gKiBUZXh0Rm9ybWF0IGNsYXNzIHRvIGNyZWF0ZSBzcGVjaWZpYyB0ZXh0IGZvcm1hdHRpbmcgZm9yIHRleHQgZmllbGRzLiBZb3VcclxuICogY2FuIGFwcGx5IHRleHQgZm9ybWF0dGluZyB0byBib3RoIHN0YXRpYyBhbmQgZHluYW1pYyB0ZXh0IGZpZWxkcy4gVGhlXHJcbiAqIHByb3BlcnRpZXMgb2YgdGhlIFRleHRGb3JtYXQgY2xhc3MgYXBwbHkgdG8gZGV2aWNlIGFuZCBlbWJlZGRlZCBmb250cy5cclxuICogSG93ZXZlciwgZm9yIGVtYmVkZGVkIGZvbnRzLCBib2xkIGFuZCBpdGFsaWMgdGV4dCBhY3R1YWxseSByZXF1aXJlIHNwZWNpZmljXHJcbiAqIGZvbnRzLiBJZiB5b3Ugd2FudCB0byBkaXNwbGF5IGJvbGQgb3IgaXRhbGljIHRleHQgd2l0aCBhbiBlbWJlZGRlZCBmb250LFxyXG4gKiB5b3UgbmVlZCB0byBlbWJlZCB0aGUgYm9sZCBhbmQgaXRhbGljIHZhcmlhdGlvbnMgb2YgdGhhdCBmb250LlxyXG4gKlxyXG4gKiA8cD4gWW91IG11c3QgdXNlIHRoZSBjb25zdHJ1Y3RvciA8Y29kZT5uZXcgVGV4dEZvcm1hdCgpPC9jb2RlPiB0byBjcmVhdGUgYVxyXG4gKiBUZXh0Rm9ybWF0IG9iamVjdCBiZWZvcmUgc2V0dGluZyBpdHMgcHJvcGVydGllcy4gV2hlbiB5b3UgYXBwbHkgYVxyXG4gKiBUZXh0Rm9ybWF0IG9iamVjdCB0byBhIHRleHQgZmllbGQgdXNpbmcgdGhlXHJcbiAqIDxjb2RlPlRleHRGaWVsZC5kZWZhdWx0VGV4dEZvcm1hdDwvY29kZT4gcHJvcGVydHkgb3IgdGhlXHJcbiAqIDxjb2RlPlRleHRGaWVsZC5zZXRUZXh0Rm9ybWF0KCk8L2NvZGU+IG1ldGhvZCwgb25seSBpdHMgZGVmaW5lZCBwcm9wZXJ0aWVzXHJcbiAqIGFyZSBhcHBsaWVkLiBVc2UgdGhlIDxjb2RlPlRleHRGaWVsZC5kZWZhdWx0VGV4dEZvcm1hdDwvY29kZT4gcHJvcGVydHkgdG9cclxuICogYXBwbHkgZm9ybWF0dGluZyBCRUZPUkUgeW91IGFkZCB0ZXh0IHRvIHRoZSA8Y29kZT5UZXh0RmllbGQ8L2NvZGU+LCBhbmQgdGhlXHJcbiAqIDxjb2RlPnNldFRleHRGb3JtYXQoKTwvY29kZT4gbWV0aG9kIHRvIGFkZCBmb3JtYXR0aW5nIEFGVEVSIHlvdSBhZGQgdGV4dCB0b1xyXG4gKiB0aGUgPGNvZGU+VGV4dEZpZWxkPC9jb2RlPi4gVGhlIFRleHRGb3JtYXQgcHJvcGVydGllcyBhcmUgPGNvZGU+bnVsbDwvY29kZT5cclxuICogYnkgZGVmYXVsdCBiZWNhdXNlIGlmIHlvdSBkb24ndCBwcm92aWRlIHZhbHVlcyBmb3IgdGhlIHByb3BlcnRpZXMsIEZsYXNoXHJcbiAqIFBsYXllciB1c2VzIGl0cyBvd24gZGVmYXVsdCBmb3JtYXR0aW5nLiBUaGUgZGVmYXVsdCBmb3JtYXR0aW5nIHRoYXQgRmxhc2hcclxuICogUGxheWVyIHVzZXMgZm9yIGVhY2ggcHJvcGVydHkoaWYgcHJvcGVydHkncyB2YWx1ZSBpcyA8Y29kZT5udWxsPC9jb2RlPikgaXNcclxuICogYXMgZm9sbG93czo8L3A+XHJcbiAqXHJcbiAqIDxwPlRoZSBkZWZhdWx0IGZvcm1hdHRpbmcgZm9yIGVhY2ggcHJvcGVydHkgaXMgYWxzbyBkZXNjcmliZWQgaW4gZWFjaFxyXG4gKiBwcm9wZXJ0eSBkZXNjcmlwdGlvbi48L3A+XHJcbiAqL1xyXG5jbGFzcyBUZXNzZWxhdGVkRm9udENoYXJcclxue1xyXG5cclxuXHQvKipcclxuXHQgKiBUaGUgd2lkdGggb2YgdGhlIGNoYXJcclxuXHQgKi9cclxuXHRwdWJsaWMgY2hhcl93aWR0aDpudW1iZXI7XHJcblxyXG5cdC8qKlxyXG5cdCAqIFN1Ykdlb21ldHJ5IGZvciB0aGlzIGNoYXJcclxuXHQgKi9cclxuXHRwdWJsaWMgc3ViZ2VvbTpDdXJ2ZVN1Ykdlb21ldHJ5O1xyXG5cclxuXHQvKipcclxuXHQgKiB0aGUgY2hhcl9jb2RlcyB0aGF0IHRoaXMgZ2VvbSBoYXMga2VybmluZyBzZXQgZm9yXHJcblx0ICovXHJcblx0cHVibGljIGtlcm5pbmdDaGFyQ29kZXM6QXJyYXk8bnVtYmVyPj1uZXcgQXJyYXk8bnVtYmVyPigpO1xyXG5cdC8qKlxyXG5cdCAqIHRoZSBrZXJuaW5nIHZhbHVlcyBwZXIgY2hhcl9jb2RlXHJcblx0ICovXHJcblx0cHVibGljIGtlcm5pbmdWYWx1ZXM6QXJyYXk8bnVtYmVyPj1uZXcgQXJyYXk8bnVtYmVyPigpO1xyXG5cclxuXHJcblx0Y29uc3RydWN0b3Ioc3ViZ2VvbTpDdXJ2ZVN1Ykdlb21ldHJ5KVxyXG5cdHtcclxuXHRcdHRoaXMuY2hhcl93aWR0aD0wO1xyXG5cdFx0dGhpcy5zdWJnZW9tID0gc3ViZ2VvbTtcclxuXHRcdGlmICh0aGlzLnN1Ymdlb20gIT0gbnVsbCkge1xyXG5cdFx0XHR2YXIgcG9zaXRpb25zMjpBcnJheTxudW1iZXI+ID0gdGhpcy5zdWJnZW9tLnBvc2l0aW9ucztcclxuXHRcdFx0Zm9yICh2YXIgdjpudW1iZXIgPSAwOyB2IDwgcG9zaXRpb25zMi5sZW5ndGgvMzsgdisrKSB7XHJcblx0XHRcdFx0aWYocG9zaXRpb25zMlt2KjNdPnRoaXMuY2hhcl93aWR0aClcclxuXHRcdFx0XHRcdHRoaXMuY2hhcl93aWR0aD1wb3NpdGlvbnMyW3YqM107XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9XHJcblxyXG59XHJcblxyXG5leHBvcnQgPSBUZXNzZWxhdGVkRm9udENoYXI7Il19