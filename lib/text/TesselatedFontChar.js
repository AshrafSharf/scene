/**
 * The TextFormat class represents character formatting information. Use the
 * TextFormat class to create specific text formatting for text fields. You
 * can apply text formatting to both static and dynamic text fields. The
 * properties of the TextFormat class apply to device and embedded fonts.
 * However, for embedded fonts, bold and italic text actually require specific
 * fonts. If you want to display bold or italic text with an embedded font,
 * you need to embed the bold and italic variations of that font.
 *
 * <p> You must use the constructor <code>new TextFormat()</code> to create a
 * TextFormat object before setting its properties. When you apply a
 * TextFormat object to a text field using the
 * <code>TextField.defaultTextFormat</code> property or the
 * <code>TextField.setTextFormat()</code> method, only its defined properties
 * are applied. Use the <code>TextField.defaultTextFormat</code> property to
 * apply formatting BEFORE you add text to the <code>TextField</code>, and the
 * <code>setTextFormat()</code> method to add formatting AFTER you add text to
 * the <code>TextField</code>. The TextFormat properties are <code>null</code>
 * by default because if you don't provide values for the properties, Flash
 * Player uses its own default formatting. The default formatting that Flash
 * Player uses for each property(if property's value is <code>null</code>) is
 * as follows:</p>
 *
 * <p>The default formatting for each property is also described in each
 * property description.</p>
 */
var TesselatedFontChar = (function () {
    function TesselatedFontChar(subgeom) {
        /**
         * the char_codes that this geom has kerning set for
         */
        this.kerningCharCodes = new Array();
        /**
         * the kerning values per char_code
         */
        this.kerningValues = new Array();
        this.char_width = 0;
        this.subgeom = subgeom;
        if (this.subgeom != null) {
            var positions2 = this.subgeom.positions;
            for (var v = 0; v < positions2.length / 3; v++) {
                if (positions2[v * 3] > this.char_width)
                    this.char_width = positions2[v * 3];
            }
        }
    }
    return TesselatedFontChar;
})();
module.exports = TesselatedFontChar;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImF3YXlqcy1kaXNwbGF5L2xpYi90ZXh0L1Rlc3NlbGF0ZWRGb250Q2hhci50cyJdLCJuYW1lcyI6WyJUZXNzZWxhdGVkRm9udENoYXIiLCJUZXNzZWxhdGVkRm9udENoYXIuY29uc3RydWN0b3IiXSwibWFwcGluZ3MiOiJBQUlBLEFBMEJBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBREc7SUFDRyxrQkFBa0I7SUF1QnZCQSxTQXZCS0Esa0JBQWtCQSxDQXVCWEEsT0FBd0JBO1FBVnBDQzs7V0FFR0E7UUFDSUEscUJBQWdCQSxHQUFlQSxJQUFJQSxLQUFLQSxFQUFVQSxDQUFDQTtRQUMxREE7O1dBRUdBO1FBQ0lBLGtCQUFhQSxHQUFlQSxJQUFJQSxLQUFLQSxFQUFVQSxDQUFDQTtRQUt0REEsSUFBSUEsQ0FBQ0EsVUFBVUEsR0FBQ0EsQ0FBQ0EsQ0FBQ0E7UUFDbEJBLElBQUlBLENBQUNBLE9BQU9BLEdBQUdBLE9BQU9BLENBQUNBO1FBQ3ZCQSxFQUFFQSxDQUFDQSxDQUFDQSxJQUFJQSxDQUFDQSxPQUFPQSxJQUFJQSxJQUFJQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUMxQkEsSUFBSUEsVUFBVUEsR0FBaUJBLElBQUlBLENBQUNBLE9BQU9BLENBQUNBLFNBQVNBLENBQUNBO1lBQ3REQSxHQUFHQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQSxHQUFVQSxDQUFDQSxFQUFFQSxDQUFDQSxHQUFHQSxVQUFVQSxDQUFDQSxNQUFNQSxHQUFDQSxDQUFDQSxFQUFFQSxDQUFDQSxFQUFFQSxFQUFFQSxDQUFDQTtnQkFDckRBLEVBQUVBLENBQUFBLENBQUNBLFVBQVVBLENBQUNBLENBQUNBLEdBQUNBLENBQUNBLENBQUNBLEdBQUNBLElBQUlBLENBQUNBLFVBQVVBLENBQUNBO29CQUNsQ0EsSUFBSUEsQ0FBQ0EsVUFBVUEsR0FBQ0EsVUFBVUEsQ0FBQ0EsQ0FBQ0EsR0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFDbENBLENBQUNBO1FBQ0ZBLENBQUNBO0lBQ0ZBLENBQUNBO0lBRUZELHlCQUFDQTtBQUFEQSxDQXBDQSxBQW9DQ0EsSUFBQTtBQUVELEFBQTRCLGlCQUFuQixrQkFBa0IsQ0FBQyIsImZpbGUiOiJ0ZXh0L1Rlc3NlbGF0ZWRGb250Q2hhci5qcyIsInNvdXJjZVJvb3QiOiIuLi8iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgSUFzc2V0XHRcdFx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLWNvcmUvbGliL2xpYnJhcnkvSUFzc2V0XCIpO1xuaW1wb3J0IFRlc3NlbGF0ZWRGb250VGFibGVcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtZGlzcGxheS9saWIvdGV4dC9UZXNzZWxhdGVkRm9udFRhYmxlXCIpO1xuaW1wb3J0IE1hdGVyaWFsQmFzZVx0XHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtZGlzcGxheS9saWIvbWF0ZXJpYWxzL01hdGVyaWFsQmFzZVwiKTtcbmltcG9ydCBDdXJ2ZVN1Ykdlb21ldHJ5XHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtY29yZS9saWIvZGF0YS9DdXJ2ZVN1Ykdlb21ldHJ5XCIpO1xuLyoqXG4gKiBUaGUgVGV4dEZvcm1hdCBjbGFzcyByZXByZXNlbnRzIGNoYXJhY3RlciBmb3JtYXR0aW5nIGluZm9ybWF0aW9uLiBVc2UgdGhlXG4gKiBUZXh0Rm9ybWF0IGNsYXNzIHRvIGNyZWF0ZSBzcGVjaWZpYyB0ZXh0IGZvcm1hdHRpbmcgZm9yIHRleHQgZmllbGRzLiBZb3VcbiAqIGNhbiBhcHBseSB0ZXh0IGZvcm1hdHRpbmcgdG8gYm90aCBzdGF0aWMgYW5kIGR5bmFtaWMgdGV4dCBmaWVsZHMuIFRoZVxuICogcHJvcGVydGllcyBvZiB0aGUgVGV4dEZvcm1hdCBjbGFzcyBhcHBseSB0byBkZXZpY2UgYW5kIGVtYmVkZGVkIGZvbnRzLlxuICogSG93ZXZlciwgZm9yIGVtYmVkZGVkIGZvbnRzLCBib2xkIGFuZCBpdGFsaWMgdGV4dCBhY3R1YWxseSByZXF1aXJlIHNwZWNpZmljXG4gKiBmb250cy4gSWYgeW91IHdhbnQgdG8gZGlzcGxheSBib2xkIG9yIGl0YWxpYyB0ZXh0IHdpdGggYW4gZW1iZWRkZWQgZm9udCxcbiAqIHlvdSBuZWVkIHRvIGVtYmVkIHRoZSBib2xkIGFuZCBpdGFsaWMgdmFyaWF0aW9ucyBvZiB0aGF0IGZvbnQuXG4gKlxuICogPHA+IFlvdSBtdXN0IHVzZSB0aGUgY29uc3RydWN0b3IgPGNvZGU+bmV3IFRleHRGb3JtYXQoKTwvY29kZT4gdG8gY3JlYXRlIGFcbiAqIFRleHRGb3JtYXQgb2JqZWN0IGJlZm9yZSBzZXR0aW5nIGl0cyBwcm9wZXJ0aWVzLiBXaGVuIHlvdSBhcHBseSBhXG4gKiBUZXh0Rm9ybWF0IG9iamVjdCB0byBhIHRleHQgZmllbGQgdXNpbmcgdGhlXG4gKiA8Y29kZT5UZXh0RmllbGQuZGVmYXVsdFRleHRGb3JtYXQ8L2NvZGU+IHByb3BlcnR5IG9yIHRoZVxuICogPGNvZGU+VGV4dEZpZWxkLnNldFRleHRGb3JtYXQoKTwvY29kZT4gbWV0aG9kLCBvbmx5IGl0cyBkZWZpbmVkIHByb3BlcnRpZXNcbiAqIGFyZSBhcHBsaWVkLiBVc2UgdGhlIDxjb2RlPlRleHRGaWVsZC5kZWZhdWx0VGV4dEZvcm1hdDwvY29kZT4gcHJvcGVydHkgdG9cbiAqIGFwcGx5IGZvcm1hdHRpbmcgQkVGT1JFIHlvdSBhZGQgdGV4dCB0byB0aGUgPGNvZGU+VGV4dEZpZWxkPC9jb2RlPiwgYW5kIHRoZVxuICogPGNvZGU+c2V0VGV4dEZvcm1hdCgpPC9jb2RlPiBtZXRob2QgdG8gYWRkIGZvcm1hdHRpbmcgQUZURVIgeW91IGFkZCB0ZXh0IHRvXG4gKiB0aGUgPGNvZGU+VGV4dEZpZWxkPC9jb2RlPi4gVGhlIFRleHRGb3JtYXQgcHJvcGVydGllcyBhcmUgPGNvZGU+bnVsbDwvY29kZT5cbiAqIGJ5IGRlZmF1bHQgYmVjYXVzZSBpZiB5b3UgZG9uJ3QgcHJvdmlkZSB2YWx1ZXMgZm9yIHRoZSBwcm9wZXJ0aWVzLCBGbGFzaFxuICogUGxheWVyIHVzZXMgaXRzIG93biBkZWZhdWx0IGZvcm1hdHRpbmcuIFRoZSBkZWZhdWx0IGZvcm1hdHRpbmcgdGhhdCBGbGFzaFxuICogUGxheWVyIHVzZXMgZm9yIGVhY2ggcHJvcGVydHkoaWYgcHJvcGVydHkncyB2YWx1ZSBpcyA8Y29kZT5udWxsPC9jb2RlPikgaXNcbiAqIGFzIGZvbGxvd3M6PC9wPlxuICpcbiAqIDxwPlRoZSBkZWZhdWx0IGZvcm1hdHRpbmcgZm9yIGVhY2ggcHJvcGVydHkgaXMgYWxzbyBkZXNjcmliZWQgaW4gZWFjaFxuICogcHJvcGVydHkgZGVzY3JpcHRpb24uPC9wPlxuICovXG5jbGFzcyBUZXNzZWxhdGVkRm9udENoYXJcbntcblxuXHQvKipcblx0ICogVGhlIHdpZHRoIG9mIHRoZSBjaGFyXG5cdCAqL1xuXHRwdWJsaWMgY2hhcl93aWR0aDpudW1iZXI7XG5cblx0LyoqXG5cdCAqIFN1Ykdlb21ldHJ5IGZvciB0aGlzIGNoYXJcblx0ICovXG5cdHB1YmxpYyBzdWJnZW9tOkN1cnZlU3ViR2VvbWV0cnk7XG5cblx0LyoqXG5cdCAqIHRoZSBjaGFyX2NvZGVzIHRoYXQgdGhpcyBnZW9tIGhhcyBrZXJuaW5nIHNldCBmb3Jcblx0ICovXG5cdHB1YmxpYyBrZXJuaW5nQ2hhckNvZGVzOkFycmF5PG51bWJlcj49bmV3IEFycmF5PG51bWJlcj4oKTtcblx0LyoqXG5cdCAqIHRoZSBrZXJuaW5nIHZhbHVlcyBwZXIgY2hhcl9jb2RlXG5cdCAqL1xuXHRwdWJsaWMga2VybmluZ1ZhbHVlczpBcnJheTxudW1iZXI+PW5ldyBBcnJheTxudW1iZXI+KCk7XG5cblxuXHRjb25zdHJ1Y3RvcihzdWJnZW9tOkN1cnZlU3ViR2VvbWV0cnkpXG5cdHtcblx0XHR0aGlzLmNoYXJfd2lkdGg9MDtcblx0XHR0aGlzLnN1Ymdlb20gPSBzdWJnZW9tO1xuXHRcdGlmICh0aGlzLnN1Ymdlb20gIT0gbnVsbCkge1xuXHRcdFx0dmFyIHBvc2l0aW9uczI6QXJyYXk8bnVtYmVyPiA9IHRoaXMuc3ViZ2VvbS5wb3NpdGlvbnM7XG5cdFx0XHRmb3IgKHZhciB2Om51bWJlciA9IDA7IHYgPCBwb3NpdGlvbnMyLmxlbmd0aC8zOyB2KyspIHtcblx0XHRcdFx0aWYocG9zaXRpb25zMlt2KjNdPnRoaXMuY2hhcl93aWR0aClcblx0XHRcdFx0XHR0aGlzLmNoYXJfd2lkdGg9cG9zaXRpb25zMlt2KjNdO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG59XG5cbmV4cG9ydCA9IFRlc3NlbGF0ZWRGb250Q2hhcjsiXX0=